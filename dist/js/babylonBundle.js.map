{"version":3,"file":"js/babylonBundle.js","mappings":"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","sources":["webpack://gaw/webpack/bootstrap","webpack://gaw/webpack/runtime/define property getters","webpack://gaw/webpack/runtime/hasOwnProperty shorthand","webpack://gaw/./game/scene1.js","webpack://gaw/./game/sceneTest2.js","webpack://gaw/./game/CustomModels.js","webpack://gaw/./game/CharacterController.js","webpack://gaw/./game/PlayerLevel1.js","webpack://gaw/./game/scene2.js","webpack://gaw/./game/CharacterController2.js","webpack://gaw/./game/PlayerLevel2.js","webpack://gaw/./game/scene3.js","webpack://gaw/./game/CharacterController3.js","webpack://gaw/./game/PlayerLevel3.js","webpack://gaw/./game/BowlingPin.js","webpack://gaw/./game/scene4.js","webpack://gaw/./game/Menu.js","webpack://gaw/./game/SceneManager.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level1\";\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nfunction sceneData() {\r\n    //activer la physique sur la scene \r\n    //var physicsEngine = new BABYLON.CannonJSPlugin();\r\n   // scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), physicsEngine);\r\n    //scene.collisionsEnabled = true;\r\n    \r\n   \r\n    // Configurez une caméra\r\n    //var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    //camera.setTarget(BABYLON.Vector3.Zero());\r\n    //camera.attachControl();\r\n\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    // Créez un matériau pour le cube (bleu)\r\n    var material = new BABYLON.StandardMaterial(\"blueMaterial\", scene);\r\n    material.diffuseColor = new BABYLON.Color3(0, 0, 1); // Couleur bleue\r\n\r\n    \r\n\r\n\r\n    // Créez un cube avec le matériau\r\n    var cube = BABYLON.MeshBuilder.CreateBox(\"blueCube\", { size: 2 }, scene);\r\n    cube.material = material;\r\n\r\n    // Positionnez le cube où vous le souhaitez\r\n    cube.position = new BABYLON.Vector3(0, 1, 20);   \r\n\r\n    /*\r\n    var followCamera = new BABYLON.FollowCamera(\"FollowCam\", new BABYLON.Vector3(0, 5, -10), scene,cube);\r\n    followCamera.attachControl(canvas, true);*/\r\n\r\n    //var devcamera = new DevCamera(canvas, scene);\r\n  \r\n\r\n    var model = new CustomModels(scene);\r\n    model.CreateColiseum(0,0,0 );\r\n  \r\n    scene.debugLayer.show();\r\n\r\n\r\n    \r\n\r\n}\r\n\r\nfunction launch() {\r\n    \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    \r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.attachControl();\r\n    sceneData();\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\nfunction killLevel(){\r\n    scene.dispose();\r\n}\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\nexport { name, scene, sceneData, launch , killLevel };\r\n","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\n\r\n//import { SceneLoader } from \"@babylonjs/core\";\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level2\";\r\n\r\nfunction sceneData() {\r\n    // Ajoutez une lumière hémisphérique\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n    // Activer la physique sur la scène\r\n    var physicsEngine = new BABYLON.CannonJSPlugin();\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), physicsEngine);\r\n    scene.collisionsEnabled = true;\r\n\r\n\r\n    var cube = BABYLON.MeshBuilder.CreateBox(\"redCube\", { size: 2 }, scene);\r\n    cube.position = new BABYLON.Vector3(0, 5, 0);\r\n    // Ajouter une imposture de physique pour activer les collisions et définir la masse à 1 \r\n    \r\n    cube.physicsImpostor = new BABYLON.PhysicsImpostor(\r\n        cube,\r\n        BABYLON.PhysicsImpostor.BoxImpostor,\r\n        { mass: 1, friction: 0.5, restitution: 0, resolution: 0.1 },\r\n        scene\r\n    );\r\n    var place = new CustomModels();\r\n  \r\n    var tree = new CustomModels();\r\n    var sceneprod = new CustomModels();\r\n    \r\n    \r\n    \r\n    var ground = BABYLON.Mesh.CreateGround(\"ground\", 20, 20, 2, scene);\r\n    ground.physicsImpostor = new BABYLON.PhysicsImpostor(\r\n        ground,\r\n        BABYLON.PhysicsImpostor.BoxImpostor,\r\n        { mass: 0, friction: 0.5, restitution: 0.7 },\r\n        scene\r\n    );\r\n    \r\n\r\n    // Créer une sphère\r\n    var sphere = BABYLON.Mesh.CreateSphere(\"sphere\", 16, 2, scene);\r\n    sphere.position = new BABYLON.Vector3(0, 10, 0); // Positionnez la sphère en c\r\n    sphere.physicsImpostor = new BABYLON.PhysicsImpostor(\r\n        sphere,\r\n        BABYLON.PhysicsImpostor.SphereImpostor,\r\n        { mass: 1, friction: 0.5, restitution: 0.7 },\r\n        scene\r\n    );\r\n\r\n    // Créez un matériau pour le sol (par exemple, blanc)\r\n    var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n\r\n    ground.material = groundMaterial;\r\n\r\n    // Créez un matériau pour la sphère (par exemple, bleu)\r\n    var sphereMaterial = new BABYLON.StandardMaterial(\"sphereMaterial\", scene);\r\n    sphereMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Couleur bleue\r\n    sphere.material = sphereMaterial;\r\n    //activer la camera libre et le script de deplacement de personnage\r\n    var devcamera = new DevCamera(canvas, scene);\r\n    var character = new CharacterController(canvas, scene,engine,cube);\r\n}\r\n\r\n\r\n\r\nfunction launch() {\r\n    sceneData();\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\nexport { name, scene, sceneData, launch };\r\n","\r\n\r\n\r\nexport class CustomModels {\r\n\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    \r\n    \r\n    /** ######################################################################## LEVEL2 3D MODEL #########################################################################**/\r\n\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    async CreateTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n         \r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            \r\n        \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    async CreatePineTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        return   BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            meshes[0].scaling.x = 3\r\n            meshes[0].scaling.y = 2\r\n            meshes[0].scaling.z = 4\r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n            //troncAggregate.shape.\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, shapeBox2, { mass: 0 }, this.scene);\r\n           \r\n            \r\n        \r\n           //return boundingBox;\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n       \r\n    }\r\n\r\n\r\n\r\n    CreateSnowManOnSki(x, y, z,parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        // Charger le modèle 3D\r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"snowman_on_skis.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi SnowMan\", meshes);\r\n            mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n            mesh.name = \"SnowMan\";\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne le modèle une fois chargé\r\n            mesh.setParent(parent);\r\n \r\n            //mesh.rotationQuaternion._y = 85;\r\n\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n    \r\n        return { mesh }; // Retourne mesh\r\n    }\r\n    \r\n    \r\n  \r\n    \r\n   \r\n    async CreateSceneProd(x, y, z) {\r\n       \r\n    }\r\n    async CreatePlayer(x, y, z) {\r\n        \r\n    }\r\n      \r\n    async Zone(x, y, z) {\r\n      \r\n     \r\n    }\r\n\r\n    async plane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(-0.1, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n\r\n    async flatplane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(0, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n    async createDeadTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Dead Trees With Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 30\r\n            meshes[0].scaling.y = 20\r\n            meshes[0].scaling.z = 20\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(30, 30, 30),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n\r\n  \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Snow Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createLitleSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow two.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowMan(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"SnowManRotated.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 1\r\n            meshes[0].scaling.y = 1\r\n            meshes[0].scaling.z = 1\r\n      \r\n            let globalMesh = meshes[0];\r\n            \r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(\"SNOWMAN \"+globalMesh.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateRampe1(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"rampe_2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n \r\n            meshes[0].scaling.x = 5\r\n            meshes[0].scaling.y = 5\r\n            meshes[0].scaling.z = 5\r\n   \r\n           \r\n            let mesh = meshes[0];\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            mesh.name =\"Rampe\"\r\n            let elment =meshes[1] ;\r\n           \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(elment, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n           \r\n\r\n            \r\n           // var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n    createSnowMount(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Rock Forms 3 (White).glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            meshes[0].scaling.x = 150\r\n            meshes[0].scaling.y = 150\r\n            meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            let element =meshes[1] ;\r\n            element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n          \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(element, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n\r\n    createFinalScene2(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"finalscene2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            //meshes[0].scaling.x = 150\r\n            //meshes[0].scaling.y = 150\r\n            //meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[2].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            //let element =meshes[1] ;\r\n            let element = this.scene.getMeshByName(\"Cube (sol)\");\r\n            //let element2 = this.scene.getMeshByName(\"Cube (sol)\") ;\r\n            //let element3 = this.scene.getMeshByUniqueId(769) ;\r\n\r\n            //element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n\r\n            //console.log();\r\n        \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                i++\r\n            }\r\n            \r\n          \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n    \r\n    \r\n    \r\n    /** ######################################################################## Scene3 3D MODEL #########################################################################**/\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreatePlateform(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"plateforme_scene3.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n\r\n /** ######################################################################## Scene4 3D MODEL #########################################################################**/\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    CreatePlateform_Scene4(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene4_gameplay_ELEMENT.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingBall(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi ball\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n          \r\n            mesh.name =\"ball\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n         \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /** ######################################################################## MENU 3D MODEL #########################################################################**/\r\n\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n    \r\n                //var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n               // troncAggregate.shape.isTrigger =  true;\r\n    \r\n                \r\n                //var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n\r\n                 \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n               // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n    \r\n                //var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n               // troncAggregate.shape.isTrigger =  true;\r\n    \r\n                \r\n                //var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n\r\n                 \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n    \r\n   \r\n}\r\n","class CharacterController {\r\n    constructor(canvas , engine, character,forward,backward,left,right) {\r\n        this.setupKeyboardInput(canvas, engine, character,forward,backward,left,right);\r\n    }\r\n\r\n    setupKeyboardInput(canvas, engine, character,forwardI,backward,left,right) {\r\n        this.keys = {};\r\n\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            this.keys[event.key] = true;\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            // Vérifie l'état des touches dans l'objet \"keys\" et effectue des actions en conséquence.\r\n\r\n            if (this.keys[forwardI]) {\r\n                //console.log('Touche Z enfoncée');\r\n                \r\n                let forward = character.transformNode.forward.scale(-5);\r\n                console.log(forward);\r\n\r\n                character.applyForce(forward , character.transformNode.position);\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n          \r\n            }\r\n\r\n            if (this.keys[backward]) {\r\n                //console.log('Touche S enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(0, 0, 5), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                //charater.position.z += 0.1; // Déplace le personnage vers l'avant (positif sur l'axe z).\r\n            }\r\n\r\n            if (this.keys[left]) {\r\n                //console.log('Touche Q enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, -0.5, 0));\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.position.x += 0.1; // Déplace le personnage vers la gauche (positif sur l'axe x).\r\n            }\r\n\r\n            if (this.keys[right]) {\r\n                //console.log('Touche D enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(-5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0.5, 0));\r\n                //character.position.x -= 0.1; // Déplace le personnage vers la droite (négatif sur l'axe x).\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController;\r\n","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel1 {\r\n\r\n    constructor(scene,engine,name,forward,backward,left,right,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.boxBody ;\r\n\r\n        this.testPlayer(scene,engine,name,x,y,z);\r\n        this.enablePlayerControl(forward,backward,left,right);\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n\r\n        \r\n\r\n\r\n       \r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n\r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        box.isVisible = false;\r\n        //var box2 = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        //box.addChild(snowMan);\r\n        let snowMan = new CustomModels(scene).CreateSnowManOnSki(x,y-0.5,z,box);\r\n      \r\n       \r\n        //box.addChild(box2);\r\n        \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        \r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n\r\n        //rotate character\r\n      \r\n      \r\n        this.boxBody = boxBody;\r\n        \r\n     \r\n        \r\n      \r\n     \r\n        \r\n    \r\n       \r\n \r\n        return box;\r\n    \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(forward,backward,left,right){\r\n       let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel1;","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nimport {PlayerLevel1} from \"./PlayerLevel1.js\";\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level2\";\r\nvar value = \"start\";     \r\n//var player = new PlayerLevel1(scene);\r\n\r\nasync function getInitializedHavok() {\r\n  return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    \r\n    // Ajoutez une lumière hémisphériques\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    \r\n    const havokInstance = await HavokPhysics();\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n   \r\n    \r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0),  hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n\r\n    var sceneprod = new CustomModels(scene);\r\n    //PART 1 LEVEL\r\n\r\n    //first plane \r\n    let plane = sceneprod.plane(5,0,-45,25,150,scene);\r\n  \r\n   \r\n\r\n    let x = -10;\r\n    var pineTree = new CustomModels(scene);\r\n    \r\n    pineTree.CreatePineTree(0,3,-10+x);\r\n    pineTree.CreatePineTree(10,3,-10+x);\r\n    pineTree.CreatePineTree(15,3,-10+x);\r\n    pineTree.CreatePineTree(-5,3,-10+x);\r\n    var deadTrees = new CustomModels(scene);\r\n    //deadTrees.createDeadTree(0,5,-20);\r\n\r\n    var snowTrees = new CustomModels(scene);\r\n    snowTrees.createSnowTree(0,4.5,-30+x);\r\n    snowTrees.createSnowTree(5,4.5,-30+x);\r\n    snowTrees.createSnowTree(15,4.5,-30+x);\r\n\r\n    var snowLitleTrees = new CustomModels(scene);\r\n    snowLitleTrees.createLitleSnowTree(-5,3,-50+x);\r\n    snowLitleTrees.createLitleSnowTree(9,3,-50+x);\r\n    snowLitleTrees.createLitleSnowTree(15,3,-50+x);\r\n\r\n\r\n    var snowMan= new CustomModels(scene);\r\n    snowMan.createSnowMan(0,-2.5,-70+x);\r\n    snowMan.createSnowMan(-5,-2.5,-70+x);\r\n    snowMan.createSnowMan(5,-2.5,-70+x);\r\n\r\n\r\n \r\n\r\n  \r\n\r\n  \r\n\r\n\r\n    var ascendingRampe= new CustomModels(scene);\r\n\r\n    ascendingRampe.CreateRampe1(10,-5,-100+x);\r\n\r\n    //********************************************************** PART 2 LEVEL ******************************************************************************/////////////////\r\n\r\n    //second plane \r\n    sceneprod.plane(5,-25,-250,25,230,scene);\r\n\r\n\r\n    var rampe_1 = new CustomModels(scene);\r\n\r\n    //rajout de neige\r\n    var snowMount= new CustomModels(scene);\r\n    \r\n    snowMount.createSnowMount(0,-12,-150+x);\r\n    snowMount.createSnowMount(11,-20,-210+x);\r\n    snowMount.createSnowMount(0,-23,-255+x);\r\n    snowMount.createSnowMount(11,-25.5,-290+x);\r\n    \r\n    //rajout d'une rampe\r\n    ascendingRampe.CreateRampe1(-5,-34.5,-350+x);\r\n\r\n\r\n    \r\n    var tree2 = new CustomModels(scene);\r\n    tree2.CreateTree(0,0,-10 );\r\n\r\n    \r\n    var plane2 = new CustomModels();\r\n    sceneprod.plane(5,-25,-250,25,230,scene);\r\n\r\n //********************************************************** PART 3 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane \r\n    var plane3 = new CustomModels(scene);\r\n    \r\n    plane3.flatplane(5,-32,-445,25,100,scene);\r\n\r\n    rampe_1.CreateRampe1(12,-32,-500);\r\n    snowMan.createSnowMan(12,-28,-500);\r\n    \r\n    rampe_1.CreateRampe1(4,-32,-500);\r\n    snowMan.createSnowMan(5,-28,-500);\r\n\r\n    rampe_1.CreateRampe1(-4,-32,-500);\r\n\r\n//********************************************************** PART 4 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane \r\n    var plane3 = new CustomModels(scene);\r\n    \r\n    plane3.flatplane(5,-28,-580,25,100,scene);\r\n\r\n    rampe_1.CreateRampe1(12,-28,-630);\r\n\r\n    snowMount.createSnowMount(4,-24,-630);\r\n\r\n//********************************************************** PART 5 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane\r\n    \r\n    var plane3 = new CustomModels(scene);\r\n    plane3.flatplane(5,-24,-750,25,200,scene);\r\n\r\n    snowMan.createSnowTree(12,-20,-705);\r\n    snowMount.createSnowTree(-4,-20,-705);\r\n\r\n    snowMan.createSnowTree(12,-20,-715);\r\n    snowMount.createSnowTree(-4,-20,-715);\r\n\r\n    snowMan.createSnowTree(12,-20,-725);\r\n    snowMount.createSnowTree(-4,-20,-725);\r\n    \r\n    snowMan.createSnowTree(12,-20,-735);\r\n    snowMount.createSnowTree(-4,-20,-735);\r\n\r\n    snowMan.createSnowTree(12,-20,-745);\r\n    snowMount.createSnowTree(-4,-20,-745);\r\n\r\n    snowMan.createSnowTree(12,-20,-755);\r\n    snowMount.createSnowTree(-4,-20,-755);\r\n\r\n    snowMan.createSnowTree(12,-20,-765);\r\n    snowMount.createSnowTree(-4,-20,-765);\r\n\r\n    snowMan.createSnowTree(12,-20,-770);\r\n    snowMount.createSnowTree(-4,-20,-770);\r\n\r\n    snowMan.createSnowTree(12,-20,-775);\r\n    snowMount.createSnowTree(-4,-20,-775);\r\n\r\n\r\n    snowMan.createSnowTree(12,-20,-785);\r\n    snowMount.createSnowTree(-4,-20,-785);\r\n\r\n    snowMan.createSnowTree(12,-20,-800);\r\n    snowMount.createSnowTree(-4,-20,-800);\r\n\r\n    snowMan.createSnowTree(12,-20,-810);\r\n    snowMount.createSnowTree(-4,-20,-810);\r\n\r\n    snowMan.createSnowTree(12,-20,-820);\r\n    snowMount.createSnowTree(-4,-20,-820);\r\n\r\n    snowMan.createSnowTree(12,-20,-830);\r\n    snowMount.createSnowTree(-4,-20,-830);\r\n\r\n    snowMan.createSnowTree(12,-20,-840);\r\n    snowMount.createSnowTree(-4,-20,-840);\r\n\r\n    rampe_1.CreateRampe1(4,-24,-850);\r\n\r\n    //trigger to die and pass\r\n    triggerDie();\r\n   \r\n\r\n    \r\n\r\n\r\n\r\n   //testPlayer();\r\n\r\n   let player = new PlayerLevel1(scene,engine,'player1','z','s','q','d',5,5,0);\r\n\r\n   let player2 = new PlayerLevel1(scene,engine,'player2','i','k','j','l',0,5,0);\r\n\r\n   triggerRespawn();\r\n\r\n   //montrer le layer\r\n   //scene.debugLayer.show();\r\n   \r\n   \r\n\r\n    var place = new CustomModels(scene);\r\n    place.createFinalScene2(4,-24,-970);\r\n   \r\n    \r\n \r\n\r\n    \r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    //let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    //console.log(scene.getMeshByName(\"player\"));\r\n    //console.log(scene.getMeshByUniqueId(6));\r\n    \r\n    eventHandler(hk,player);\r\n   return playerMesh;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction testPlayer(){\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    box.position = new BABYLON.Vector3(0,5,0);\r\n\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    let control = new CharacterController(canvas,scene,engine,boxBody);\r\n    return box;\r\n\r\n    \r\n}\r\n\r\nfunction triggerDie(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(10, 10, 10),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 2;\r\n    box.position.y = -24;\r\n    box.position.z = -1010;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\nfunction triggerRespawn(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(25, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 100;\r\n    var boxH = 2;\r\n    var boxD = 2000;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Die\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 2;\r\n    box.position.y = -45;\r\n    box.position.z = -800;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nfunction eventHandler(hk,player){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n        if(ev.collidedAgainst.transformNode.name ==\"tronc\"){\r\n                console.log(\"End OF the Game\")\r\n                reloadlevel();\r\n               \r\n                player = null;\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n            player = null;\r\n  \r\n\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Die\"){\r\n            console.log(\"YOU DIEEEEEEEEEE\");\r\n            value = \"death\";\r\n            reloadlevel();\r\n            player = null;\r\n           \r\n            //return \"death\";\r\n        }\r\n    });\r\n}\r\n\r\nfunction launch() {\r\n   /*\r\n    var camera2 = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.attachControl(canvas);*/\r\n\r\n    //camera2.cameraRotation = 0;\r\n   \r\n    //createCamPlayer and camera\r\n    /*\r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });*/\r\n    \r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5);\r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5); \r\n   \r\n    scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh;\r\n        camera2.lockedTarget = playerMesh2;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n    \r\n       \r\n \r\n    engine.runRenderLoop(function () {\r\n       //console.log(value)\r\n       scene.render();\r\n       \r\n     \r\n    });\r\n    \r\n   \r\n}\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n  \r\n  \r\n    engine.stopRenderLoop();\r\n}\r\n\r\nfunction reloadlevel(){\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n\r\n \r\n\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel3();\r\n\r\n}\r\n\r\n\r\nexport { name, scene, sceneData, launch,killLevel };\r\n","class CharacterController2 {\r\n    constructor(canvas, scene, engine, character1, input1, inputJump,animationGroup) {\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, input1, inputJump,animationGroup);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1, inputJump,animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n\r\n                \r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n                    \r\n                 \r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                    console.log(\"Touche enfoncée, action effectuée jump\");\r\n              \r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n            \r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump ) {\r\n                isKeyPressed2 = false;\r\n                console.log(\"Touche relâchée jump\");\r\n                // Ajoutez ici la logique pour arrêter le saut du personnage si nécessaire\r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n                //console.log(\"Touche relâchée\");\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            \r\n            if (isKeyPressed) {\r\n            \r\n                character.applyForce(new BABYLON.Vector3(0, 0, -50), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n               \r\n                isKeyPressed = false;\r\n                //animationGroup[2].play();\r\n            }\r\n            \r\n            if (isKeyPressed2) {\r\n                character.applyForce(new BABYLON.Vector3(0, 100, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                isKeyPressed2 = false;\r\n            }\r\n\r\n            character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController2 from './CharacterController2.js';\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel2 {\r\n\r\n    constructor(scene,engine,name,forward,jump,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name = name;\r\n        this.boxBody ;\r\n        this.boxMesh;\r\n        this.animationGroups;\r\n\r\n        this.createPlayer(x,y,z);\r\n        this.enablePlayerControl(forward,jump);\r\n       // this.Character(x,y,z);\r\n     \r\n    }\r\n    \r\n\r\n    async createPlayer(x,y,z){\r\n\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n        var box = BABYLON.MeshBuilder.CreateBox(this.name, {width: boxW, height: boxH, depth: boxD},this.scene);\r\n        this.boxMesh = box;\r\n        //ADD character disable box visibility \r\n        //box.visibility = false;\r\n       //this.Character(x, y, z, box); \r\n\r\n\r\n\r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD),this.scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        this.boxBody = boxBody;\r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", this.scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n        await this.Character(x, y, z, box);\r\n       \r\n        \r\n     \r\n    \r\n     \r\n     \r\n        \r\n    \r\n        //boxBody.applyForce()\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n        return box;\r\n    }\r\n    \r\n  \r\n \r\n    enablePlayerControl(forward,jump){\r\n       let control = new CharacterController2(canvas,this.scene,this.engine,this.boxBody,forward,jump,this.animationGroups);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n   \r\n    async Character(x, y, z, parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        const { meshes, animationGroups } = await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"./models/character1_anim/\", \"animCharacter.glb\", this.scene);\r\n    \r\n        mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n        mesh.name = \"RUNNER\";\r\n        mesh.position = new BABYLON.Vector3(x, y - 1.05, z); // Positionne le modèle une fois chargé\r\n    \r\n        if (parent) {\r\n            mesh.setParent(parent); // Attacher le modèle au parent si spécifié\r\n        }\r\n        this.animationGroups = animationGroups;\r\n        // Vous pouvez ajouter des manipulations supplémentaires sur le mesh ici, comme l'échelle ou la rotation\r\n    \r\n        console.log(\"Chargement réussi Personnage\", mesh);\r\n        //gerer les animations\r\n        //console.log(\"ANIMATION GROUP :\"+animationGroups)\r\n  \r\n        //animationGroups[0].play();\r\n        //animationGroups[1].play();\r\n    \r\n        return { mesh };\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel2;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level3\";\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController2 from './CharacterController2.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport PlayerLevel2 from './PlayerLevel2.js';\r\n\r\nasync function getInitializedHavok() {\r\n    return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n \r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n   \r\n    // Configurez une caméra\r\n   \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    \r\n\r\n\r\n    // Créez un cube avec le matériau\r\n  \r\n    \r\n    let player1 = new PlayerLevel2(scene,engine,\"player1\",'s','f', 10,15,0);\r\n    let player2 = new PlayerLevel2(scene,engine,\"player2\",'k','m',0,15,0);\r\n\r\n\r\n\r\n    //player2.position.x =0;\r\n    //player2.position.y =0;\r\n    //player2.position.z =0;\r\n\r\n    //var devcamera = new DevCamera(canvas, scene);\r\n    // Positionnez le cube où vous le souhaitez\r\n\r\n    triggerEnd();\r\n    eventHandler(hk);\r\n\r\n    // Ajoutez l'événement de clic à la scène\r\n    scene.onPointerDown = function (evt, pickResult) {\r\n        onPointerDown(evt, pickResult);\r\n    };\r\n\r\n    var plane2 = new CustomModels(scene);\r\n    plane2.CreatePlateform(0,0, -472,678);\r\n\r\n   \r\n    //scene.debugLayer.show();\r\n\r\n}\r\n\r\nfunction launch() {\r\n   \r\n\r\n    \r\n   \r\n    //var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(-3, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5); \r\n   \r\n    //scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n    scene.activeCameras.push(camera)\r\n\r\n\r\n\r\n  \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(\"MESH PLAYER2\"+playerMesh2); // Utilisez playerMesh comme nécessaire\r\n\r\n        let playerMesh1 = scene.getMeshByName(\"player1\");\r\n        //console.log(\"MESH PLAYER2\"+playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh2;\r\n        camera2.lockedTarget = playerMesh1;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n// Fonction appelée lorsqu'un clic est détecté\r\nfunction onPointerDown(evt, pickResult) {\r\n    if (pickResult.hit) {\r\n        // Votre code d'interaction ici, par exemple, changez la couleur de l'objet\r\n        if(pickResult.pickedMesh.name ==\"player\"){\r\n\r\n            pickResult.pickedMesh.material.diffuseColor = new BABYLON.Color3(0, 1, 0); // Vert\r\n        }\r\n       \r\n    }\r\n}\r\n\r\n\r\n\r\nfunction catchPlayer(){\r\n    \r\n}\r\n\r\nfunction createPlayer(x,y,z , input1,inputJump){\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    //box.position = new BABYLON.Vector3(0,5,0);\r\n    box.position = new BABYLON.Vector3(x,y,z);\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n    let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n    return box;\r\n}\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction triggerEnd(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(25, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 20;\r\n    var boxH = 20;\r\n    var boxD = 20;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 5,132;\r\n    box.position.y = 11,546;\r\n    box.position.z = -962,739;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\nfunction eventHandler(hk){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n\r\n        }\r\n      \r\n    });\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n}\r\n\r\n\r\nexport { name, scene, sceneData, launch };\r\n","class CharacterController2 {\r\n    constructor(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch) {\r\n        this.destroyed = false;\r\n        this.action = false;\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1,input2, inputJump,inputLaunch) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n\r\n             \r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n            \r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n          \r\n            if(!this.destroyed){\r\n                if (this.keys[input1]) {\r\n                    console.log('Touche gauche enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            \r\n                }\r\n\r\n                if (this.keys[input2]) {\r\n                    console.log('Touche Droite enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(-5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n                \r\n                if (this.keys[inputJump] && !this.action) {\r\n                    console.log('Touche JUMP enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(0, 30, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n                if (this.keys[inputLaunch] && !this.action) {\r\n                    console.log('Touche LAUNCH enfoncée');\r\n                    this.action = true;\r\n                    character.applyForce(new BABYLON.Vector3(0, 0, 700*4), new BABYLON.Vector3(0, 0, 0));\r\n                    //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            }\r\n        });\r\n\r\n       \r\n    }\r\n\r\n\r\n    destroy() {\r\n     \r\n        this.destroyed = true;\r\n\r\n        // Libérez les références aux objets\r\n        this.canvas = null;\r\n        this.engine = null;\r\n\r\n        //this.character1.dispose();\r\n        this.character1 = null;\r\n        this.inputLeft = null;\r\n        this.inputRight = null;\r\n        this.inputJump = null;\r\n        this.inputLaunch = null;\r\n\r\n        // Réinitialisez ou supprimez d'autres ressources si nécessaire\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController3 from './CharacterController3.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel3 {\r\n\r\n    constructor(scene,engine,name,left,right,jump,action,x,y,z) {\r\n        this.control;\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name= name;\r\n        this.boxBody ;\r\n        this.sphereBody;\r\n        this.box;\r\n        this.rayHelper;\r\n        //this.testPlayer(scene,engine,name,x,y,z);\r\n      \r\n        this.shootBall(left,right,jump,action,x,y,z);\r\n    \r\n        this.enablePlayerControl(left,right,jump,action);\r\n\r\n        \r\n        //this.raycast();\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n       \r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        this.box =box;\r\n   \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n      \r\n       \r\n        this.boxBody = boxBody;\r\n        \r\n    \r\n     \r\n     \r\n        \r\n    \r\n\r\n      \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(inputLeft,inputRight,jump,action){\r\n       //let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n        let control2 = new CharacterController3(canvas2,this.engine,this.sphereBody, inputRight,inputLeft,jump,action);\r\n        this.control = control2;\r\n     \r\n      \r\n    }\r\n\r\n    raycast() {\r\n        // Get the player mesh by name\r\n        var playerMesh = this.scene.getMeshByName(this.name);\r\n        // Ensure the player mesh exists\r\n        if (!playerMesh) {\r\n            console.error(\"Player mesh not found\");\r\n            return;\r\n        }\r\n        // Get the player's position\r\n        var rayOrigin = playerMesh.position;\r\n        // Set the ray direction along the positive Z-axis\r\n        var rayDirection = new BABYLON.Vector3(0, 0, 1);\r\n        // Set the ray length\r\n        var rayLength = 50;\r\n        // Calculate the destination point of the ray\r\n        var rayDestination = rayOrigin.add(rayDirection.scale(rayLength));\r\n        // Create the ray\r\n        var ray = new BABYLON.Ray(rayOrigin, rayDirection, rayLength);\r\n        // Create a ray helper for visualization (optional)\r\n        var rayHelper = new BABYLON.RayHelper(ray);\r\n        rayHelper.show(this.scene, new BABYLON.Color3(0.9, 0, 0));\r\n        // Perform raycasting or any other actions with the ray\r\n        // Example: Check if the ray intersects with a mesh\r\n        var hit = this.scene.pickWithRay(ray);\r\n        \r\n        this.rayHelper = rayHelper;\r\n        //rayHelper.hide();\r\n\r\n        /*\r\n        if (hit.pickedMesh) {\r\n            console.log(\"Ray hits:\", hit.pickedMesh.name);\r\n            // Do something with the intersected mesh\r\n        }*/\r\n    }\r\n\r\n    shootBall(left,right,jump,action,x,y,z){\r\n        let segments = 16;\r\n        let diameter = 2;\r\n\r\n        const sphere = BABYLON.MeshBuilder.CreateSphere(this.name, { segments, diameter }, this.scene);\r\n        sphere.position = new BABYLON.Vector3(x,y,z);\r\n\r\n       \r\n        var sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0,0,0),diameter-1,this.scene);\r\n        var sphereBody = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        sphereBody.shape = sphereShape;\r\n        sphereBody.setMassProperties({mass : 2});\r\n        //sphereBody.setCollisionCallbackEnabled(true);\r\n       \r\n        \r\n        this.sphereBody = sphereBody;\r\n        //this.sphereBody.dispose();\r\n\r\n    }\r\n    disableThisObject(){\r\n        //delete this.control;\r\n        this.control.destroy();\r\n        this.control = null;\r\n        \r\n        //this.sphereBody.dispose();\r\n       \r\n    }\r\n    instanciate(){\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel3;","\r\n\r\nexport class BowlingPin {\r\n\r\n    constructor(scene,x,y,z) {\r\n       \r\n        this.scene = scene;\r\n       \r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        this.mesh;\r\n        this.Aggregate;\r\n        this.meshIdPromise = this.createBowlingPin();\r\n    }\r\n    \r\n    createBowlingPin(){\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Bowling Pin.glb\", this.scene, (meshes) => {\r\n\r\n                const shape = new BABYLON.PhysicsShapeCapsule(\r\n                    new BABYLON.Vector3(0,0,0), // center of the sphere in local space\r\n                    10, // radius of the sphere\r\n                    this.scene // containing scene\r\n                );\r\n\r\n                const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                    new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                    new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                    new BABYLON.Vector3(0.5, 1.2, 0.5),      // dimensions of the box\r\n                    this.scene                                // scene of the shape\r\n                );\r\n                const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                    new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                    new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                    new BABYLON.Vector3(0.5, 1.2, 0.5),      // dimensions of the box\r\n                    this.scene                                // scene of the shape\r\n                );\r\n\r\n                let boxKid = BABYLON.MeshBuilder.CreateBox(\"Pintrigger\");\r\n                //boxKid.isVisible = false;\r\n\r\n                //console.log(\"Chargement réussi Pin\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                mesh.scaling._z =  mesh.scaling._z *-1;\r\n                mesh.name =\"Pin\"\r\n\r\n  \r\n            \r\n        \r\n                mesh.position = new BABYLON.Vector3(this.x, this.y, this.z); // Positionne l'objet\r\n            \r\n\r\n            \r\n                var Aggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0.5 }, this.scene);\r\n                Aggregate.body.setCollisionCallbackEnabled(true);\r\n                this.Aggregate = Aggregate;\r\n                this.mesh = mesh;\r\n               \r\n                const meshId = mesh.uniqueId;\r\n                resolve(meshId);\r\n\r\n            }, undefined, undefined, \".glb\");\r\n        })\r\n\r\n    }\r\n  \r\n    \r\n    async getMeshId(){\r\n         return await this.meshIdPromise;\r\n    }\r\n \r\n   \r\n    disableThisObject(){\r\n        this.Aggregate.body.setCollisionCallbackEnabled(false);\r\n        this.Aggregate.body.dispose();\r\n        //this.mesh.dispose();\r\n       \r\n    }\r\n    isPinUp() {\r\n        // Récupérer la rotation de la quille\r\n        const rotation = this.mesh.rotationQuaternion.toEulerAngles();\r\n\r\n        // Définir un seuil pour la rotation, en dessous duquel la quille est considérée comme renversée\r\n        const threshold = 0.1; // À ajuster selon vos besoins\r\n\r\n        // Vérifier si la rotation autour de l'axe X (ou un autre axe selon votre modèle) dépasse le seuil\r\n        const isUp = Math.abs(rotation.x) < threshold;\r\n\r\n        return isUp;\r\n    }\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default BowlingPin;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level4\";\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController3 from './CharacterController3.js';\r\nimport PlayerLevel3 from './PlayerLevel3.js';\r\nimport BowlingPin from './BowlingPin.js';\r\nlet player1;\r\nlet player2;\r\n\r\nlet countPlayer1 =0;\r\nlet countPlayer2 =0;\r\n\r\n\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n\r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n       \r\n    \r\n\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   \r\n\r\n    var model = new CustomModels(scene);\r\n    \r\n    var listeQuilles1 = [];\r\n\r\n    \r\n\r\n    let add =13 ;\r\n    var listeQuilles2 = [];\r\n   \r\n    \r\n    \r\n   \r\n   // console.log(countPlayer1);\r\n \r\n\r\n    //model.CreateBowlingBall(0,12,0)\r\n\r\n  //let player2 = new PlayerLevel3(scene,engine,\"player2\",\"ArrowLeft\",\"ArrowRight\",\"ArrowUp\",-5,5,0)\r\n\r\n \r\n   // console.log(countPlayer1);\r\n     player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,0);\r\n     player2 = new PlayerLevel3(scene,engine,\"player2\",'j','l','i','Enter',28,8,0);\r\n\r\n     //let pin = new BowlingPin(scene,0,2,19.397);\r\n    \r\n   \r\n    let ball1 = scene.getMeshByName(\"player1\");\r\n    \r\n    \r\n    //CreateBowlingBall(0,6,0);\r\n\r\n    eventHandler(hk,player1,player2);\r\n\r\n    model.CreatePlateform_Scene4();\r\n    listeQuilles1 =  addQuille(listeQuilles1,0,0,-10);\r\n    listeQuilles2 =  addQuille(listeQuilles2,28,0,-10);\r\n\r\n    testSearch(listeQuilles1,countPlayer1,\"player1\");\r\n    testSearch(listeQuilles2,countPlayer2,\"player2\");\r\n\r\n    \r\n        \r\n\r\n    let ball = scene.getMeshByName(\"ball\");\r\n    \r\n    \r\n\r\n  \r\n\r\n    //trigger Player1\r\n    triggerRespawn(0,2,97.43,30, 30, 10);\r\n    triggerRespawn(7.5,2,48,1, 30,90);\r\n    triggerRespawn(-7.5,2,48,1, 30,90);\r\n\r\n    //trigger Player2\r\n    triggerRespawn(30,2,97.43,30, 30, 10);\r\n    triggerRespawn(20,2,48,1, 30,90);\r\n    triggerRespawn(35.5,2,48,1, 30,90);\r\n\r\n   \r\n    \r\n    //scene.debugLayer.show();\r\n\r\n\r\n}\r\n\r\nfunction launch() {\r\n      \r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.inertia = 0;\r\n    camera.angularSensibility = 0;\r\n    camera.detachControl(canvas);\r\n    camera.cameraRotation = 0;\r\n    scene.activeCameras.push(camera);\r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1);\r\n    scene.activeCameras.push(camera);\r\n\r\n\r\n    var camera2 = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(27, 5, -10), scene);\r\n    camera2.inertia = 0;\r\n    camera2.angularSensibility = 0;\r\n    camera2.detachControl(canvas);\r\n    camera2.cameraRotation = 0;\r\n    scene.activeCameras.push(camera2);\r\n    camera2.viewport = new BABYLON.Viewport(0.5,0 , 0.5, 1);\r\n    scene.activeCameras.push(camera2);\r\n    /*\r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0.5, 0.5, 0.5, 0.5); \r\n    scene.activeCameras.push(camera2);*/\r\n \r\n   \r\n\r\n    sceneData();\r\n  \r\n\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    console.log(playerMesh2);\r\n    //console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n    \r\n    camera.lockedTarget = playerMesh;\r\n    //camera2.lockedTarget = playerMesh2;\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nfunction CreateBowlingBall(x, y, z) {\r\n    let tree;\r\n    let boundingBox;\r\n    let tronc;\r\n    var mesh \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi ball\", meshes);\r\n    \r\n        mesh = meshes[0];\r\n      \r\n        mesh.name =\"ball\"\r\n        \r\n    \r\n\r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        //var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n     \r\n    \r\n    }, undefined, undefined, \".glb\");\r\n\r\n\r\n\r\n    return {mesh};\r\n}\r\n\r\n\r\nfunction triggerRespawn(x,y,z,sizeX,sizeY,sizeZ){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(sizeX,sizeY,sizeZ),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    //let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Respawn\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n    \r\n\r\n    \r\n    //Aggregate.dispose();\r\n    \r\n}\r\n\r\nfunction eventHandler(hk,player1,player2){\r\n\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            //killLevel();\r\n            //loadNextLevel();\r\n            player1 = null;\r\n  \r\n\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Respawn\" && ( ev.collider.transformNode.name == \"player1\" || ev.collider.transformNode.name == \"player2\" ) ){\r\n            console.log(\"YOU RESPAWNWNNN\");\r\n\r\n            if(ev.collider.transformNode.name == \"player1\"){\r\n                let ball1 = scene.getMeshByName(\"player1\");\r\n         \r\n                player1.disableThisObject();\r\n                //player1 = null;\r\n                ball1.dispose();\r\n                \r\n                player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',-5,5,0);\r\n            \r\n     \r\n            }else{\r\n                let ball2 = scene.getMeshByName(\"player2\");\r\n                player2.disableThisObject();\r\n                //player2 = null;\r\n                ball2.dispose()\r\n\r\n                player2= new PlayerLevel3(scene,engine,\"player2\",'j','l','i','Enter',28,5,0);\r\n              \r\n            }\r\n          \r\n         \r\n\r\n            \r\n          \r\n        }\r\n     \r\n    });\r\n\r\n   //pinsCount(hk);\r\n\r\n   \r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n  \r\n  \r\n    engine.stopRenderLoop();\r\n}\r\n\r\n\r\n\r\nfunction pinsCount(hk){\r\n\r\n    hk.onCollisionObservable.add((ev) => {\r\n        //console.log(ev.type);\r\n        //console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       //check if Pin is collided add count to counter of the player\r\n   \r\n       if(ev.collidedAgainst.transformNode.name ==\"Pin\" ){\r\n            //console.log(\"YOU collide a pin\");\r\n            let uniqueId =ev.collidedAgainst.transformNode.uniqueId;\r\n            //console.log(ev.collidedAgainst.transformNode.uniqueId);\r\n            //list.push();\r\n            if(ev.collider.transformNode.name == \"player2\"){\r\n\r\n                //console.log(\"player1 IS ON THE PLACE\")\r\n\r\n                testSearch(uniqueId);\r\n              \r\n                countPlayer1++;\r\n                console.log(countPlayer1);\r\n                \r\n            }\r\n      \r\n        }\r\n});\r\n\r\n}\r\n\r\nasync function testSearch(listeQuilles1,countPlayer1,playerText){\r\n\r\n \r\n    engine.runRenderLoop(async () => {\r\n\r\n        for(let i=0;i<listeQuilles1.length; i++){\r\n            const meshIdQuille = await listeQuilles1[i].getMeshId();\r\n            const quille =  listeQuilles1[i];\r\n            //console.log(meshIdQuille);\r\n            /*\r\n            if(meshIdQuille == id){\r\n                \r\n                quille.disableThisObject();\r\n            \r\n            }*/\r\n            if(!quille.isPinUp()){\r\n                countPlayer1++;\r\n                \r\n                listeQuilles1.splice(i, 1);\r\n\r\n                // Décrémenter i pour compenser la suppression de l'élément\r\n                i--;\r\n                    \r\n            };\r\n        }\r\n        console.log(\"compteur \"+playerText+\" \" +countPlayer1);\r\n\r\n\r\n\r\n\r\n    })\r\n   \r\n  \r\n    \r\n \r\n}\r\n\r\n\r\nfunction addQuille( listeQuilles1,x,y,z){\r\n\r\n\r\n    listeQuilles1 = [\r\n        //-3\r\n        new BowlingPin(scene, 0.25+x, 2+y,21+z),\r\n        //-2\r\n             \r\n        //new BowlingPin(scene, 0, 2, 21.5),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y,21.5+z),\r\n        new BowlingPin(scene, 0.50+x, 2+y,21.5+z),\r\n        //new BowlingPin(scene, 0.60, 2,21.5),\r\n      \r\n\r\n\r\n        //-1\r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0.25+x, 2+y, 22+z),\r\n        new BowlingPin(scene, 0.60+x, 2+y,22+z),\r\n        \r\n      \r\n\r\n\r\n        //0\r\n        new BowlingPin(scene, -0.5+x, 2+y, 22.5+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,22.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,22.5+z),\r\n        \r\n        //1\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23+z),\r\n   \r\n        //2\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 23.5+z),\r\n\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,23.5+z),\r\n      \r\n        \r\n        //3\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24+z),\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24+z),\r\n        \r\n        //4\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 24.5+z),\r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 24.5+z),\r\n       \r\n\r\n\r\n        \r\n        //5\r\n\r\n        new BowlingPin(scene, -0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25+z),\r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25+z),\r\n        //new BowlingPin(scene, 4, 2, 25),\r\n        \r\n        \r\n\r\n       //6\r\n       \r\n        new BowlingPin(scene, -0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 25.5+z),\r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 25.5+z),\r\n   \r\n        \r\n\r\n        //7\r\n        new BowlingPin(scene, -0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -4+x, 2+y, 26+z),\r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 26+z),  \r\n        new BowlingPin(scene, 2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4.5+x, 2+y, 26+z),\r\n\r\n        //listeQuilles1.forEach(pin => pin.position.y += 5)\r\n    \r\n     \r\n    ];\r\n    return listeQuilles1;\r\n}\r\n\r\n\r\nexport { name, scene, sceneData, launch };\r\n","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"Menu\";\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nfunction sceneData() {\r\n    //activer la physique sur la scene \r\n   \r\n    scene.collisionsEnabled = true;\r\n    \r\n   \r\n    // Configurez une caméra\r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.setTarget(BABYLON.Vector3.Zero());\r\n    camera.attachControl();\r\n\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    // Créez un matériau pour le cube (bleu)\r\n    var material = new BABYLON.StandardMaterial(\"blueMaterial\", scene);\r\n    material.diffuseColor = new BABYLON.Color3(0, 0, 1); // Couleur bleue\r\n\r\n    \r\n\r\n   \r\n\r\n    \r\n    var model = new CustomModels();\r\n    model.CreateColiseum(0,0,0 );\r\n  \r\n\r\n      //montrer le layer\r\n   scene.debugLayer.show();\r\n\r\n}\r\n\r\nfunction launch() {\r\n    sceneData();\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\nexport { name, scene, sceneData, launch };\r\n","// Importez les modules \"scene1.js\" et \"scene2.js\" pour accéder à leurs fonctionnalités\r\nimport * as level1 from './scene1.js'; // Remplacez './scene1.js' par le chemin vers votre fichier de scène 1\r\nimport * as sceneTest2 from './sceneTest2.js'\r\nimport * as scene2 from './scene2.js'\r\nimport * as scene3 from './scene3.js'\r\nimport * as scene4 from './scene4.js'\r\nimport * as menu from './Menu.js'\r\n\r\n\r\n// Fonction principale\r\nfunction Main() {\r\n    // Appelez la fonction \"launch\" du module \"level2\" pour lancer la scène 2\r\n    \r\n   // launchLevel1();\r\n   \r\n    launchLevel2();\r\n   //launchLevel3();\r\n   //launchLevel4();\r\n   \r\n}\r\nfunction launchLevelMenu(){\r\n    \r\n    menu.launch();\r\n}\r\nfunction launchLevel1(){\r\n    \r\n    level1.launch();\r\n}\r\nfunction launchLevel2(){\r\n    scene2.killLevel();\r\n    scene2.launch();\r\n}\r\n\r\n\r\nfunction launchLevel3(){\r\n    \r\n   scene3.launch();\r\n}\r\n\r\nfunction launchLevel4(){\r\n    \r\n    scene4.launch();\r\n}\r\n \r\n\r\n\r\n\r\n// Exécute la fonction principale\r\nMain();\r\nexport { launchLevel2 ,launchLevel1,launchLevel3,launchLevel4,launchLevelMenu};"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","canvas","document","getElementById","engine","BABYLON","Engine","Scene","constructor","scene","this","CreateTree","x","y","z","tree","tronc","SceneLoader","ImportMesh","meshes","console","log","name","position","Vector3","PhysicsAggregate","PhysicsShapeType","BOX","mass","shape","isTrigger","undefined","boundingBox","CreatePineTree","scaling","shapeBox1","PhysicsShapeBox","Quaternion","shapeBox2","CreateSnowManOnSki","parent","mesh","setParent","CreateSceneProd","CreatePlayer","Zone","plane","width","height","ground","MeshBuilder","CreateGround","subdivisions","addInPlace","rotation","groundMaterial","StandardMaterial","diffuseColor","Color3","material","flatplane","createDeadTree","globalMesh","createSnowTree","createLitleSnowTree","createSnowMan","CreateRampe1","bigMesh","elment","MESH","createSnowMount","element","createFinalScene2","getMeshByName","i","length","CreatePlateform","CreatePlateform_Scene4","CreateBowlingBall","SPHERE","CreateColiseum","character","forward","backward","left","right","setupKeyboardInput","forwardI","keys","addEventListener","event","runRenderLoop","transformNode","scale","applyForce","setAngularVelocity","ZeroReadOnly","canvas2","PlayerLevel1","boxBody","testPlayer","enablePlayerControl","box","CreateBox","depth","isVisible","rotationQuaternion","Identity","boxShape","PhysicsBody","PhysicsMotionType","DYNAMIC","setMassProperties","blueMaterial","setCollisionCallbackEnabled","destroyPlayer","control","player","forEach","dispose","cameras","lights","light","stopRenderLoop","reloadlevel","character1","input1","inputJump","animationGroup","setupKeyboardInputPlayer","isKeyPressed","isKeyPressed2","jump","boxMesh","animationGroups","createPlayer","Character","ImportMeshAsync","inputLeft","inputRight","inputLaunch","destroyed","action","input2","destroy","sphereBody","rayHelper","shootBall","control2","CharacterController3","raycast","playerMesh","rayOrigin","rayDirection","ray","add","Ray","RayHelper","show","pickWithRay","error","sphere","CreateSphere","segments","diameter","sphereShape","PhysicsShapeSphere","disableThisObject","instanciate","Aggregate","meshIdPromise","createBowlingPin","Promise","resolve","PhysicsShapeCapsule","_z","body","meshId","uniqueId","getMeshId","isPinUp","toEulerAngles","Math","abs","player1","player2","countPlayer1","countPlayer2","sizeX","sizeY","sizeZ","async","testSearch","listeQuilles1","playerText","splice","addQuille","launchLevel3","camera","FollowCamera","cameraRotation","viewport","Viewport","camera2","activeCameras","push","havokInstance","HavokPhysics","hk","HavokPlugin","enablePhysics","collisionsEnabled","HemisphericLight","triggerEnd","onTriggerCollisionObservable","ev","type","collider","collidedAgainst","onPointerDown","evt","pickResult","hit","pickedMesh","then","playerMesh2","playerMesh1","lockedTarget","catch","render","launchLevel4","FreeCamera","inertia","angularSensibility","detachControl","model","listeQuilles2","ball1","ball2","sceneprod","pineTree","snowTrees","snowLitleTrees","snowMan","ascendingRampe","rampe_1","snowMount","triggerDie","triggerRespawn","eventHandler"],"sourceRoot":""}