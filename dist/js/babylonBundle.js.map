{"version":3,"file":"js/babylonBundle.js","mappings":"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","sources":["webpack://gaw/webpack/bootstrap","webpack://gaw/webpack/runtime/define property getters","webpack://gaw/webpack/runtime/hasOwnProperty shorthand","webpack://gaw/./game/End.js","webpack://gaw/./game/CustomModels.js","webpack://gaw/./game/CharacterController.js","webpack://gaw/./game/PlayerLevel1.js","webpack://gaw/./game/scene2.js","webpack://gaw/./game/CharacterController2.js","webpack://gaw/./game/PlayerLevel2.js","webpack://gaw/./game/scene3.js","webpack://gaw/./game/CharacterController3.js","webpack://gaw/./game/PlayerLevel3.js","webpack://gaw/./game/BowlingPin.js","webpack://gaw/./game/scene4.js","webpack://gaw/./game/Menu.js","webpack://gaw/./game/SceneManager.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nimport { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nvar createScene = function () {\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -22), scene);\r\n    if(sceneManager.winCountPlayer1 > sceneManager.winCountPlayer2){\r\n        playerWin(9,0,0);\r\n        playerLoose(-11,0,0);\r\n\r\n    }else{\r\n        playerWin(-11,0,0);\r\n        playerLoose(9,0,0);\r\n    }\r\n\r\n    //scene.debugLayer.show();\r\n    displayControlUI();\r\n    //hideControlUI();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"End\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\nfunction hideControlUI(){\r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"End\");\r\n\r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n\r\n}\r\nfunction playerWin(x,y,z){\r\n    \r\n    \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Loose.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi coliseum\", meshes);\r\n     \r\n        let mesh = meshes[0];\r\n       \r\n        mesh.name =\"playerLoose\"\r\n        \r\n       \r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        \r\n    \r\n      \r\n      \r\n    }, undefined, undefined, \".glb\");\r\n\r\n\r\n\r\n}\r\nfunction playerLoose(x,y,z){\r\n  \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"victory.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi coliseum\", meshes);\r\n     \r\n        let mesh = meshes[0];\r\n       \r\n        mesh.name =\"playerLoose\"\r\n        \r\n       \r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        \r\n    \r\n      \r\n      \r\n    }, undefined, undefined, \".glb\");\r\n}\r\n\r\nexport {  scene, launch };\r\n\r\n","\r\n\r\n\r\nexport class CustomModels {\r\n\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    \r\n    \r\n    /** ######################################################################## LEVEL2 3D MODEL #########################################################################**/\r\n\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    async CreateTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n         \r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            \r\n        \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    async CreatePineTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        return   BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            meshes[0].scaling.x = 3\r\n            meshes[0].scaling.y = 2\r\n            meshes[0].scaling.z = 4\r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n            //troncAggregate.shape.\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, shapeBox2, { mass: 0 }, this.scene);\r\n           \r\n            \r\n        \r\n           //return boundingBox;\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n       \r\n    }\r\n\r\n\r\n\r\n    CreateSnowManOnSki(x, y, z,parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        // Charger le modèle 3D\r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"snowman_on_skis.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi SnowMan\", meshes);\r\n            mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n            mesh.name = \"SnowMan\";\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne le modèle une fois chargé\r\n            mesh.setParent(parent);\r\n \r\n            //mesh.rotationQuaternion._y = 85;\r\n\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n    \r\n        return { mesh }; // Retourne mesh\r\n    }\r\n    \r\n    \r\n  \r\n    \r\n   \r\n    async CreateSceneProd(x, y, z) {\r\n       \r\n    }\r\n    async CreatePlayer(x, y, z) {\r\n        \r\n    }\r\n      \r\n    async Zone(x, y, z) {\r\n      \r\n     \r\n    }\r\n\r\n    async plane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(-0.1, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n\r\n    async flatplane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(0, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n    async createDeadTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Dead Trees With Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 30\r\n            meshes[0].scaling.y = 20\r\n            meshes[0].scaling.z = 20\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(30, 30, 30),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n\r\n  \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Snow Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createLitleSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow two.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowMan(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"SnowManRotated.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 1\r\n            meshes[0].scaling.y = 1\r\n            meshes[0].scaling.z = 1\r\n      \r\n            let globalMesh = meshes[0];\r\n            \r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(\"SNOWMAN \"+globalMesh.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateRampe1(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"rampe_2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n \r\n            meshes[0].scaling.x = 5\r\n            meshes[0].scaling.y = 5\r\n            meshes[0].scaling.z = 5\r\n   \r\n           \r\n            let mesh = meshes[0];\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            mesh.name =\"Rampe\"\r\n            let elment =meshes[1] ;\r\n           \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(elment, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n           \r\n\r\n            \r\n           // var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n    createSnowMount(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Rock Forms 3 (White).glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            meshes[0].scaling.x = 150\r\n            meshes[0].scaling.y = 150\r\n            meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            let element =meshes[1] ;\r\n            element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n          \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(element, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n\r\n    createFinalScene2(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"finalscene2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            //meshes[0].scaling.x = 150\r\n            //meshes[0].scaling.y = 150\r\n            //meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[2].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            //let element =meshes[1] ;\r\n            let element = this.scene.getMeshByName(\"Cube (sol)\");\r\n            //let element2 = this.scene.getMeshByName(\"Cube (sol)\") ;\r\n            //let element3 = this.scene.getMeshByUniqueId(769) ;\r\n\r\n            //element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n\r\n            //console.log();\r\n        \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                i++\r\n            }\r\n            \r\n          \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n    \r\n    \r\n    \r\n    /** ######################################################################## Scene3 3D MODEL #########################################################################**/\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreatePlateform(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"plateforme_scene3.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n        CreatePlateformlevel2(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spike_Mine.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n\r\n /** ######################################################################## Scene4 3D MODEL #########################################################################**/\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    CreatePlateform_Scene4(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene4_gameplay_ELEMENT.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingPlatform(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene_de_bowling.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingBall(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi ball\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n          \r\n            mesh.name =\"ball\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n         \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /** ######################################################################## MENU 3D MODEL #########################################################################**/\r\n\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n               // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n    \r\n                //var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n               // troncAggregate.shape.isTrigger =  true;\r\n    \r\n                \r\n                //var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n\r\n                 \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n          // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateMenu3dScene(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"menu.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi du menu\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"fondMenu\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n        Createlevel1(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"level2Map.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n        \r\n    \r\n            return { boundingBox };\r\n        }\r\n        \r\n\r\n\r\n\r\n\r\n    \r\n   \r\n}\r\n","class CharacterController {\r\n    constructor(canvas , engine, character,forward,backward,left,right) {\r\n        this.setupKeyboardInput(canvas, engine, character,forward,backward,left,right);\r\n    }\r\n\r\n    setupKeyboardInput(canvas, engine, character,forwardI,backward,left,right) {\r\n        this.keys = {};\r\n\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            this.keys[event.key] = true;\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            // Vérifie l'état des touches dans l'objet \"keys\" et effectue des actions en conséquence.\r\n\r\n            if (this.keys[forwardI]) {\r\n                //console.log('Touche Z enfoncée');\r\n                \r\n                let forward = character.transformNode.forward.scale(-5);\r\n               //console.log(forward);\r\n\r\n                character.applyForce(forward , character.transformNode.position);\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n          \r\n            }\r\n\r\n            if (this.keys[backward]) {\r\n                //console.log('Touche S enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(0, 0, 5), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                //charater.position.z += 0.1; // Déplace le personnage vers l'avant (positif sur l'axe z).\r\n            }\r\n\r\n            if (this.keys[left]) {\r\n                //console.log('Touche Q enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, -0.5, 0));\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.position.x += 0.1; // Déplace le personnage vers la gauche (positif sur l'axe x).\r\n            }\r\n\r\n            if (this.keys[right]) {\r\n                //console.log('Touche D enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(-5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0.5, 0));\r\n                //character.position.x -= 0.1; // Déplace le personnage vers la droite (négatif sur l'axe x).\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController;\r\n","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel1 {\r\n\r\n    constructor(scene,engine,name,forward,backward,left,right,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.boxBody ;\r\n\r\n        this.testPlayer(scene,engine,name,x,y,z);\r\n        this.enablePlayerControl(forward,backward,left,right);\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n\r\n        \r\n\r\n\r\n       \r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n\r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        box.isVisible = false;\r\n        //var box2 = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        //box.addChild(snowMan);\r\n        let snowMan = new CustomModels(scene).CreateSnowManOnSki(x,y-0.5,z,box);\r\n      \r\n       \r\n        //box.addChild(box2);\r\n        \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        \r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n\r\n        //rotate character\r\n      \r\n      \r\n        this.boxBody = boxBody;\r\n        \r\n     \r\n        \r\n      \r\n     \r\n        \r\n    \r\n       \r\n \r\n        return box;\r\n    \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(forward,backward,left,right){\r\n       let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel1;","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nimport {PlayerLevel1} from \"./PlayerLevel1.js\";\r\nimport * as sceneManager from './SceneManager.js';\r\nlet advancedTexture ;\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level2\";\r\nvar value = \"start\";     \r\n//var player = new PlayerLevel1(scene);\r\n\r\nasync function getInitializedHavok() {\r\n  return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    //displayControlUI();\r\n    // Ajoutez une lumière hémisphériques\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    \r\n    const havokInstance = await HavokPhysics();\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n   \r\n    \r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0),  hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n\r\n    var sceneprod = new CustomModels(scene);\r\n    //PART 1 LEVEL\r\n    \r\n    //first plane \r\n    //let plane = sceneprod.plane(5,0,-45,25,150,scene);\r\n  \r\n   \r\n\r\n    let x = -10;\r\n\r\n\r\n//********************************************************** PART 5 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane\r\n    \r\n\r\n\r\n    //trigger to die and pass\r\n    triggerDie(-1.79, -1.02, -832.37);\r\n    \r\n\r\n    \r\n\r\n    displayControlUI();\r\n\r\n   //testPlayer();\r\n\r\n   let player = new PlayerLevel1(scene,engine,'player1','z','s','q','d',5,160,0);\r\n\r\n   let player2 = new PlayerLevel1(scene,engine,'player2','ArrowUp','ArrowDown','ArrowLeft','ArrowRight',0,160,0);\r\n\r\n   triggerRespawn(2,-45,200);\r\n    \r\n   //montrer le layer\r\n   //scene.debugLayer.show();\r\n   \r\n   \r\n\r\n    var place = new CustomModels(scene);\r\n    //place.createFinalScene2(4,-24,-970);\r\n   \r\n    place.Createlevel1(0,0,-800)\r\n    \r\n \r\n\r\n    \r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    //let playerMesh2 = scene.gezzzzzzztMeshByName(\"player2\");\r\n    //console.log(scene.getMeshByName(\"player\"));\r\n    //console.log(scene.getMeshByUniqueId(6));\r\n    \r\n    eventHandler(hk,player);\r\n   return playerMesh;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction testPlayer(){\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    box.position = new BABYLON.Vector3(0,5,0);\r\n\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    let control = new CharacterController(canvas,scene,engine,boxBody);\r\n    return box;\r\n\r\n    \r\n}\r\n\r\nfunction triggerDie(x,y,z){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(40, 40, 40),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\nfunction triggerRespawn(x,y,z){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(25, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = x;\r\n    var boxH = y;\r\n    var boxD = z;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Die\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 2;\r\n    box.position.y = -45;\r\n    box.position.z = -800;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nfunction eventHandler(hk,player){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n        if(ev.collider.transformNode.name ==\"player1\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 111111 PASSSSSS\")\r\n            sceneManager.setcountPlayer1()\r\n            console.log(\"COUNT_WIN PLAYER1:\"+sceneManager.winCountPlayer1)\r\n        }\r\n        if(ev.collider.transformNode.name ==\"player2\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 2 PASSSSSS\")\r\n            sceneManager.setcountPlayer2()\r\n            console.log(\"COUNT_WIN PLAYER2\"+sceneManager.winCountPlayer2)\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"tronc\"){\r\n                console.log(\"End OF the Game\")\r\n                reloadlevel();\r\n               \r\n                player = null;\r\n}      \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n\r\n            console.log(\"COUNT_WIN PLAYER1:\"+sceneManager.winCountPlayer1+\"  COUNT_WIN PLAYER2\"+sceneManager.winCountPlayer2)\r\n           //console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n            player = null;\r\n  \r\n\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Die\"){\r\n            console.log(\"YOU DIEEEEEEEEEE\");\r\n            value = \"death\";\r\n            reloadlevel();\r\n            player = null;\r\n           \r\n            //return \"death\";\r\n        }\r\n    });\r\n}\r\n\r\nfunction launch() {\r\n \r\n    \r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5); \r\n   \r\n    scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh;\r\n        camera2.lockedTarget = playerMesh2;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n    \r\n       \r\n \r\n    engine.runRenderLoop(function () {\r\n       //console.log(value)\r\n       scene.render();\r\n       \r\n     \r\n    });\r\n    \r\n   \r\n}\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n  \r\n  \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n}\r\n\r\nfunction reloadlevel(){\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n\r\n \r\n\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel3();\r\n\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n   // Récupération de l'élément par son ID\r\n   var level1 = document.getElementById(\"level1\");\r\n\r\n   // Afficher l'élément\r\n   level1.style.display = \"block\";\r\n\r\n}\r\nfunction hideControlUI(){\r\n       // Récupération de l'élément par son ID\r\n   var level1 = document.getElementById(\"level1\");\r\n\r\n   // Afficher l'élément\r\n   level1.style.display = \"none\";\r\n\r\n}\r\n\r\nexport { name, scene, sceneData, launch,killLevel };\r\n","class CharacterController2 {\r\n    constructor(canvas, scene, engine, character1, input1, inputJump,animationGroup) {\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, input1, inputJump,animationGroup);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1, inputJump,animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n\r\n                \r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n                    \r\n                 \r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                    console.log(\"Touche enfoncée, action effectuée jump\");\r\n              \r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n            \r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump ) {\r\n                isKeyPressed2 = false;\r\n                console.log(\"Touche relâchée jump\");\r\n                // Ajoutez ici la logique pour arrêter le saut du personnage si nécessaire\r\n            \r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n                //console.log(\"Touche relâchée\");\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            \r\n            if (isKeyPressed) {\r\n            \r\n                character.applyForce(new BABYLON.Vector3(0, 0, -50), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n               \r\n                isKeyPressed = false;\r\n                //console.log(  animationGroup)\r\n               //animationGroup[1].play();\r\n            }\r\n            \r\n            if (isKeyPressed2) {\r\n                character.applyForce(new BABYLON.Vector3(0, 200, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                isKeyPressed2 = false;\r\n                //animationGroup[2].play();\r\n            }\r\n\r\n            character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController2 from './CharacterController2.js';\r\nvar engine2 = new BABYLON.Engine(canvas, true);\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel2 {\r\n\r\n    constructor(scene,engine,name,forward,jump,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name = name;\r\n        this.boxBody ;\r\n        this.boxMesh;\r\n        this.animationGroups = [];\r\n        this.forward = forward\r\n        this.jump = jump;\r\n        \r\n        this.createPlayer(x,y,z);\r\n        this.enablePlayerControl(forward,jump);\r\n       // this.Character(x,y,z);\r\n     \r\n    }\r\n    \r\n\r\n    async createPlayer(x,y,z){\r\n\r\n        var boxW = 2;\r\n        var boxH = 1.80;\r\n        var boxD = 2;\r\n        \r\n        var box = BABYLON.MeshBuilder.CreateBox(this.name, {width: boxW, height: boxH, depth: boxD},this.scene);\r\n        this.boxMesh = box;\r\n        //ADD character disable box visibility \r\n        box.visibility = false;\r\n       //this.Character(x, y, z, box); \r\n\r\n\r\n\r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD),this.scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        this.boxBody = boxBody;\r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", this.scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n        this.animationGroups = await this.Character(x, y, z, box);\r\n       //console.log(this.animationGroups);\r\n      \r\n    \r\n     \r\n     \r\n        \r\n    \r\n        //boxBody.applyForce()\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n        return box;\r\n    }\r\n    \r\n  \r\n \r\n    enablePlayerControl(forward,jump){\r\n       let control = new CharacterController2(canvas,this.scene,this.engine,this.boxBody,forward,jump,this.animationGroups);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n   \r\n    async Character(x, y, z, parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        const { meshes, animationGroups } = await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"./models/character1_anim/\", \"animCharacter.glb\", this.scene);\r\n    \r\n        mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n        mesh.name = \"RUNNER\";\r\n        mesh.position = new BABYLON.Vector3(x, y - 1.05, z); // Positionne le modèle une fois chargé\r\n    \r\n        if (parent) {\r\n            mesh.setParent(parent); // Attacher le modèle au parent si spécifié\r\n        }\r\n        this.animationGroups.push(animationGroups) ;\r\n        // Vous pouvez ajouter des manipulations supplémentaires sur le mesh ici, comme l'échelle ou la rotation\r\n    \r\n        console.log(\"Chargement réussi Personnage\", mesh);\r\n        //gerer les animations\r\n        //console.log(\"ANIMATION GROUP :\"+animationGroups)\r\n  \r\n        //animationGroups[0].play();\r\n        //animationGroups[1].play();\r\n        //animationGroups[2].play();\r\n        //console.log(animationGroups[1])\r\n        await this.animGestionner(canvas,this.forward,this.jump,animationGroups)\r\n        \r\n    \r\n        return { animationGroups };\r\n    }\r\n\r\n    async animGestionner(canvas, input1, inputJump, animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n\r\n\r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n\r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump) {\r\n                isKeyPressed2 = false;\r\n\r\n\r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n\r\n        engine2.runRenderLoop(() => {\r\n\r\n            if (isKeyPressed) {\r\n                isKeyPressed = false;\r\n                console.log(\"VOILA LE GROUPE :\" + animationGroup)\r\n                animationGroup[2].play();\r\n\r\n            }\r\n\r\n            if (isKeyPressed2) {\r\n\r\n                isKeyPressed2 = false;\r\n                //animationGroup[1].play();\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel2;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level3\";\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController2 from './CharacterController2.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport PlayerLevel2 from './PlayerLevel2.js';\r\n\r\nasync function getInitializedHavok() {\r\n    return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n \r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n   \r\n    // Configurez une caméra\r\n   \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    //var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n\r\n\r\n    // Créez un cube avec le matériau\r\n  \r\n   \r\n\r\n\r\n\r\n    //player2.position.x =0;\r\n    //player2.position.y =0;\r\n    //player2.position.z =0;\r\n\r\n    //var devcamera = new DevCamera(canvas, scene);\r\n    // Positionnez le cube où vous le souhaitez\r\n\r\n    triggerEnd(5,11,-620);\r\n    eventHandler(hk);\r\n\r\n    // Ajoutez l'événement de clic à la scène\r\n    scene.onPointerDown = function (evt, pickResult) {\r\n        onPointerDown(evt, pickResult);\r\n    };\r\n\r\n    var plane2 = new CustomModels(scene);\r\n    //plane2.CreatePlateform(0,0, -472,678);\r\n    plane2.CreatePlateformlevel2(-7,14, -265);\r\n    displayControlUI();\r\n\r\n\r\n     \r\n    let player1 = new PlayerLevel2(scene,engine,\"player1\",'s','f', 2,15,0);\r\n    let player2 = new PlayerLevel2(scene,engine,\"player2\",'k','m',-15,15,0);\r\n   //scene.debugLayer.show();\r\n\r\n}\r\n\r\nfunction launch() {\r\n   \r\n\r\n    \r\n   \r\n    //var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(-3, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5); \r\n   \r\n    //scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n    scene.activeCameras.push(camera)\r\n\r\n\r\n\r\n  \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(\"MESH PLAYER2\"+playerMesh2); // Utilisez playerMesh comme nécessaire\r\n\r\n        let playerMesh1 = scene.getMeshByName(\"player1\");\r\n        //console.log(\"MESH PLAYER2\"+playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh2;\r\n        camera2.lockedTarget = playerMesh1;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n// Fonction appelée lorsqu'un clic est détecté\r\nfunction onPointerDown(evt, pickResult) {\r\n    if (pickResult.hit) {\r\n        // Votre code d'interaction ici, par exemple, changez la couleur de l'objet\r\n        if(pickResult.pickedMesh.name ==\"player\"){\r\n\r\n            pickResult.pickedMesh.material.diffuseColor = new BABYLON.Color3(0, 1, 0); // Vert\r\n        }\r\n       \r\n    }\r\n}\r\n\r\n\r\n\r\nfunction catchPlayer(){\r\n    \r\n}\r\n\r\nfunction createPlayer(x,y,z , input1,inputJump){\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    //box.position = new BABYLON.Vector3(0,5,0);\r\n    box.position = new BABYLON.Vector3(x,y,z);\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n    let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n    return box;\r\n}\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction triggerEnd(x,y,z){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(60, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 40;\r\n    var boxH = 40;\r\n    var boxD = 40;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\nfunction eventHandler(hk){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n\r\n        if(ev.collider.transformNode.name ==\"player1\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 111111 PASSSSSS\")\r\n            sceneManager.setcountPlayer1()\r\n            console.log(\"COUNT_WIN PLAYER1:\"+sceneManager.winCountPlayer1)\r\n        }\r\n        if(ev.collider.transformNode.name ==\"player2\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 2 PASSSSSS\")\r\n            sceneManager.setcountPlayer2()\r\n            console.log(\"COUNT_WIN PLAYER2\"+sceneManager.winCountPlayer2)\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n   \r\n   \r\n\r\n            //console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n\r\n        }\r\n      \r\n    });\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\n function hideControlUI(){\r\n        // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n \r\n }\r\n\r\nexport { name, scene, sceneData, launch };\r\n","class CharacterController2 {\r\n    constructor(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch) {\r\n        this.destroyed = false;\r\n        this.action = false;\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1,input2, inputJump,inputLaunch) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n         \r\n             \r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n       \r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n          \r\n            if(!this.destroyed){\r\n                if (this.keys[input1] ) {\r\n                    //console.log('Touche gauche enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            \r\n                }\r\n\r\n                if (this.keys[input2] ) {\r\n                    //console.log('Touche Droite enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(-5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n         \r\n                if (this.keys[inputLaunch] && !this.action) {\r\n                    //console.log('Touche LAUNCH enfoncée');\r\n                    this.action = true;\r\n                    character.applyForce(new BABYLON.Vector3(0, 0, 700*4), new BABYLON.Vector3(0, 0, 0));\r\n                    //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            }\r\n        });\r\n\r\n       \r\n    }\r\n\r\n\r\n    destroy() {\r\n     \r\n        this.destroyed = true;\r\n\r\n        // Libérez les références aux objets\r\n        this.canvas = null;\r\n        this.engine = null;\r\n\r\n        //this.character1.dispose();\r\n        this.character1 = null;\r\n        this.inputLeft = null;\r\n        this.inputRight = null;\r\n        this.inputJump = null;\r\n        this.inputLaunch = null;\r\n\r\n        // Réinitialisez ou supprimez d'autres ressources si nécessaire\r\n    }\r\n    isUpperCase(input,key) {\r\n        return key === input.toUpperCase();\r\n    }\r\n    getLastKeyPressed() {\r\n        return this.lastKeyPressed; // Fonction pour récupérer la dernière touche enfoncée\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController3 from './CharacterController3.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel3 {\r\n\r\n    constructor(scene,engine,name,left,right,jump,action,x,y,z) {\r\n        this.control;\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name= name;\r\n        this.boxBody ;\r\n        this.sphereBody;\r\n        this.box;\r\n        this.rayHelper;\r\n        //this.testPlayer(scene,engine,name,x,y,z);\r\n      \r\n        this.shootBall(left,right,jump,action,x,y,z);\r\n    \r\n        this.enablePlayerControl(left,right,jump,action);\r\n\r\n        \r\n        //this.raycast();\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n       \r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        this.box =box;\r\n   \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n      \r\n       \r\n        this.boxBody = boxBody;\r\n        \r\n    \r\n     \r\n     \r\n        \r\n    \r\n\r\n      \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(inputLeft,inputRight,jump,action){\r\n       //let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n        let control2 = new CharacterController3(canvas2,this.engine,this.sphereBody, inputRight,inputLeft,jump,action);\r\n        this.control = control2;\r\n     \r\n      \r\n    }\r\n\r\n    raycast() {\r\n        // Get the player mesh by name\r\n        var playerMesh = this.scene.getMeshByName(this.name);\r\n        // Ensure the player mesh exists\r\n        if (!playerMesh) {\r\n            console.error(\"Player mesh not found\");\r\n            return;\r\n        }\r\n        // Get the player's position\r\n        var rayOrigin = playerMesh.position;\r\n        // Set the ray direction along the positive Z-axis\r\n        var rayDirection = new BABYLON.Vector3(0, 0, 1);\r\n        // Set the ray length\r\n        var rayLength = 50;\r\n        // Calculate the destination point of the ray\r\n        var rayDestination = rayOrigin.add(rayDirection.scale(rayLength));\r\n        // Create the ray\r\n        var ray = new BABYLON.Ray(rayOrigin, rayDirection, rayLength);\r\n        // Create a ray helper for visualization (optional)\r\n        var rayHelper = new BABYLON.RayHelper(ray);\r\n        rayHelper.show(this.scene, new BABYLON.Color3(0.9, 0, 0));\r\n        // Perform raycasting or any other actions with the ray\r\n        // Example: Check if the ray intersects with a mesh\r\n        var hit = this.scene.pickWithRay(ray);\r\n        \r\n        this.rayHelper = rayHelper;\r\n        //rayHelper.hide();\r\n\r\n        /*\r\n        if (hit.pickedMesh) {\r\n            console.log(\"Ray hits:\", hit.pickedMesh.name);\r\n            // Do something with the intersected mesh\r\n        }*/\r\n    }\r\n\r\n    shootBall(left,right,jump,action,x,y,z){\r\n        let segments = 16;\r\n        let diameter = 2;\r\n\r\n        const sphere = BABYLON.MeshBuilder.CreateSphere(this.name, { segments, diameter }, this.scene);\r\n        sphere.position = new BABYLON.Vector3(x,y,z);\r\n\r\n       \r\n        var sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0,0,0),diameter-1,this.scene);\r\n        var sphereBody = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        sphereBody.shape = sphereShape;\r\n        sphereBody.setMassProperties({mass : 2});\r\n        //sphereBody.setCollisionCallbackEnabled(true);\r\n       \r\n        \r\n        this.sphereBody = sphereBody;\r\n        //this.sphereBody.dispose();\r\n\r\n    }\r\n    disableThisObject(){\r\n        //delete this.control;\r\n        this.control.destroy();\r\n        this.control = null;\r\n        \r\n        //this.sphereBody.dispose();\r\n       \r\n    }\r\n    instanciate(){\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel3;","\r\n\r\nexport class BowlingPin {\r\n\r\n    constructor(scene,x,y,z) {\r\n       \r\n        this.scene = scene;\r\n       \r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        this.mesh;\r\n        this.Aggregate;\r\n        this.meshIdPromise = this.createBowlingPin();\r\n    }\r\n    \r\n    createBowlingPin(){\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Bowling Pin.glb\", this.scene, (meshes) => {\r\n\r\n             \r\n\r\n                const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                    new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                    new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                    new BABYLON.Vector3(0.5, 1.2, 0.5),      // dimensions of the box\r\n                    this.scene                                // scene of the shape\r\n                );\r\n        \r\n\r\n                let boxKid = BABYLON.MeshBuilder.CreateBox(\"Pintrigger\");\r\n                //boxKid.isVisible = false;\r\n\r\n                //console.log(\"Chargement réussi Pin\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                mesh.scaling._z =  mesh.scaling._z *-1;\r\n                mesh.name =\"Pin\"\r\n\r\n  \r\n            \r\n        \r\n                mesh.position = new BABYLON.Vector3(this.x, this.y, this.z); // Positionne l'objet\r\n            \r\n\r\n            \r\n                var Aggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0.1 }, this.scene);\r\n                Aggregate.body.setCollisionCallbackEnabled(true);\r\n                this.Aggregate = Aggregate;\r\n                this.mesh = mesh;\r\n               \r\n                const meshId = mesh.uniqueId;\r\n                resolve(meshId);\r\n\r\n            }, undefined, undefined, \".glb\");\r\n        })\r\n\r\n    }\r\n  \r\n    \r\n    async getMeshId(){\r\n         return await this.meshIdPromise;\r\n    }\r\n \r\n   \r\n    disableThisObject(){\r\n        this.Aggregate.body.setCollisionCallbackEnabled(false);\r\n        this.Aggregate.body.dispose();\r\n        //this.mesh.dispose();\r\n       \r\n    }\r\n    isPinUp() {\r\n        // Récupérer la rotation de la quille\r\n        const rotation = this.mesh.rotationQuaternion.toEulerAngles();\r\n\r\n        // Définir un seuil pour la rotation, en dessous duquel la quille est considérée comme renversée\r\n        const threshold = 0.1; // À ajuster selon vos besoins\r\n\r\n        // Vérifier si la rotation autour de l'axe X (ou un autre axe selon votre modèle) dépasse le seuil\r\n        const isUp = Math.abs(rotation.x) < threshold;\r\n\r\n        return isUp;\r\n    }\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default BowlingPin;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level4\";\r\nlet advancedTexture ;\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController3 from './CharacterController3.js';\r\nimport PlayerLevel3 from './PlayerLevel3.js';\r\nimport BowlingPin from './BowlingPin.js';\r\nimport * as sceneManager from './SceneManager.js';\r\n\r\nlet player1;\r\nlet player2;\r\n\r\nlet countPlayer1 =0;\r\nlet countPlayer2 =0;\r\n\r\n\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n\r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n       \r\n    \r\n    \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   \r\n\r\n    var model = new CustomModels(scene);\r\n    \r\n    var listeQuilles1 = [];\r\n\r\n    \r\n\r\n    let add =13 ;\r\n    var listeQuilles2 = [];\r\n   \r\n    \r\n    \r\n\r\n\r\n \r\n   // console.log(countPlayer1);\r\n     player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,-8);\r\n     player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',25,8,-8);\r\n\r\n     //let pin = new BowlingPin(scene,0,2,19.397);\r\n    \r\n   \r\n    let ball1 = scene.getMeshByName(\"player1\");\r\n    \r\n    displayControlUI();\r\n    //CreateBowlingBall(0,6,0);\r\n\r\n    eventHandler(hk,player1,player2);\r\n\r\n   // model.CreatePlateform_Scene4();\r\n    model.CreateBowlingPlatform();\r\n    listeQuilles1 =  addQuille(listeQuilles1,0,0,-8);\r\n    listeQuilles2 =  addQuille(listeQuilles2,25,0,-8);\r\n\r\n    testSearch(listeQuilles1,countPlayer1,\"player1\");\r\n    testSearch2(listeQuilles2,countPlayer2,\"player2\");\r\n\r\n    \r\n        \r\n\r\n    let ball = scene.getMeshByName(\"ball\");\r\n    \r\n    \r\n\r\n  \r\n    /*\r\n    //trigger Player1\r\n    triggerRespawn(0,2,97.43,30, 30, 10);\r\n    triggerRespawn(7.5,2,48,1, 30,90);\r\n    triggerRespawn(-7.5,2,48,1, 30,90);\r\n\r\n    //trigger Player2\r\n    triggerRespawn(30,2,97.43,30, 30, 10);\r\n    triggerRespawn(20,2,48,1, 30,90);\r\n    triggerRespawn(35.5,2,48,1, 30,90);*/\r\n\r\n    respawnPlayerInput(player1,player2);\r\n\r\n    \r\n\r\n\r\n\r\n}\r\n\r\nfunction launch() {\r\n      \r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -22), scene);\r\n    camera.inertia = 0;\r\n    camera.angularSensibility = 0;\r\n    camera.detachControl(canvas);\r\n    camera.cameraRotation = 0;\r\n    scene.activeCameras.push(camera);\r\n    \r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1);\r\n    scene.activeCameras.push(camera);\r\n\r\n\r\n    var camera2 = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(25, 4, -23), scene);\r\n    camera2.inertia = 0;\r\n    camera2.angularSensibility = 0;\r\n    camera2.detachControl(canvas);\r\n    camera2.cameraRotation = 0;\r\n    scene.activeCameras.push(camera2);\r\n    camera2.viewport = new BABYLON.Viewport(0.5,0 , 0.5, 1);\r\n    scene.activeCameras.push(camera2);\r\n    \r\n   \r\n\r\n \r\n\r\n    sceneData();\r\n  \r\n\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    //console.log(playerMesh2);\r\n    //console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n    \r\n    camera.lockedTarget = playerMesh;\r\n    //camera2.lockedTarget = playerMesh2;\r\n\r\n    engine.runRenderLoop(function () {\r\n\r\n        scene.render();\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nfunction CreateBowlingBall(x, y, z) {\r\n    let tree;\r\n    let boundingBox;\r\n    let tronc;\r\n    var mesh \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi ball\", meshes);\r\n    \r\n        mesh = meshes[0];\r\n      \r\n        mesh.name =\"ball\"\r\n        \r\n    \r\n\r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        //var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n     \r\n    \r\n    }, undefined, undefined, \".glb\");\r\n\r\n\r\n\r\n    return {mesh};\r\n}\r\n\r\n\r\nfunction triggerRespawn(x,y,z,sizeX,sizeY,sizeZ){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(sizeX,sizeY,sizeZ),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    //let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Respawn\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n    \r\n\r\n    \r\n    //Aggregate.dispose();\r\n    \r\n}\r\n\r\nfunction eventHandler(hk,player1,player2){\r\n\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            //killLevel();\r\n            //loadNextLevel();\r\n            player1 = null;\r\n  \r\n\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Respawn\" && ( ev.collider.transformNode.name == \"player1\" || ev.collider.transformNode.name == \"player2\" ) ){\r\n            console.log(\"YOU RESPAWNWNNN\");\r\n\r\n            if(ev.collider.transformNode.name == \"player1\"){\r\n                let ball1 = scene.getMeshByName(\"player1\");\r\n         \r\n                player1.disableThisObject();\r\n                //player1 = null;\r\n                ball1.dispose();\r\n                \r\n                player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',-5,5,0);\r\n            \r\n     \r\n            }else{\r\n                let ball2 = scene.getMeshByName(\"player2\");\r\n                player2.disableThisObject();\r\n                //player2 = null;\r\n                ball2.dispose()\r\n\r\n                player2= new PlayerLevel3(scene,engine,\"player2\",'j','l','i','Enter',28,5,0);\r\n              \r\n            }\r\n          \r\n         \r\n\r\n            \r\n          \r\n        }\r\n     \r\n    });\r\n\r\n   //WinParty\r\n\r\n   \r\n}\r\n\r\n\r\n\r\n\r\nfunction pinsCount(hk){\r\n\r\n    hk.onCollisionObservable.add((ev) => {\r\n        //console.log(ev.type);\r\n        //console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       //check if Pin is collided add count to counter of the player\r\n   \r\n       if(ev.collidedAgainst.transformNode.name ==\"Pin\" ){\r\n            //console.log(\"YOU collide a pin\");\r\n            let uniqueId =ev.collidedAgainst.transformNode.uniqueId;\r\n            //console.log(ev.collidedAgainst.transformNode.uniqueId);\r\n            //list.push();\r\n            if(ev.collider.transformNode.name == \"player2\"){\r\n\r\n                //console.log(\"player1 IS ON THE PLACE\")\r\n\r\n                testSearch(uniqueId);\r\n              \r\n                countPlayer1++;\r\n                //console.log(countPlayer1);\r\n                \r\n            }\r\n      \r\n        }\r\n});\r\n\r\n}\r\n\r\nasync function testSearch(listeQuilles1,countPlayer,playerText){\r\n\r\n \r\n    engine.runRenderLoop(async () => {\r\n\r\n        for(let i=0;i<listeQuilles1.length; i++){\r\n            const meshIdQuille = await listeQuilles1[i].getMeshId();\r\n            const quille =  listeQuilles1[i];\r\n            //console.log(meshIdQuille);\r\n            /*\r\n            if(meshIdQuille == id){\r\n                \r\n                quille.disableThisObject();\r\n            \r\n            }*/\r\n            if(!quille.isPinUp()){\r\n                countPlayer1++;\r\n                \r\n                listeQuilles1.splice(i, 1);\r\n\r\n                // Décrémenter i pour compenser la suppression de l'élément\r\n                i--;\r\n                    \r\n            };\r\n        }\r\n        //console.log(\"compteur \"+playerText+\" \" +countPlayer1);\r\n        document.getElementById(\"pin1\").innerHTML = countPlayer1 + \"/93 PINS\";\r\n\r\n  \r\n        if(countPlayer1 >=93){\r\n            sceneManager.setcountPlayer1()\r\n            console.log(\"PLAYER1:\"+sceneManager.winCountPlayer1)\r\n            console.log(\"PLAYER2:\"+sceneManager.winCountPlayer2)\r\n        }\r\n        \r\n      \r\n   \r\n        if(countPlayer1 >= 93 ||countPlayer2 >= 93){\r\n            killLevel();\r\n            loadNextLevel();\r\n        }\r\n\r\n        // Utiliser setInterval pour appeler la fonction de mise à jour à intervalles réguliers (par exemple, toutes les 1000 millisecondes)\r\n        //setInterval(updateCountPins, 1000); //\r\n        \r\n\r\n\r\n    })\r\n   \r\n  \r\n    \r\n \r\n}\r\nasync function testSearch2(listeQuilles1,countPlayer,playerText){\r\n\r\n \r\n    engine.runRenderLoop(async () => {\r\n\r\n        for(let i=0;i<listeQuilles1.length; i++){\r\n            const meshIdQuille = await listeQuilles1[i].getMeshId();\r\n            const quille =  listeQuilles1[i];\r\n            //console.log(meshIdQuille);\r\n            /*\r\n            if(meshIdQuille == id){\r\n                \r\n                quille.disableThisObject();\r\n            \r\n            }*/\r\n            if(!quille.isPinUp()){\r\n                countPlayer2++;\r\n                \r\n                listeQuilles1.splice(i, 1);\r\n\r\n                // Décrémenter i pour compenser la suppression de l'élément\r\n                i--;\r\n                    \r\n            };\r\n        }\r\n        //console.log(\"compteur \"+playerText+\" \" +countPlayer2);\r\n\r\n\r\n        document.getElementById(\"pin2\").innerHTML = countPlayer2 + \"/93 PINS\";\r\n  \r\n     \r\n        if(countPlayer2 >92){\r\n            sceneManager.setcountPlayer2()\r\n            console.log(\"PLAYER1:\"+sceneManager.winCountPlayer1)\r\n            console.log(\"PLAYER2\"+sceneManager.winCountPlayer2)\r\n\r\n        }\r\n   \r\n        if(countPlayer1 >= 93 ||countPlayer2 >= 93){\r\n            killLevel();\r\n            loadNextLevel();\r\n        }\r\n\r\n        // Utiliser setInterval pour appeler la fonction de mise à jour à intervalles réguliers (par exemple, toutes les 1000 millisecondes)\r\n        //setInterval(updateCountPins, 1000); //\r\n        \r\n\r\n\r\n    })\r\n   \r\n  \r\n    \r\n \r\n}\r\n\r\n\r\n\r\nfunction addQuille( listeQuilles1,x,y,z){\r\n\r\n\r\n    listeQuilles1 = [\r\n        //-3\r\n        new BowlingPin(scene, 0.25+x, 2+y,21+z),\r\n        //-2\r\n             \r\n        //new BowlingPin(scene, 0, 2, 21.5),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y,21.5+z),\r\n        new BowlingPin(scene, 0.50+x, 2+y,21.5+z),\r\n        //new BowlingPin(scene, 0.60, 2,21.5),\r\n      \r\n\r\n\r\n        //-1\r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0.25+x, 2+y, 22+z),\r\n        new BowlingPin(scene, 0.60+x, 2+y,22+z),\r\n        \r\n      \r\n\r\n\r\n        //0\r\n        new BowlingPin(scene, -0.5+x, 2+y, 22.5+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,22.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,22.5+z),\r\n        \r\n        //1\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23+z),\r\n   \r\n        //2\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 23.5+z),\r\n\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,23.5+z),\r\n      \r\n        \r\n        //3\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24+z),\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24+z),\r\n        \r\n        //4\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 24.5+z),\r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 24.5+z),\r\n       \r\n\r\n\r\n        \r\n        //5\r\n\r\n        new BowlingPin(scene, -0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25+z),\r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25+z),\r\n        //new BowlingPin(scene, 4, 2, 25),\r\n        \r\n        \r\n\r\n       //6\r\n       \r\n        new BowlingPin(scene, -0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 25.5+z),\r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 25.5+z),\r\n   \r\n        \r\n\r\n        //7\r\n        new BowlingPin(scene, -0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -4+x, 2+y, 26+z),\r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 26+z),  \r\n        new BowlingPin(scene, 2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4.5+x, 2+y, 26+z),\r\n\r\n        //listeQuilles1.forEach(pin => pin.position.y += 5)\r\n    \r\n     \r\n    ];\r\n    return listeQuilles1;\r\n}\r\n\r\nfunction respawnPlayerInput() {\r\n    // Ajouter un écouteur d'événements pour la touche \"espace\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.key === 'Shift') {\r\n            // Code à exécuter lorsque la touche \"espace\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"espace\" a été enfoncée');\r\n            let ball1 = scene.getMeshByName(\"player1\");\r\n            player1.disableThisObject();\r\n            ball1.dispose();\r\n            player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,-8);\r\n            \r\n        //document.getElementById(\"pin1\").innerText = countPlayer1+\"/93 PINS\";\r\n        \r\n        // Modifier le texte de l'élément avec l'identifiant \"pin2\"\r\n  \r\n        }\r\n    });\r\n\r\n    // Ajouter un écouteur d'événements pour la touche \"entrée\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.code === 'Backspace') {\r\n            // Code à exécuter lorsque la touche \"entrée\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"entrée\" a été enfoncée');\r\n            let ball2 = scene.getMeshByName(\"player2\");\r\n            player2.disableThisObject();\r\n            ball2.dispose();\r\n            player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',25,8,-8);\r\n            //document.getElementById(\"pin2\").innerText = countPlayer2+\"/93 PINS\";\r\n       \r\n        }\r\n    });\r\n\r\n}\r\n\r\n\r\nfunction displayPinNumber(){\r\n    \r\n     advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n    var button1 = BABYLON.GUI.Button.CreateSimpleButton(\"but1\", \"Click Me\");\r\n    button1.width = \"1000px\"\r\n    button1.height = \"40px\";\r\n    button1.color = \"white\";\r\n    button1.cornerRadius = 20;\r\n    button1.background = \"green\";\r\n    button1.onPointerUpObservable.add(function() {\r\n        alert(\"you did it!\");\r\n    });\r\n    advancedTexture.addControl(button1);   \r\n    \r\n    \r\n\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchEnd();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level3\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\n function hideControlUI(){\r\n        // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level3\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n \r\n }\r\n\r\nexport { name, scene, sceneData, launch };\r\n","let advancedTexture ;\r\nlet advancedTexture2 ;\r\n//const BABYLON = require('babylonjs');\r\n\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nimport { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nvar createScene = function () {\r\n    \r\n    // GUI\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   // Création d'une caméra\r\n    const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(0, 5, -18.5), scene);\r\n    //camera.attachControl()\r\n  \r\n   \r\n\r\n    let menu = new CustomModels(scene);\r\n    menu.CreateMenu3dScene(0,0,0);\r\n\r\n    displayMenu();\r\n\r\n    //scene.debugLayer.show();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\n\r\nfunction displayMenu(){\r\n\r\n\r\n       // Création du GUI\r\n    advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_button\");\r\n    advancedTexture2 = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_text\");\r\n    // Création du bouton Play\r\n    const playButton = BABYLON.GUI.Button.CreateSimpleButton(\"playButton\", \"Play\");\r\n    playButton.width = \"150px\";\r\n    playButton.height = \"40px\";\r\n    playButton.color = \"white\";\r\n    playButton.background = \"grey\";\r\n    playButton.onPointerClickObservable.add(function () {\r\n        // Mettre ici la logique pour le bouton Play\r\n        console.log(\"Play button clicked\");\r\n        killLevel();\r\n        loadNextLevel();\r\n    });\r\n    advancedTexture.addControl(playButton);\r\n\r\n    \r\n    // Création du texte en haut de la page\r\n    const headerText = new BABYLON.GUI.TextBlock();\r\n    headerText.text = \"Les Jeux Olympiques Maudits\";\r\n    headerText.color = \"white\";\r\n    headerText.fontSize = 24;\r\n    headerText.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    headerText.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP; // Modifier cette ligne\r\n    headerText.paddingTop = \"-400px\"; // Ajout de 20px de padding en haut\r\n    advancedTexture2.addControl(headerText);\r\n\r\n\r\n  \r\n\r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n    advancedTexture2.dispose();\r\n    advancedTexture.dispose();\r\n    engine.stopRenderLoop();\r\n}\r\n\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel2();\r\n\r\n}\r\n\r\nexport {  scene, launch };","// Importez les modules \"scene1.js\" et \"scene2.js\" pour accéder à leurs fonctionnalités\r\n\r\nimport * as end from './End.js';\r\nimport * as scene2 from './scene2.js'\r\nimport * as scene3 from './scene3.js'\r\nimport * as scene4 from './scene4.js'\r\nimport * as menu from './Menu.js'\r\n\r\nlet winCountPlayer1 =0;\r\nlet winCountPlayer2 =0;\r\n// Fonction principale\r\nfunction Main() {\r\n    \r\n    // Appelez la fonction \"launch\" du module \"level2\" pour lancer la scène 2\r\n    \r\n    //launchEnd();\r\n   \r\n    //launchLevel2();\r\n   //launchLevel3();\r\n   //launchLevel4();\r\n\r\n   launchLevelMenu();\r\n    \r\n\r\n   \r\n}\r\nfunction launchLevelMenu(){\r\n    \r\n    menu.launch();\r\n}\r\nfunction launchEnd(){\r\n    \r\n    end.launch();\r\n}\r\nfunction launchLevel2(){\r\n    scene2.killLevel();\r\n    scene2.launch();\r\n}\r\n\r\n\r\nfunction launchLevel3(){\r\n    \r\n   scene3.launch();\r\n}\r\n\r\nfunction launchLevel4(){\r\n    \r\n    scene4.launch();\r\n}\r\n\r\n\r\nfunction setcountPlayer1(){\r\n    winCountPlayer1++;\r\n}\r\nfunction setcountPlayer2(){\r\n    winCountPlayer2++;\r\n}\r\n \r\n// Exportez toutes les fonctions d'un coup\r\nexport { Main, launchEnd, launchLevel2, launchLevel3, launchLevel4,setcountPlayer1,setcountPlayer2,winCountPlayer1,winCountPlayer2 };\r\n\r\n\r\n// Exécute la fonction principale\r\nMain();\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","canvas","document","getElementById","engine","BABYLON","Engine","scene","Scene","createScene","HemisphericLight","Vector3","FreeCamera","playerWin","playerLoose","style","display","x","y","z","SceneLoader","ImportMesh","meshes","console","log","mesh","name","position","undefined","CustomModels","constructor","this","CreateTree","tree","tronc","PhysicsAggregate","PhysicsShapeType","BOX","mass","shape","isTrigger","boundingBox","CreatePineTree","scaling","shapeBox1","PhysicsShapeBox","Quaternion","shapeBox2","CreateSnowManOnSki","parent","setParent","CreateSceneProd","CreatePlayer","Zone","plane","width","height","ground","MeshBuilder","CreateGround","subdivisions","addInPlace","rotation","groundMaterial","StandardMaterial","diffuseColor","Color3","material","flatplane","createDeadTree","globalMesh","createSnowTree","createLitleSnowTree","createSnowMan","CreateRampe1","bigMesh","elment","MESH","createSnowMount","element","createFinalScene2","getMeshByName","i","length","CreatePlateform","CreatePlateformlevel2","CreatePlateform_Scene4","CreateBowlingPlatform","CreateBowlingBall","SPHERE","CreateColiseum","CreateMenu3dScene","Createlevel1","character","forward","backward","left","right","setupKeyboardInput","forwardI","keys","addEventListener","event","runRenderLoop","transformNode","scale","applyForce","setAngularVelocity","ZeroReadOnly","canvas2","PlayerLevel1","boxBody","testPlayer","enablePlayerControl","box","CreateBox","depth","isVisible","rotationQuaternion","Identity","boxShape","PhysicsBody","PhysicsMotionType","DYNAMIC","setMassProperties","blueMaterial","setCollisionCallbackEnabled","destroyPlayer","control","killLevel","player","forEach","dispose","cameras","lights","light","stopRenderLoop","reloadlevel","character1","input1","inputJump","animationGroup","setupKeyboardInputPlayer","isKeyPressed","isKeyPressed2","engine2","jump","boxMesh","animationGroups","createPlayer","visibility","Character","ImportMeshAsync","push","animGestionner","play","inputLeft","inputRight","inputLaunch","destroyed","action","input2","destroy","isUpperCase","input","toUpperCase","getLastKeyPressed","lastKeyPressed","sphereBody","rayHelper","shootBall","control2","CharacterController3","raycast","playerMesh","rayOrigin","rayDirection","ray","add","Ray","RayHelper","show","pickWithRay","error","sphere","CreateSphere","segments","diameter","sphereShape","PhysicsShapeSphere","disableThisObject","instanciate","Aggregate","meshIdPromise","createBowlingPin","Promise","resolve","_z","body","meshId","uniqueId","getMeshId","isPinUp","toEulerAngles","Math","abs","player1","player2","advancedTexture2","countPlayer1","countPlayer2","async","havokInstance","HavokPhysics","hk","HavokPlugin","enablePhysics","collisionsEnabled","model","listeQuilles1","listeQuilles2","onTriggerCollisionObservable","ev","type","collider","collidedAgainst","ball1","ball2","addQuille","countPlayer","playerText","splice","innerHTML","testSearch","testSearch2","code","winCountPlayer1","winCountPlayer2","launchEnd","render","launchLevel2","camera","FollowCamera","cameraRotation","viewport","Viewport","camera2","activeCameras","triggerDie","triggerRespawn","eventHandler","sceneData","then","playerMesh2","lockedTarget","catch","launchLevel3","triggerEnd","onPointerDown","evt","pickResult","hit","pickedMesh","playerMesh1","launchLevel4","inertia","angularSensibility","detachControl","setcountPlayer1","setcountPlayer2","GUI","AdvancedDynamicTexture","CreateFullscreenUI","playButton","Button","CreateSimpleButton","color","background","onPointerClickObservable","addControl","headerText","TextBlock","text","fontSize","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_CENTER","verticalAlignment","VERTICAL_ALIGNMENT_TOP","paddingTop","displayMenu"],"sourceRoot":""}