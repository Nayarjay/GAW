{"version":3,"file":"js/babylonBundle.js","mappings":"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","sources":["webpack://gaw/webpack/bootstrap","webpack://gaw/webpack/runtime/define property getters","webpack://gaw/webpack/runtime/hasOwnProperty shorthand","webpack://gaw/./game/End.js","webpack://gaw/./game/CustomModels.js","webpack://gaw/./game/CharacterController.js","webpack://gaw/./game/PlayerLevel1.js","webpack://gaw/./game/scene2.js","webpack://gaw/./game/CharacterController2.js","webpack://gaw/./game/PlayerLevel2.js","webpack://gaw/./game/scene3.js","webpack://gaw/./game/CharacterController3.js","webpack://gaw/./game/PlayerLevel3.js","webpack://gaw/./game/BowlingPin.js","webpack://gaw/./game/scene4.js","webpack://gaw/./game/Menu.js","webpack://gaw/./game/SceneManager.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nimport { CustomModels } from './CustomModels.js';\r\nvar createScene = function () {\r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -22), scene);\r\n    \r\n    scene.debugLayer.show();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"End\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\nfunction hideControlUI(){\r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"End\");\r\n\r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n\r\n}\r\n\r\nexport {  scene, launch };","\r\n\r\n\r\nexport class CustomModels {\r\n\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    \r\n    \r\n    /** ######################################################################## LEVEL2 3D MODEL #########################################################################**/\r\n\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    async CreateTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n         \r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            \r\n        \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    async CreatePineTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        return   BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            meshes[0].scaling.x = 3\r\n            meshes[0].scaling.y = 2\r\n            meshes[0].scaling.z = 4\r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n            //troncAggregate.shape.\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, shapeBox2, { mass: 0 }, this.scene);\r\n           \r\n            \r\n        \r\n           //return boundingBox;\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n       \r\n    }\r\n\r\n\r\n\r\n    CreateSnowManOnSki(x, y, z,parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        // Charger le modèle 3D\r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"snowman_on_skis.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi SnowMan\", meshes);\r\n            mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n            mesh.name = \"SnowMan\";\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne le modèle une fois chargé\r\n            mesh.setParent(parent);\r\n \r\n            //mesh.rotationQuaternion._y = 85;\r\n\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n    \r\n        return { mesh }; // Retourne mesh\r\n    }\r\n    \r\n    \r\n  \r\n    \r\n   \r\n    async CreateSceneProd(x, y, z) {\r\n       \r\n    }\r\n    async CreatePlayer(x, y, z) {\r\n        \r\n    }\r\n      \r\n    async Zone(x, y, z) {\r\n      \r\n     \r\n    }\r\n\r\n    async plane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(-0.1, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n\r\n    async flatplane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(0, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n    async createDeadTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Dead Trees With Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 30\r\n            meshes[0].scaling.y = 20\r\n            meshes[0].scaling.z = 20\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(30, 30, 30),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n\r\n  \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Snow Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createLitleSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow two.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowMan(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"SnowManRotated.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 1\r\n            meshes[0].scaling.y = 1\r\n            meshes[0].scaling.z = 1\r\n      \r\n            let globalMesh = meshes[0];\r\n            \r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(\"SNOWMAN \"+globalMesh.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateRampe1(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"rampe_2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n \r\n            meshes[0].scaling.x = 5\r\n            meshes[0].scaling.y = 5\r\n            meshes[0].scaling.z = 5\r\n   \r\n           \r\n            let mesh = meshes[0];\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            mesh.name =\"Rampe\"\r\n            let elment =meshes[1] ;\r\n           \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(elment, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n           \r\n\r\n            \r\n           // var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n    createSnowMount(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Rock Forms 3 (White).glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            meshes[0].scaling.x = 150\r\n            meshes[0].scaling.y = 150\r\n            meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            let element =meshes[1] ;\r\n            element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n          \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(element, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n\r\n    createFinalScene2(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"finalscene2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            //meshes[0].scaling.x = 150\r\n            //meshes[0].scaling.y = 150\r\n            //meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[2].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            //let element =meshes[1] ;\r\n            let element = this.scene.getMeshByName(\"Cube (sol)\");\r\n            //let element2 = this.scene.getMeshByName(\"Cube (sol)\") ;\r\n            //let element3 = this.scene.getMeshByUniqueId(769) ;\r\n\r\n            //element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n\r\n            //console.log();\r\n        \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                i++\r\n            }\r\n            \r\n          \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n    \r\n    \r\n    \r\n    /** ######################################################################## Scene3 3D MODEL #########################################################################**/\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreatePlateform(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"plateforme_scene3.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n        CreatePlateformlevel2(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spike_Mine.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n\r\n /** ######################################################################## Scene4 3D MODEL #########################################################################**/\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    CreatePlateform_Scene4(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene4_gameplay_ELEMENT.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingPlatform(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene_de_bowling.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingBall(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi ball\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n          \r\n            mesh.name =\"ball\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n         \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /** ######################################################################## MENU 3D MODEL #########################################################################**/\r\n\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n               // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n    \r\n                //var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n               // troncAggregate.shape.isTrigger =  true;\r\n    \r\n                \r\n                //var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n\r\n                 \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n          // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n          CreateMenu3dScene(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"menu.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi du menu\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"fondMenu\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n\r\n    \r\n   \r\n}\r\n","class CharacterController {\r\n    constructor(canvas , engine, character,forward,backward,left,right) {\r\n        this.setupKeyboardInput(canvas, engine, character,forward,backward,left,right);\r\n    }\r\n\r\n    setupKeyboardInput(canvas, engine, character,forwardI,backward,left,right) {\r\n        this.keys = {};\r\n\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            this.keys[event.key] = true;\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            // Vérifie l'état des touches dans l'objet \"keys\" et effectue des actions en conséquence.\r\n\r\n            if (this.keys[forwardI]) {\r\n                //console.log('Touche Z enfoncée');\r\n                \r\n                let forward = character.transformNode.forward.scale(-5);\r\n                console.log(forward);\r\n\r\n                character.applyForce(forward , character.transformNode.position);\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n          \r\n            }\r\n\r\n            if (this.keys[backward]) {\r\n                //console.log('Touche S enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(0, 0, 5), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                //charater.position.z += 0.1; // Déplace le personnage vers l'avant (positif sur l'axe z).\r\n            }\r\n\r\n            if (this.keys[left]) {\r\n                //console.log('Touche Q enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, -0.5, 0));\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.position.x += 0.1; // Déplace le personnage vers la gauche (positif sur l'axe x).\r\n            }\r\n\r\n            if (this.keys[right]) {\r\n                //console.log('Touche D enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(-5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0.5, 0));\r\n                //character.position.x -= 0.1; // Déplace le personnage vers la droite (négatif sur l'axe x).\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController;\r\n","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel1 {\r\n\r\n    constructor(scene,engine,name,forward,backward,left,right,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.boxBody ;\r\n\r\n        this.testPlayer(scene,engine,name,x,y,z);\r\n        this.enablePlayerControl(forward,backward,left,right);\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n\r\n        \r\n\r\n\r\n       \r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n\r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        box.isVisible = false;\r\n        //var box2 = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        //box.addChild(snowMan);\r\n        let snowMan = new CustomModels(scene).CreateSnowManOnSki(x,y-0.5,z,box);\r\n      \r\n       \r\n        //box.addChild(box2);\r\n        \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        \r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n\r\n        //rotate character\r\n      \r\n      \r\n        this.boxBody = boxBody;\r\n        \r\n     \r\n        \r\n      \r\n     \r\n        \r\n    \r\n       \r\n \r\n        return box;\r\n    \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(forward,backward,left,right){\r\n       let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel1;","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nimport {PlayerLevel1} from \"./PlayerLevel1.js\";\r\nimport * as sceneManager from './SceneManager.js';\r\nlet advancedTexture ;\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level2\";\r\nvar value = \"start\";     \r\n//var player = new PlayerLevel1(scene);\r\n\r\nasync function getInitializedHavok() {\r\n  return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    displayControlUI();\r\n    // Ajoutez une lumière hémisphériques\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    \r\n    const havokInstance = await HavokPhysics();\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n   \r\n    \r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0),  hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n\r\n    var sceneprod = new CustomModels(scene);\r\n    //PART 1 LEVEL\r\n    \r\n    //first plane \r\n    let plane = sceneprod.plane(5,0,-45,25,150,scene);\r\n  \r\n   \r\n\r\n    let x = -10;\r\n    var pineTree = new CustomModels(scene);\r\n    \r\n    pineTree.CreatePineTree(0,3,-10+x);\r\n    pineTree.CreatePineTree(10,3,-10+x);\r\n    pineTree.CreatePineTree(15,3,-10+x);\r\n    pineTree.CreatePineTree(-5,3,-10+x);\r\n    var deadTrees = new CustomModels(scene);\r\n    //deadTrees.createDeadTree(0,5,-20);\r\n\r\n    var snowTrees = new CustomModels(scene);\r\n    snowTrees.createSnowTree(0,4.5,-30+x);\r\n    snowTrees.createSnowTree(5,4.5,-30+x);\r\n    snowTrees.createSnowTree(15,4.5,-30+x);\r\n\r\n    var snowLitleTrees = new CustomModels(scene);\r\n    snowLitleTrees.createLitleSnowTree(-5,3,-50+x);\r\n    snowLitleTrees.createLitleSnowTree(9,3,-50+x);\r\n    snowLitleTrees.createLitleSnowTree(15,3,-50+x);\r\n\r\n\r\n    var snowMan= new CustomModels(scene);\r\n    snowMan.createSnowMan(0,-2.5,-70+x);\r\n    snowMan.createSnowMan(-5,-2.5,-70+x);\r\n    snowMan.createSnowMan(5,-2.5,-70+x);\r\n\r\n\r\n \r\n\r\n  \r\n\r\n  \r\n\r\n\r\n    var ascendingRampe= new CustomModels(scene);\r\n\r\n    ascendingRampe.CreateRampe1(10,-5,-100+x);\r\n\r\n    //********************************************************** PART 2 LEVEL ******************************************************************************/////////////////\r\n\r\n    //second plane \r\n    sceneprod.plane(5,-25,-250,25,230,scene);\r\n\r\n\r\n    var rampe_1 = new CustomModels(scene);\r\n\r\n    //rajout de neige\r\n    var snowMount= new CustomModels(scene);\r\n    \r\n    snowMount.createSnowMount(0,-12,-150+x);\r\n    snowMount.createSnowMount(11,-20,-210+x);\r\n    snowMount.createSnowMount(0,-23,-255+x);\r\n    snowMount.createSnowMount(11,-25.5,-290+x);\r\n    \r\n    //rajout d'une rampe\r\n    ascendingRampe.CreateRampe1(-5,-34.5,-350+x);\r\n\r\n\r\n    \r\n    var tree2 = new CustomModels(scene);\r\n    tree2.CreateTree(0,0,-10 );\r\n\r\n    \r\n    var plane2 = new CustomModels();\r\n    sceneprod.plane(5,-25,-250,25,230,scene);\r\n\r\n //********************************************************** PART 3 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane \r\n    var plane3 = new CustomModels(scene);\r\n    \r\n    plane3.flatplane(5,-32,-445,25,100,scene);\r\n\r\n    rampe_1.CreateRampe1(12,-32,-500);\r\n    snowMan.createSnowMan(12,-28,-500);\r\n    \r\n    rampe_1.CreateRampe1(4,-32,-500);\r\n    snowMan.createSnowMan(5,-28,-500);\r\n\r\n    rampe_1.CreateRampe1(-4,-32,-500);\r\n\r\n//********************************************************** PART 4 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane \r\n    var plane3 = new CustomModels(scene);\r\n    \r\n    plane3.flatplane(5,-28,-580,25,100,scene);\r\n\r\n    rampe_1.CreateRampe1(12,-28,-630);\r\n\r\n    snowMount.createSnowMount(4,-24,-630);\r\n\r\n//********************************************************** PART 5 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane\r\n    \r\n    var plane3 = new CustomModels(scene);\r\n    plane3.flatplane(5,-24,-750,25,200,scene);\r\n\r\n    snowMan.createSnowTree(12,-20,-705);\r\n    snowMount.createSnowTree(-4,-20,-705);\r\n\r\n    snowMan.createSnowTree(12,-20,-715);\r\n    snowMount.createSnowTree(-4,-20,-715);\r\n\r\n    snowMan.createSnowTree(12,-20,-725);\r\n    snowMount.createSnowTree(-4,-20,-725);\r\n    \r\n    snowMan.createSnowTree(12,-20,-735);\r\n    snowMount.createSnowTree(-4,-20,-735);\r\n\r\n    snowMan.createSnowTree(12,-20,-745);\r\n    snowMount.createSnowTree(-4,-20,-745);\r\n\r\n    snowMan.createSnowTree(12,-20,-755);\r\n    snowMount.createSnowTree(-4,-20,-755);\r\n\r\n    snowMan.createSnowTree(12,-20,-765);\r\n    snowMount.createSnowTree(-4,-20,-765);\r\n\r\n    snowMan.createSnowTree(12,-20,-770);\r\n    snowMount.createSnowTree(-4,-20,-770);\r\n\r\n    snowMan.createSnowTree(12,-20,-775);\r\n    snowMount.createSnowTree(-4,-20,-775);\r\n\r\n\r\n    snowMan.createSnowTree(12,-20,-785);\r\n    snowMount.createSnowTree(-4,-20,-785);\r\n\r\n    snowMan.createSnowTree(12,-20,-800);\r\n    snowMount.createSnowTree(-4,-20,-800);\r\n\r\n    snowMan.createSnowTree(12,-20,-810);\r\n    snowMount.createSnowTree(-4,-20,-810);\r\n\r\n    snowMan.createSnowTree(12,-20,-820);\r\n    snowMount.createSnowTree(-4,-20,-820);\r\n\r\n    snowMan.createSnowTree(12,-20,-830);\r\n    snowMount.createSnowTree(-4,-20,-830);\r\n\r\n    snowMan.createSnowTree(12,-20,-840);\r\n    snowMount.createSnowTree(-4,-20,-840);\r\n\r\n    rampe_1.CreateRampe1(4,-24,-850);\r\n\r\n    //trigger to die and pass\r\n    triggerDie();\r\n   \r\n\r\n    \r\n\r\n\r\n\r\n   //testPlayer();\r\n\r\n   let player = new PlayerLevel1(scene,engine,'player1','z','s','q','d',5,5,0);\r\n\r\n   let player2 = new PlayerLevel1(scene,engine,'player2','i','k','j','l',0,5,0);\r\n\r\n   triggerRespawn();\r\n    \r\n   //montrer le layer\r\n   //scene.debugLayer.show();\r\n   \r\n   \r\n\r\n    var place = new CustomModels(scene);\r\n    place.createFinalScene2(4,-24,-970);\r\n   \r\n    \r\n \r\n\r\n    \r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    //let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    //console.log(scene.getMeshByName(\"player\"));\r\n    //console.log(scene.getMeshByUniqueId(6));\r\n    \r\n    eventHandler(hk,player);\r\n   return playerMesh;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction testPlayer(){\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    box.position = new BABYLON.Vector3(0,5,0);\r\n\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    let control = new CharacterController(canvas,scene,engine,boxBody);\r\n    return box;\r\n\r\n    \r\n}\r\n\r\nfunction triggerDie(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(10, 10, 10),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 2;\r\n    box.position.y = -24;\r\n    box.position.z = -1010;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\nfunction triggerRespawn(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(25, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 100;\r\n    var boxH = 2;\r\n    var boxD = 2000;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Die\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 2;\r\n    box.position.y = -45;\r\n    box.position.z = -800;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nfunction eventHandler(hk,player){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n        if(ev.collidedAgainst.transformNode.name ==\"tronc\"){\r\n                console.log(\"End OF the Game\")\r\n                reloadlevel();\r\n               \r\n                player = null;\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n            player = null;\r\n  \r\n\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Die\"){\r\n            console.log(\"YOU DIEEEEEEEEEE\");\r\n            value = \"death\";\r\n            reloadlevel();\r\n            player = null;\r\n           \r\n            //return \"death\";\r\n        }\r\n    });\r\n}\r\n\r\nfunction launch() {\r\n \r\n    \r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5); \r\n   \r\n    scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh;\r\n        camera2.lockedTarget = playerMesh2;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n    \r\n       \r\n \r\n    engine.runRenderLoop(function () {\r\n       //console.log(value)\r\n       scene.render();\r\n       \r\n     \r\n    });\r\n    \r\n   \r\n}\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n  \r\n  \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n}\r\n\r\nfunction reloadlevel(){\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n\r\n \r\n\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel3();\r\n\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n   // Récupération de l'élément par son ID\r\n   var level1 = document.getElementById(\"level1\");\r\n\r\n   // Afficher l'élément\r\n   level1.style.display = \"block\";\r\n\r\n}\r\nfunction hideControlUI(){\r\n       // Récupération de l'élément par son ID\r\n   var level1 = document.getElementById(\"level1\");\r\n\r\n   // Afficher l'élément\r\n   level1.style.display = \"none\";\r\n\r\n}\r\n\r\nexport { name, scene, sceneData, launch,killLevel };\r\n","class CharacterController2 {\r\n    constructor(canvas, scene, engine, character1, input1, inputJump,animationGroup) {\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, input1, inputJump,animationGroup);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1, inputJump,animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n\r\n                \r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n                    \r\n                 \r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                    console.log(\"Touche enfoncée, action effectuée jump\");\r\n              \r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n            \r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump ) {\r\n                isKeyPressed2 = false;\r\n                console.log(\"Touche relâchée jump\");\r\n                // Ajoutez ici la logique pour arrêter le saut du personnage si nécessaire\r\n            \r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n                //console.log(\"Touche relâchée\");\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            \r\n            if (isKeyPressed) {\r\n            \r\n                character.applyForce(new BABYLON.Vector3(0, 0, -50), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n               \r\n                isKeyPressed = false;\r\n                //console.log(  animationGroup)\r\n               //animationGroup[1].play();\r\n            }\r\n            \r\n            if (isKeyPressed2) {\r\n                character.applyForce(new BABYLON.Vector3(0, 200, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                isKeyPressed2 = false;\r\n                //animationGroup[2].play();\r\n            }\r\n\r\n            character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController2 from './CharacterController2.js';\r\nvar engine2 = new BABYLON.Engine(canvas, true);\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel2 {\r\n\r\n    constructor(scene,engine,name,forward,jump,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name = name;\r\n        this.boxBody ;\r\n        this.boxMesh;\r\n        this.animationGroups = [];\r\n        this.forward = forward\r\n        this.jump = jump;\r\n        \r\n        this.createPlayer(x,y,z);\r\n        this.enablePlayerControl(forward,jump);\r\n       // this.Character(x,y,z);\r\n     \r\n    }\r\n    \r\n\r\n    async createPlayer(x,y,z){\r\n\r\n        var boxW = 2;\r\n        var boxH = 1.80;\r\n        var boxD = 2;\r\n        \r\n        var box = BABYLON.MeshBuilder.CreateBox(this.name, {width: boxW, height: boxH, depth: boxD},this.scene);\r\n        this.boxMesh = box;\r\n        //ADD character disable box visibility \r\n        box.visibility = false;\r\n       //this.Character(x, y, z, box); \r\n\r\n\r\n\r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD),this.scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        this.boxBody = boxBody;\r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", this.scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n        this.animationGroups = await this.Character(x, y, z, box);\r\n       //console.log(this.animationGroups);\r\n      \r\n    \r\n     \r\n     \r\n        \r\n    \r\n        //boxBody.applyForce()\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n        return box;\r\n    }\r\n    \r\n  \r\n \r\n    enablePlayerControl(forward,jump){\r\n       let control = new CharacterController2(canvas,this.scene,this.engine,this.boxBody,forward,jump,this.animationGroups);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n   \r\n    async Character(x, y, z, parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        const { meshes, animationGroups } = await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"./models/character1_anim/\", \"animCharacter.glb\", this.scene);\r\n    \r\n        mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n        mesh.name = \"RUNNER\";\r\n        mesh.position = new BABYLON.Vector3(x, y - 1.05, z); // Positionne le modèle une fois chargé\r\n    \r\n        if (parent) {\r\n            mesh.setParent(parent); // Attacher le modèle au parent si spécifié\r\n        }\r\n        this.animationGroups.push(animationGroups) ;\r\n        // Vous pouvez ajouter des manipulations supplémentaires sur le mesh ici, comme l'échelle ou la rotation\r\n    \r\n        console.log(\"Chargement réussi Personnage\", mesh);\r\n        //gerer les animations\r\n        //console.log(\"ANIMATION GROUP :\"+animationGroups)\r\n  \r\n        //animationGroups[0].play();\r\n        //animationGroups[1].play();\r\n        //animationGroups[2].play();\r\n        //console.log(animationGroups[1])\r\n        await this.animGestionner(canvas,this.forward,this.jump,animationGroups)\r\n        \r\n    \r\n        return { animationGroups };\r\n    }\r\n\r\n    async animGestionner(canvas, input1, inputJump, animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n\r\n\r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n\r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump) {\r\n                isKeyPressed2 = false;\r\n\r\n\r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n\r\n        engine2.runRenderLoop(() => {\r\n\r\n            if (isKeyPressed) {\r\n                isKeyPressed = false;\r\n                console.log(\"VOILA LE GROUPE :\" + animationGroup)\r\n                animationGroup[2].play();\r\n\r\n            }\r\n\r\n            if (isKeyPressed2) {\r\n\r\n                isKeyPressed2 = false;\r\n                animationGroup[1].play();\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel2;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level3\";\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController2 from './CharacterController2.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport PlayerLevel2 from './PlayerLevel2.js';\r\n\r\nasync function getInitializedHavok() {\r\n    return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n \r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n   \r\n    // Configurez une caméra\r\n   \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    //var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n\r\n\r\n    // Créez un cube avec le matériau\r\n  \r\n   \r\n\r\n\r\n\r\n    //player2.position.x =0;\r\n    //player2.position.y =0;\r\n    //player2.position.z =0;\r\n\r\n    //var devcamera = new DevCamera(canvas, scene);\r\n    // Positionnez le cube où vous le souhaitez\r\n\r\n    triggerEnd(5,11,-620);\r\n    eventHandler(hk);\r\n\r\n    // Ajoutez l'événement de clic à la scène\r\n    scene.onPointerDown = function (evt, pickResult) {\r\n        onPointerDown(evt, pickResult);\r\n    };\r\n\r\n    var plane2 = new CustomModels(scene);\r\n    //plane2.CreatePlateform(0,0, -472,678);\r\n    plane2.CreatePlateformlevel2(-7,14, -265);\r\n    displayControlUI();\r\n\r\n\r\n     \r\n    let player1 = new PlayerLevel2(scene,engine,\"player1\",'s','f', 2,15,0);\r\n    let player2 = new PlayerLevel2(scene,engine,\"player2\",'k','m',-15,15,0);\r\n   //scene.debugLayer.show();\r\n\r\n}\r\n\r\nfunction launch() {\r\n   \r\n\r\n    \r\n   \r\n    //var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(-3, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5); \r\n   \r\n    //scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n    scene.activeCameras.push(camera)\r\n\r\n\r\n\r\n  \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(\"MESH PLAYER2\"+playerMesh2); // Utilisez playerMesh comme nécessaire\r\n\r\n        let playerMesh1 = scene.getMeshByName(\"player1\");\r\n        //console.log(\"MESH PLAYER2\"+playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh2;\r\n        camera2.lockedTarget = playerMesh1;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n// Fonction appelée lorsqu'un clic est détecté\r\nfunction onPointerDown(evt, pickResult) {\r\n    if (pickResult.hit) {\r\n        // Votre code d'interaction ici, par exemple, changez la couleur de l'objet\r\n        if(pickResult.pickedMesh.name ==\"player\"){\r\n\r\n            pickResult.pickedMesh.material.diffuseColor = new BABYLON.Color3(0, 1, 0); // Vert\r\n        }\r\n       \r\n    }\r\n}\r\n\r\n\r\n\r\nfunction catchPlayer(){\r\n    \r\n}\r\n\r\nfunction createPlayer(x,y,z , input1,inputJump){\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    //box.position = new BABYLON.Vector3(0,5,0);\r\n    box.position = new BABYLON.Vector3(x,y,z);\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n    let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n    return box;\r\n}\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction triggerEnd(x,y,z){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(60, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 40;\r\n    var boxH = 40;\r\n    var boxD = 40;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\nfunction eventHandler(hk){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n\r\n        }\r\n      \r\n    });\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\n function hideControlUI(){\r\n        // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n \r\n }\r\n\r\nexport { name, scene, sceneData, launch };\r\n","class CharacterController2 {\r\n    constructor(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch) {\r\n        this.destroyed = false;\r\n        this.action = false;\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1,input2, inputJump,inputLaunch) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n         \r\n             \r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n       \r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n          \r\n            if(!this.destroyed){\r\n                if (this.keys[input1] ) {\r\n                    //console.log('Touche gauche enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            \r\n                }\r\n\r\n                if (this.keys[input2] ) {\r\n                    //console.log('Touche Droite enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(-5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n         \r\n                if (this.keys[inputLaunch] && !this.action) {\r\n                    //console.log('Touche LAUNCH enfoncée');\r\n                    this.action = true;\r\n                    character.applyForce(new BABYLON.Vector3(0, 0, 700*4), new BABYLON.Vector3(0, 0, 0));\r\n                    //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            }\r\n        });\r\n\r\n       \r\n    }\r\n\r\n\r\n    destroy() {\r\n     \r\n        this.destroyed = true;\r\n\r\n        // Libérez les références aux objets\r\n        this.canvas = null;\r\n        this.engine = null;\r\n\r\n        //this.character1.dispose();\r\n        this.character1 = null;\r\n        this.inputLeft = null;\r\n        this.inputRight = null;\r\n        this.inputJump = null;\r\n        this.inputLaunch = null;\r\n\r\n        // Réinitialisez ou supprimez d'autres ressources si nécessaire\r\n    }\r\n    isUpperCase(input,key) {\r\n        return key === input.toUpperCase();\r\n    }\r\n    getLastKeyPressed() {\r\n        return this.lastKeyPressed; // Fonction pour récupérer la dernière touche enfoncée\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController3 from './CharacterController3.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel3 {\r\n\r\n    constructor(scene,engine,name,left,right,jump,action,x,y,z) {\r\n        this.control;\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name= name;\r\n        this.boxBody ;\r\n        this.sphereBody;\r\n        this.box;\r\n        this.rayHelper;\r\n        //this.testPlayer(scene,engine,name,x,y,z);\r\n      \r\n        this.shootBall(left,right,jump,action,x,y,z);\r\n    \r\n        this.enablePlayerControl(left,right,jump,action);\r\n\r\n        \r\n        //this.raycast();\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n       \r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        this.box =box;\r\n   \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n      \r\n       \r\n        this.boxBody = boxBody;\r\n        \r\n    \r\n     \r\n     \r\n        \r\n    \r\n\r\n      \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(inputLeft,inputRight,jump,action){\r\n       //let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n        let control2 = new CharacterController3(canvas2,this.engine,this.sphereBody, inputRight,inputLeft,jump,action);\r\n        this.control = control2;\r\n     \r\n      \r\n    }\r\n\r\n    raycast() {\r\n        // Get the player mesh by name\r\n        var playerMesh = this.scene.getMeshByName(this.name);\r\n        // Ensure the player mesh exists\r\n        if (!playerMesh) {\r\n            console.error(\"Player mesh not found\");\r\n            return;\r\n        }\r\n        // Get the player's position\r\n        var rayOrigin = playerMesh.position;\r\n        // Set the ray direction along the positive Z-axis\r\n        var rayDirection = new BABYLON.Vector3(0, 0, 1);\r\n        // Set the ray length\r\n        var rayLength = 50;\r\n        // Calculate the destination point of the ray\r\n        var rayDestination = rayOrigin.add(rayDirection.scale(rayLength));\r\n        // Create the ray\r\n        var ray = new BABYLON.Ray(rayOrigin, rayDirection, rayLength);\r\n        // Create a ray helper for visualization (optional)\r\n        var rayHelper = new BABYLON.RayHelper(ray);\r\n        rayHelper.show(this.scene, new BABYLON.Color3(0.9, 0, 0));\r\n        // Perform raycasting or any other actions with the ray\r\n        // Example: Check if the ray intersects with a mesh\r\n        var hit = this.scene.pickWithRay(ray);\r\n        \r\n        this.rayHelper = rayHelper;\r\n        //rayHelper.hide();\r\n\r\n        /*\r\n        if (hit.pickedMesh) {\r\n            console.log(\"Ray hits:\", hit.pickedMesh.name);\r\n            // Do something with the intersected mesh\r\n        }*/\r\n    }\r\n\r\n    shootBall(left,right,jump,action,x,y,z){\r\n        let segments = 16;\r\n        let diameter = 2;\r\n\r\n        const sphere = BABYLON.MeshBuilder.CreateSphere(this.name, { segments, diameter }, this.scene);\r\n        sphere.position = new BABYLON.Vector3(x,y,z);\r\n\r\n       \r\n        var sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0,0,0),diameter-1,this.scene);\r\n        var sphereBody = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        sphereBody.shape = sphereShape;\r\n        sphereBody.setMassProperties({mass : 2});\r\n        //sphereBody.setCollisionCallbackEnabled(true);\r\n       \r\n        \r\n        this.sphereBody = sphereBody;\r\n        //this.sphereBody.dispose();\r\n\r\n    }\r\n    disableThisObject(){\r\n        //delete this.control;\r\n        this.control.destroy();\r\n        this.control = null;\r\n        \r\n        //this.sphereBody.dispose();\r\n       \r\n    }\r\n    instanciate(){\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel3;","\r\n\r\nexport class BowlingPin {\r\n\r\n    constructor(scene,x,y,z) {\r\n       \r\n        this.scene = scene;\r\n       \r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        this.mesh;\r\n        this.Aggregate;\r\n        this.meshIdPromise = this.createBowlingPin();\r\n    }\r\n    \r\n    createBowlingPin(){\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Bowling Pin.glb\", this.scene, (meshes) => {\r\n\r\n             \r\n\r\n                const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                    new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                    new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                    new BABYLON.Vector3(0.5, 1.2, 0.5),      // dimensions of the box\r\n                    this.scene                                // scene of the shape\r\n                );\r\n        \r\n\r\n                let boxKid = BABYLON.MeshBuilder.CreateBox(\"Pintrigger\");\r\n                //boxKid.isVisible = false;\r\n\r\n                //console.log(\"Chargement réussi Pin\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                mesh.scaling._z =  mesh.scaling._z *-1;\r\n                mesh.name =\"Pin\"\r\n\r\n  \r\n            \r\n        \r\n                mesh.position = new BABYLON.Vector3(this.x, this.y, this.z); // Positionne l'objet\r\n            \r\n\r\n            \r\n                var Aggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0.1 }, this.scene);\r\n                Aggregate.body.setCollisionCallbackEnabled(true);\r\n                this.Aggregate = Aggregate;\r\n                this.mesh = mesh;\r\n               \r\n                const meshId = mesh.uniqueId;\r\n                resolve(meshId);\r\n\r\n            }, undefined, undefined, \".glb\");\r\n        })\r\n\r\n    }\r\n  \r\n    \r\n    async getMeshId(){\r\n         return await this.meshIdPromise;\r\n    }\r\n \r\n   \r\n    disableThisObject(){\r\n        this.Aggregate.body.setCollisionCallbackEnabled(false);\r\n        this.Aggregate.body.dispose();\r\n        //this.mesh.dispose();\r\n       \r\n    }\r\n    isPinUp() {\r\n        // Récupérer la rotation de la quille\r\n        const rotation = this.mesh.rotationQuaternion.toEulerAngles();\r\n\r\n        // Définir un seuil pour la rotation, en dessous duquel la quille est considérée comme renversée\r\n        const threshold = 0.1; // À ajuster selon vos besoins\r\n\r\n        // Vérifier si la rotation autour de l'axe X (ou un autre axe selon votre modèle) dépasse le seuil\r\n        const isUp = Math.abs(rotation.x) < threshold;\r\n\r\n        return isUp;\r\n    }\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default BowlingPin;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level4\";\r\nlet advancedTexture ;\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController3 from './CharacterController3.js';\r\nimport PlayerLevel3 from './PlayerLevel3.js';\r\nimport BowlingPin from './BowlingPin.js';\r\nimport * as sceneManager from './SceneManager.js';\r\n\r\nlet player1;\r\nlet player2;\r\n\r\nlet countPlayer1 =0;\r\nlet countPlayer2 =0;\r\n\r\n\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n\r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n       \r\n    \r\n    \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   \r\n\r\n    var model = new CustomModels(scene);\r\n    \r\n    var listeQuilles1 = [];\r\n\r\n    \r\n\r\n    let add =13 ;\r\n    var listeQuilles2 = [];\r\n   \r\n    \r\n    \r\n\r\n\r\n \r\n   // console.log(countPlayer1);\r\n     player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,-8);\r\n     player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',25,8,-8);\r\n\r\n     //let pin = new BowlingPin(scene,0,2,19.397);\r\n    \r\n   \r\n    let ball1 = scene.getMeshByName(\"player1\");\r\n    \r\n    displayControlUI();\r\n    //CreateBowlingBall(0,6,0);\r\n\r\n    eventHandler(hk,player1,player2);\r\n\r\n   // model.CreatePlateform_Scene4();\r\n    model.CreateBowlingPlatform();\r\n    listeQuilles1 =  addQuille(listeQuilles1,0,0,-8);\r\n    listeQuilles2 =  addQuille(listeQuilles2,25,0,-8);\r\n\r\n    testSearch(listeQuilles1,countPlayer1,\"player1\");\r\n    testSearch(listeQuilles2,countPlayer2,\"player2\");\r\n\r\n    \r\n        \r\n\r\n    let ball = scene.getMeshByName(\"ball\");\r\n    \r\n    \r\n\r\n  \r\n    /*\r\n    //trigger Player1\r\n    triggerRespawn(0,2,97.43,30, 30, 10);\r\n    triggerRespawn(7.5,2,48,1, 30,90);\r\n    triggerRespawn(-7.5,2,48,1, 30,90);\r\n\r\n    //trigger Player2\r\n    triggerRespawn(30,2,97.43,30, 30, 10);\r\n    triggerRespawn(20,2,48,1, 30,90);\r\n    triggerRespawn(35.5,2,48,1, 30,90);*/\r\n\r\n    respawnPlayerInput(player1,player2);\r\n\r\n    \r\n\r\n\r\n\r\n}\r\n\r\nfunction launch() {\r\n      \r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -22), scene);\r\n    camera.inertia = 0;\r\n    camera.angularSensibility = 0;\r\n    camera.detachControl(canvas);\r\n    camera.cameraRotation = 0;\r\n    scene.activeCameras.push(camera);\r\n    \r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1);\r\n    scene.activeCameras.push(camera);\r\n\r\n\r\n    var camera2 = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(25, 4, -23), scene);\r\n    camera2.inertia = 0;\r\n    camera2.angularSensibility = 0;\r\n    camera2.detachControl(canvas);\r\n    camera2.cameraRotation = 0;\r\n    scene.activeCameras.push(camera2);\r\n    camera2.viewport = new BABYLON.Viewport(0.5,0 , 0.5, 1);\r\n    scene.activeCameras.push(camera2);\r\n    \r\n   \r\n\r\n \r\n\r\n    sceneData();\r\n  \r\n\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    //console.log(playerMesh2);\r\n    //console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n    \r\n    camera.lockedTarget = playerMesh;\r\n    //camera2.lockedTarget = playerMesh2;\r\n\r\n    engine.runRenderLoop(function () {\r\n\r\n        scene.render();\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nfunction CreateBowlingBall(x, y, z) {\r\n    let tree;\r\n    let boundingBox;\r\n    let tronc;\r\n    var mesh \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi ball\", meshes);\r\n    \r\n        mesh = meshes[0];\r\n      \r\n        mesh.name =\"ball\"\r\n        \r\n    \r\n\r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        //var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n     \r\n    \r\n    }, undefined, undefined, \".glb\");\r\n\r\n\r\n\r\n    return {mesh};\r\n}\r\n\r\n\r\nfunction triggerRespawn(x,y,z,sizeX,sizeY,sizeZ){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(sizeX,sizeY,sizeZ),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    //let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Respawn\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n    \r\n\r\n    \r\n    //Aggregate.dispose();\r\n    \r\n}\r\n\r\nfunction eventHandler(hk,player1,player2){\r\n\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            //killLevel();\r\n            //loadNextLevel();\r\n            player1 = null;\r\n  \r\n\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Respawn\" && ( ev.collider.transformNode.name == \"player1\" || ev.collider.transformNode.name == \"player2\" ) ){\r\n            console.log(\"YOU RESPAWNWNNN\");\r\n\r\n            if(ev.collider.transformNode.name == \"player1\"){\r\n                let ball1 = scene.getMeshByName(\"player1\");\r\n         \r\n                player1.disableThisObject();\r\n                //player1 = null;\r\n                ball1.dispose();\r\n                \r\n                player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',-5,5,0);\r\n            \r\n     \r\n            }else{\r\n                let ball2 = scene.getMeshByName(\"player2\");\r\n                player2.disableThisObject();\r\n                //player2 = null;\r\n                ball2.dispose()\r\n\r\n                player2= new PlayerLevel3(scene,engine,\"player2\",'j','l','i','Enter',28,5,0);\r\n              \r\n            }\r\n          \r\n         \r\n\r\n            \r\n          \r\n        }\r\n     \r\n    });\r\n\r\n   //WinParty\r\n\r\n   \r\n}\r\n\r\n\r\n\r\n\r\nfunction pinsCount(hk){\r\n\r\n    hk.onCollisionObservable.add((ev) => {\r\n        //console.log(ev.type);\r\n        //console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       //check if Pin is collided add count to counter of the player\r\n   \r\n       if(ev.collidedAgainst.transformNode.name ==\"Pin\" ){\r\n            //console.log(\"YOU collide a pin\");\r\n            let uniqueId =ev.collidedAgainst.transformNode.uniqueId;\r\n            //console.log(ev.collidedAgainst.transformNode.uniqueId);\r\n            //list.push();\r\n            if(ev.collider.transformNode.name == \"player2\"){\r\n\r\n                //console.log(\"player1 IS ON THE PLACE\")\r\n\r\n                testSearch(uniqueId);\r\n              \r\n                countPlayer1++;\r\n                //console.log(countPlayer1);\r\n                \r\n            }\r\n      \r\n        }\r\n});\r\n\r\n}\r\n\r\nasync function testSearch(listeQuilles1,countPlayer1,playerText){\r\n\r\n \r\n    engine.runRenderLoop(async () => {\r\n\r\n        for(let i=0;i<listeQuilles1.length; i++){\r\n            const meshIdQuille = await listeQuilles1[i].getMeshId();\r\n            const quille =  listeQuilles1[i];\r\n            //console.log(meshIdQuille);\r\n            /*\r\n            if(meshIdQuille == id){\r\n                \r\n                quille.disableThisObject();\r\n            \r\n            }*/\r\n            if(!quille.isPinUp()){\r\n                countPlayer1++;\r\n                \r\n                listeQuilles1.splice(i, 1);\r\n\r\n                // Décrémenter i pour compenser la suppression de l'élément\r\n                i--;\r\n                    \r\n            };\r\n        }\r\n        //console.log(\"compteur \"+playerText+\" \" +countPlayer1);\r\n        //console.log(countPlayer1);\r\n  \r\n      if(countPlayer1 >= 93 ||countPlayer2 >= 93){\r\n        killLevel();\r\n        loadNextLevel();\r\n      }\r\n\r\n        // Utiliser setInterval pour appeler la fonction de mise à jour à intervalles réguliers (par exemple, toutes les 1000 millisecondes)\r\n        //setInterval(updateCountPins, 1000); //\r\n        \r\n\r\n\r\n    })\r\n   \r\n  \r\n    \r\n \r\n}\r\n\r\n\r\nfunction addQuille( listeQuilles1,x,y,z){\r\n\r\n\r\n    listeQuilles1 = [\r\n        //-3\r\n        new BowlingPin(scene, 0.25+x, 2+y,21+z),\r\n        //-2\r\n             \r\n        //new BowlingPin(scene, 0, 2, 21.5),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y,21.5+z),\r\n        new BowlingPin(scene, 0.50+x, 2+y,21.5+z),\r\n        //new BowlingPin(scene, 0.60, 2,21.5),\r\n      \r\n\r\n\r\n        //-1\r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0.25+x, 2+y, 22+z),\r\n        new BowlingPin(scene, 0.60+x, 2+y,22+z),\r\n        \r\n      \r\n\r\n\r\n        //0\r\n        new BowlingPin(scene, -0.5+x, 2+y, 22.5+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,22.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,22.5+z),\r\n        \r\n        //1\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23+z),\r\n   \r\n        //2\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 23.5+z),\r\n\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,23.5+z),\r\n      \r\n        \r\n        //3\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24+z),\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24+z),\r\n        \r\n        //4\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 24.5+z),\r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 24.5+z),\r\n       \r\n\r\n\r\n        \r\n        //5\r\n\r\n        new BowlingPin(scene, -0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25+z),\r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25+z),\r\n        //new BowlingPin(scene, 4, 2, 25),\r\n        \r\n        \r\n\r\n       //6\r\n       \r\n        new BowlingPin(scene, -0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 25.5+z),\r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 25.5+z),\r\n   \r\n        \r\n\r\n        //7\r\n        new BowlingPin(scene, -0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -4+x, 2+y, 26+z),\r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 26+z),  \r\n        new BowlingPin(scene, 2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4.5+x, 2+y, 26+z),\r\n\r\n        //listeQuilles1.forEach(pin => pin.position.y += 5)\r\n    \r\n     \r\n    ];\r\n    return listeQuilles1;\r\n}\r\n\r\nfunction respawnPlayerInput() {\r\n    // Ajouter un écouteur d'événements pour la touche \"espace\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.key === 'Shift') {\r\n            // Code à exécuter lorsque la touche \"espace\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"espace\" a été enfoncée');\r\n            let ball1 = scene.getMeshByName(\"player1\");\r\n            player1.disableThisObject();\r\n            ball1.dispose();\r\n            player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,-8);\r\n            \r\n        //document.getElementById(\"pin1\").innerText = countPlayer1+\"/93 PINS\";\r\n        \r\n        // Modifier le texte de l'élément avec l'identifiant \"pin2\"\r\n  \r\n        }\r\n    });\r\n\r\n    // Ajouter un écouteur d'événements pour la touche \"entrée\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.code === 'Backspace') {\r\n            // Code à exécuter lorsque la touche \"entrée\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"entrée\" a été enfoncée');\r\n            let ball2 = scene.getMeshByName(\"player2\");\r\n            player2.disableThisObject();\r\n            ball2.dispose();\r\n            player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',25,8,-8);\r\n            //document.getElementById(\"pin2\").innerText = countPlayer2+\"/93 PINS\";\r\n       \r\n        }\r\n    });\r\n\r\n}\r\n\r\n\r\nfunction displayPinNumber(){\r\n    \r\n     advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n    var button1 = BABYLON.GUI.Button.CreateSimpleButton(\"but1\", \"Click Me\");\r\n    button1.width = \"1000px\"\r\n    button1.height = \"40px\";\r\n    button1.color = \"white\";\r\n    button1.cornerRadius = 20;\r\n    button1.background = \"green\";\r\n    button1.onPointerUpObservable.add(function() {\r\n        alert(\"you did it!\");\r\n    });\r\n    advancedTexture.addControl(button1);   \r\n    \r\n    \r\n\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchEnd();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level3\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\n function hideControlUI(){\r\n        // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level3\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n \r\n }\r\n\r\nexport { name, scene, sceneData, launch };\r\n","let advancedTexture ;\r\nlet advancedTexture2 ;\r\n//const BABYLON = require('babylonjs');\r\n\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nimport { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nvar createScene = function () {\r\n    \r\n    // GUI\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   // Création d'une caméra\r\n    const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(0, 5, -18.5), scene);\r\n    //camera.attachControl()\r\n  \r\n   \r\n\r\n    let menu = new CustomModels(scene);\r\n    menu.CreateMenu3dScene(0,0,0);\r\n\r\n    displayMenu();\r\n\r\n    //scene.debugLayer.show();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\n\r\nfunction displayMenu(){\r\n\r\n\r\n       // Création du GUI\r\n    advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_button\");\r\n    advancedTexture2 = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_text\");\r\n    // Création du bouton Play\r\n    const playButton = BABYLON.GUI.Button.CreateSimpleButton(\"playButton\", \"Play\");\r\n    playButton.width = \"150px\";\r\n    playButton.height = \"40px\";\r\n    playButton.color = \"white\";\r\n    playButton.background = \"grey\";\r\n    playButton.onPointerClickObservable.add(function () {\r\n        // Mettre ici la logique pour le bouton Play\r\n        console.log(\"Play button clicked\");\r\n        killLevel();\r\n        loadNextLevel();\r\n    });\r\n    advancedTexture.addControl(playButton);\r\n\r\n    \r\n    // Création du texte en haut de la page\r\n    const headerText = new BABYLON.GUI.TextBlock();\r\n    headerText.text = \"Les Jeux Olympique Maudits\";\r\n    headerText.color = \"white\";\r\n    headerText.fontSize = 24;\r\n    headerText.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    headerText.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP; // Modifier cette ligne\r\n    headerText.paddingTop = \"-400px\"; // Ajout de 20px de padding en haut\r\n    advancedTexture2.addControl(headerText);\r\n\r\n\r\n  \r\n\r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n    advancedTexture2.dispose();\r\n    advancedTexture.dispose();\r\n    engine.stopRenderLoop();\r\n}\r\n\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel2();\r\n\r\n}\r\n\r\nexport {  scene, launch };","// Importez les modules \"scene1.js\" et \"scene2.js\" pour accéder à leurs fonctionnalités\r\n\r\nimport * as end from './End.js';\r\nimport * as scene2 from './scene2.js'\r\nimport * as scene3 from './scene3.js'\r\nimport * as scene4 from './scene4.js'\r\nimport * as menu from './Menu.js'\r\n\r\n\r\n\r\n// Fonction principale\r\nfunction Main() {\r\n    \r\n    // Appelez la fonction \"launch\" du module \"level2\" pour lancer la scène 2\r\n    \r\n    //launchEnd();\r\n   \r\n    launchLevel2();\r\n   //launchLevel3();\r\n   //aunchLevel4();\r\n\r\n   //launchLevelMenu();\r\n    \r\n\r\n   \r\n}\r\nfunction launchLevelMenu(){\r\n    \r\n    menu.launch();\r\n}\r\nfunction launchEnd(){\r\n    \r\n    end.launch();\r\n}\r\nfunction launchLevel2(){\r\n    scene2.killLevel();\r\n    scene2.launch();\r\n}\r\n\r\n\r\nfunction launchLevel3(){\r\n    \r\n   scene3.launch();\r\n}\r\n\r\nfunction launchLevel4(){\r\n    \r\n    scene4.launch();\r\n}\r\n\r\n\r\n\r\n\r\n \r\n// Exportez toutes les fonctions d'un coup\r\nexport { Main, launchEnd, launchLevel2, launchLevel3, launchLevel4 };\r\n\r\n\r\n// Exécute la fonction principale\r\nMain();\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","canvas","document","getElementById","engine","BABYLON","Engine","scene","Scene","createScene","FreeCamera","Vector3","debugLayer","show","constructor","this","CreateTree","x","y","z","tree","tronc","SceneLoader","ImportMesh","meshes","console","log","name","position","PhysicsAggregate","PhysicsShapeType","BOX","mass","shape","isTrigger","undefined","boundingBox","CreatePineTree","scaling","shapeBox1","PhysicsShapeBox","Quaternion","shapeBox2","CreateSnowManOnSki","parent","mesh","setParent","CreateSceneProd","CreatePlayer","Zone","plane","width","height","ground","MeshBuilder","CreateGround","subdivisions","addInPlace","rotation","groundMaterial","StandardMaterial","diffuseColor","Color3","material","flatplane","createDeadTree","globalMesh","createSnowTree","createLitleSnowTree","createSnowMan","CreateRampe1","bigMesh","elment","MESH","createSnowMount","element","createFinalScene2","getMeshByName","i","length","CreatePlateform","CreatePlateformlevel2","CreatePlateform_Scene4","CreateBowlingPlatform","CreateBowlingBall","SPHERE","CreateColiseum","CreateMenu3dScene","character","forward","backward","left","right","setupKeyboardInput","forwardI","keys","addEventListener","event","runRenderLoop","transformNode","scale","applyForce","setAngularVelocity","ZeroReadOnly","canvas2","PlayerLevel1","boxBody","testPlayer","enablePlayerControl","box","CreateBox","depth","isVisible","rotationQuaternion","Identity","boxShape","PhysicsBody","PhysicsMotionType","DYNAMIC","setMassProperties","blueMaterial","setCollisionCallbackEnabled","destroyPlayer","control","killLevel","player","forEach","dispose","cameras","lights","light","stopRenderLoop","style","display","reloadlevel","character1","input1","inputJump","animationGroup","setupKeyboardInputPlayer","isKeyPressed","isKeyPressed2","engine2","jump","boxMesh","animationGroups","createPlayer","visibility","Character","ImportMeshAsync","push","animGestionner","play","inputLeft","inputRight","inputLaunch","destroyed","action","input2","destroy","isUpperCase","input","toUpperCase","getLastKeyPressed","lastKeyPressed","sphereBody","rayHelper","shootBall","control2","CharacterController3","raycast","playerMesh","rayOrigin","rayDirection","ray","add","Ray","RayHelper","pickWithRay","error","sphere","CreateSphere","segments","diameter","sphereShape","PhysicsShapeSphere","disableThisObject","instanciate","Aggregate","meshIdPromise","createBowlingPin","Promise","resolve","_z","body","meshId","uniqueId","getMeshId","isPinUp","toEulerAngles","Math","abs","player1","player2","countPlayer1","countPlayer2","async","testSearch","listeQuilles1","playerText","splice","addQuille","launchEnd","render","launchLevel3","camera","FollowCamera","cameraRotation","viewport","Viewport","camera2","activeCameras","havokInstance","HavokPhysics","hk","HavokPlugin","enablePhysics","collisionsEnabled","HemisphericLight","triggerEnd","onTriggerCollisionObservable","ev","type","collider","collidedAgainst","onPointerDown","evt","pickResult","hit","pickedMesh","then","playerMesh2","playerMesh1","lockedTarget","catch","launchLevel4","inertia","angularSensibility","detachControl","model","listeQuilles2","ball1","ball2","code","sceneprod","pineTree","snowTrees","snowLitleTrees","snowMan","ascendingRampe","rampe_1","snowMount","triggerDie","triggerRespawn","eventHandler","sceneData"],"sourceRoot":""}