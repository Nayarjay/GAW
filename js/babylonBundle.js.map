{"version":3,"file":"js/babylonBundle.js","mappings":"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","sources":["webpack://gaw/webpack/bootstrap","webpack://gaw/webpack/runtime/define property getters","webpack://gaw/webpack/runtime/hasOwnProperty shorthand","webpack://gaw/./game/scene1.js","webpack://gaw/./game/CustomModels.js","webpack://gaw/./game/CharacterController.js","webpack://gaw/./game/PlayerLevel1.js","webpack://gaw/./game/scene2.js","webpack://gaw/./game/CharacterController2.js","webpack://gaw/./game/PlayerLevel2.js","webpack://gaw/./game/scene3.js","webpack://gaw/./game/CharacterController3.js","webpack://gaw/./game/PlayerLevel3.js","webpack://gaw/./game/BowlingPin.js","webpack://gaw/./game/scene4.js","webpack://gaw/./game/Menu.js","webpack://gaw/./game/SceneManager.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nimport { CustomModels } from './CustomModels.js';\r\nvar createScene = function () {\r\n \r\n    // GUI\r\n    var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n    \r\n    scene.debugLayer.show();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\n\r\n\r\n\r\nexport {  scene, launch };","\r\n\r\n\r\nexport class CustomModels {\r\n\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    \r\n    \r\n    /** ######################################################################## LEVEL2 3D MODEL #########################################################################**/\r\n\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    async CreateTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n         \r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            \r\n        \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    async CreatePineTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        return   BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            meshes[0].scaling.x = 3\r\n            meshes[0].scaling.y = 2\r\n            meshes[0].scaling.z = 4\r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n            //troncAggregate.shape.\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, shapeBox2, { mass: 0 }, this.scene);\r\n           \r\n            \r\n        \r\n           //return boundingBox;\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n       \r\n    }\r\n\r\n\r\n\r\n    CreateSnowManOnSki(x, y, z,parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        // Charger le modèle 3D\r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"snowman_on_skis.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi SnowMan\", meshes);\r\n            mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n            mesh.name = \"SnowMan\";\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne le modèle une fois chargé\r\n            mesh.setParent(parent);\r\n \r\n            //mesh.rotationQuaternion._y = 85;\r\n\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n    \r\n        return { mesh }; // Retourne mesh\r\n    }\r\n    \r\n    \r\n  \r\n    \r\n   \r\n    async CreateSceneProd(x, y, z) {\r\n       \r\n    }\r\n    async CreatePlayer(x, y, z) {\r\n        \r\n    }\r\n      \r\n    async Zone(x, y, z) {\r\n      \r\n     \r\n    }\r\n\r\n    async plane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(-0.1, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n\r\n    async flatplane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(0, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n    async createDeadTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Dead Trees With Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 30\r\n            meshes[0].scaling.y = 20\r\n            meshes[0].scaling.z = 20\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(30, 30, 30),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n\r\n  \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Snow Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createLitleSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow two.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowMan(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"SnowManRotated.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 1\r\n            meshes[0].scaling.y = 1\r\n            meshes[0].scaling.z = 1\r\n      \r\n            let globalMesh = meshes[0];\r\n            \r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(\"SNOWMAN \"+globalMesh.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateRampe1(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"rampe_2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n \r\n            meshes[0].scaling.x = 5\r\n            meshes[0].scaling.y = 5\r\n            meshes[0].scaling.z = 5\r\n   \r\n           \r\n            let mesh = meshes[0];\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            mesh.name =\"Rampe\"\r\n            let elment =meshes[1] ;\r\n           \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(elment, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n           \r\n\r\n            \r\n           // var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n    createSnowMount(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Rock Forms 3 (White).glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            meshes[0].scaling.x = 150\r\n            meshes[0].scaling.y = 150\r\n            meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            let element =meshes[1] ;\r\n            element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n          \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(element, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n\r\n    createFinalScene2(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"finalscene2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            //meshes[0].scaling.x = 150\r\n            //meshes[0].scaling.y = 150\r\n            //meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[2].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            //let element =meshes[1] ;\r\n            let element = this.scene.getMeshByName(\"Cube (sol)\");\r\n            //let element2 = this.scene.getMeshByName(\"Cube (sol)\") ;\r\n            //let element3 = this.scene.getMeshByUniqueId(769) ;\r\n\r\n            //element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n\r\n            //console.log();\r\n        \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                i++\r\n            }\r\n            \r\n          \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n    \r\n    \r\n    \r\n    /** ######################################################################## Scene3 3D MODEL #########################################################################**/\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreatePlateform(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"plateforme_scene3.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n\r\n /** ######################################################################## Scene4 3D MODEL #########################################################################**/\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    CreatePlateform_Scene4(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene4_gameplay_ELEMENT.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingBall(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi ball\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n          \r\n            mesh.name =\"ball\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n         \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /** ######################################################################## MENU 3D MODEL #########################################################################**/\r\n\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n               // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n    \r\n                //var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n               // troncAggregate.shape.isTrigger =  true;\r\n    \r\n                \r\n                //var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n\r\n                 \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n          // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n          CreateMenu3dScene(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"menu.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi du menu\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"fondMenu\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n\r\n    \r\n   \r\n}\r\n","class CharacterController {\r\n    constructor(canvas , engine, character,forward,backward,left,right) {\r\n        this.setupKeyboardInput(canvas, engine, character,forward,backward,left,right);\r\n    }\r\n\r\n    setupKeyboardInput(canvas, engine, character,forwardI,backward,left,right) {\r\n        this.keys = {};\r\n\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            this.keys[event.key] = true;\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            // Vérifie l'état des touches dans l'objet \"keys\" et effectue des actions en conséquence.\r\n\r\n            if (this.keys[forwardI]) {\r\n                //console.log('Touche Z enfoncée');\r\n                \r\n                let forward = character.transformNode.forward.scale(-5);\r\n                console.log(forward);\r\n\r\n                character.applyForce(forward , character.transformNode.position);\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n          \r\n            }\r\n\r\n            if (this.keys[backward]) {\r\n                //console.log('Touche S enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(0, 0, 5), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                //charater.position.z += 0.1; // Déplace le personnage vers l'avant (positif sur l'axe z).\r\n            }\r\n\r\n            if (this.keys[left]) {\r\n                //console.log('Touche Q enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, -0.5, 0));\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n                //character.position.x += 0.1; // Déplace le personnage vers la gauche (positif sur l'axe x).\r\n            }\r\n\r\n            if (this.keys[right]) {\r\n                //console.log('Touche D enfoncée');\r\n                character.applyForce(new BABYLON.Vector3(-5, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0.5, 0));\r\n                //character.position.x -= 0.1; // Déplace le personnage vers la droite (négatif sur l'axe x).\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController;\r\n","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel1 {\r\n\r\n    constructor(scene,engine,name,forward,backward,left,right,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.boxBody ;\r\n\r\n        this.testPlayer(scene,engine,name,x,y,z);\r\n        this.enablePlayerControl(forward,backward,left,right);\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n\r\n        \r\n\r\n\r\n       \r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n\r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        box.isVisible = false;\r\n        //var box2 = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        //box.addChild(snowMan);\r\n        let snowMan = new CustomModels(scene).CreateSnowManOnSki(x,y-0.5,z,box);\r\n      \r\n       \r\n        //box.addChild(box2);\r\n        \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        \r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n\r\n        //rotate character\r\n      \r\n      \r\n        this.boxBody = boxBody;\r\n        \r\n     \r\n        \r\n      \r\n     \r\n        \r\n    \r\n       \r\n \r\n        return box;\r\n    \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(forward,backward,left,right){\r\n       let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel1;","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nimport {PlayerLevel1} from \"./PlayerLevel1.js\";\r\nlet advancedTexture ;\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level2\";\r\nvar value = \"start\";     \r\n//var player = new PlayerLevel1(scene);\r\n\r\nasync function getInitializedHavok() {\r\n  return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    \r\n    // Ajoutez une lumière hémisphériques\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    \r\n    const havokInstance = await HavokPhysics();\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n   \r\n    \r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0),  hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n\r\n    var sceneprod = new CustomModels(scene);\r\n    //PART 1 LEVEL\r\n\r\n    //first plane \r\n    let plane = sceneprod.plane(5,0,-45,25,150,scene);\r\n  \r\n   \r\n\r\n    let x = -10;\r\n    var pineTree = new CustomModels(scene);\r\n    \r\n    pineTree.CreatePineTree(0,3,-10+x);\r\n    pineTree.CreatePineTree(10,3,-10+x);\r\n    pineTree.CreatePineTree(15,3,-10+x);\r\n    pineTree.CreatePineTree(-5,3,-10+x);\r\n    var deadTrees = new CustomModels(scene);\r\n    //deadTrees.createDeadTree(0,5,-20);\r\n\r\n    var snowTrees = new CustomModels(scene);\r\n    snowTrees.createSnowTree(0,4.5,-30+x);\r\n    snowTrees.createSnowTree(5,4.5,-30+x);\r\n    snowTrees.createSnowTree(15,4.5,-30+x);\r\n\r\n    var snowLitleTrees = new CustomModels(scene);\r\n    snowLitleTrees.createLitleSnowTree(-5,3,-50+x);\r\n    snowLitleTrees.createLitleSnowTree(9,3,-50+x);\r\n    snowLitleTrees.createLitleSnowTree(15,3,-50+x);\r\n\r\n\r\n    var snowMan= new CustomModels(scene);\r\n    snowMan.createSnowMan(0,-2.5,-70+x);\r\n    snowMan.createSnowMan(-5,-2.5,-70+x);\r\n    snowMan.createSnowMan(5,-2.5,-70+x);\r\n\r\n\r\n \r\n\r\n  \r\n\r\n  \r\n\r\n\r\n    var ascendingRampe= new CustomModels(scene);\r\n\r\n    ascendingRampe.CreateRampe1(10,-5,-100+x);\r\n\r\n    //********************************************************** PART 2 LEVEL ******************************************************************************/////////////////\r\n\r\n    //second plane \r\n    sceneprod.plane(5,-25,-250,25,230,scene);\r\n\r\n\r\n    var rampe_1 = new CustomModels(scene);\r\n\r\n    //rajout de neige\r\n    var snowMount= new CustomModels(scene);\r\n    \r\n    snowMount.createSnowMount(0,-12,-150+x);\r\n    snowMount.createSnowMount(11,-20,-210+x);\r\n    snowMount.createSnowMount(0,-23,-255+x);\r\n    snowMount.createSnowMount(11,-25.5,-290+x);\r\n    \r\n    //rajout d'une rampe\r\n    ascendingRampe.CreateRampe1(-5,-34.5,-350+x);\r\n\r\n\r\n    \r\n    var tree2 = new CustomModels(scene);\r\n    tree2.CreateTree(0,0,-10 );\r\n\r\n    \r\n    var plane2 = new CustomModels();\r\n    sceneprod.plane(5,-25,-250,25,230,scene);\r\n\r\n //********************************************************** PART 3 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane \r\n    var plane3 = new CustomModels(scene);\r\n    \r\n    plane3.flatplane(5,-32,-445,25,100,scene);\r\n\r\n    rampe_1.CreateRampe1(12,-32,-500);\r\n    snowMan.createSnowMan(12,-28,-500);\r\n    \r\n    rampe_1.CreateRampe1(4,-32,-500);\r\n    snowMan.createSnowMan(5,-28,-500);\r\n\r\n    rampe_1.CreateRampe1(-4,-32,-500);\r\n\r\n//********************************************************** PART 4 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane \r\n    var plane3 = new CustomModels(scene);\r\n    \r\n    plane3.flatplane(5,-28,-580,25,100,scene);\r\n\r\n    rampe_1.CreateRampe1(12,-28,-630);\r\n\r\n    snowMount.createSnowMount(4,-24,-630);\r\n\r\n//********************************************************** PART 5 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane\r\n    \r\n    var plane3 = new CustomModels(scene);\r\n    plane3.flatplane(5,-24,-750,25,200,scene);\r\n\r\n    snowMan.createSnowTree(12,-20,-705);\r\n    snowMount.createSnowTree(-4,-20,-705);\r\n\r\n    snowMan.createSnowTree(12,-20,-715);\r\n    snowMount.createSnowTree(-4,-20,-715);\r\n\r\n    snowMan.createSnowTree(12,-20,-725);\r\n    snowMount.createSnowTree(-4,-20,-725);\r\n    \r\n    snowMan.createSnowTree(12,-20,-735);\r\n    snowMount.createSnowTree(-4,-20,-735);\r\n\r\n    snowMan.createSnowTree(12,-20,-745);\r\n    snowMount.createSnowTree(-4,-20,-745);\r\n\r\n    snowMan.createSnowTree(12,-20,-755);\r\n    snowMount.createSnowTree(-4,-20,-755);\r\n\r\n    snowMan.createSnowTree(12,-20,-765);\r\n    snowMount.createSnowTree(-4,-20,-765);\r\n\r\n    snowMan.createSnowTree(12,-20,-770);\r\n    snowMount.createSnowTree(-4,-20,-770);\r\n\r\n    snowMan.createSnowTree(12,-20,-775);\r\n    snowMount.createSnowTree(-4,-20,-775);\r\n\r\n\r\n    snowMan.createSnowTree(12,-20,-785);\r\n    snowMount.createSnowTree(-4,-20,-785);\r\n\r\n    snowMan.createSnowTree(12,-20,-800);\r\n    snowMount.createSnowTree(-4,-20,-800);\r\n\r\n    snowMan.createSnowTree(12,-20,-810);\r\n    snowMount.createSnowTree(-4,-20,-810);\r\n\r\n    snowMan.createSnowTree(12,-20,-820);\r\n    snowMount.createSnowTree(-4,-20,-820);\r\n\r\n    snowMan.createSnowTree(12,-20,-830);\r\n    snowMount.createSnowTree(-4,-20,-830);\r\n\r\n    snowMan.createSnowTree(12,-20,-840);\r\n    snowMount.createSnowTree(-4,-20,-840);\r\n\r\n    rampe_1.CreateRampe1(4,-24,-850);\r\n\r\n    //trigger to die and pass\r\n    triggerDie();\r\n   \r\n\r\n    \r\n\r\n\r\n\r\n   //testPlayer();\r\n\r\n   let player = new PlayerLevel1(scene,engine,'player1','z','s','q','d',5,5,0);\r\n\r\n   let player2 = new PlayerLevel1(scene,engine,'player2','i','k','j','l',0,5,0);\r\n\r\n   triggerRespawn();\r\n    displayMenu();\r\n   //montrer le layer\r\n   //scene.debugLayer.show();\r\n   \r\n   \r\n\r\n    var place = new CustomModels(scene);\r\n    place.createFinalScene2(4,-24,-970);\r\n   \r\n    \r\n \r\n\r\n    \r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    //let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    //console.log(scene.getMeshByName(\"player\"));\r\n    //console.log(scene.getMeshByUniqueId(6));\r\n    \r\n    eventHandler(hk,player);\r\n   return playerMesh;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction testPlayer(){\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    box.position = new BABYLON.Vector3(0,5,0);\r\n\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    let control = new CharacterController(canvas,scene,engine,boxBody);\r\n    return box;\r\n\r\n    \r\n}\r\n\r\nfunction triggerDie(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(10, 10, 10),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 2;\r\n    box.position.y = -24;\r\n    box.position.z = -1010;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\nfunction triggerRespawn(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(25, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 100;\r\n    var boxH = 2;\r\n    var boxD = 2000;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Die\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 2;\r\n    box.position.y = -45;\r\n    box.position.z = -800;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nfunction eventHandler(hk,player){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n        if(ev.collidedAgainst.transformNode.name ==\"tronc\"){\r\n                console.log(\"End OF the Game\")\r\n                reloadlevel();\r\n               \r\n                player = null;\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n            player = null;\r\n  \r\n\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Die\"){\r\n            console.log(\"YOU DIEEEEEEEEEE\");\r\n            value = \"death\";\r\n            reloadlevel();\r\n            player = null;\r\n           \r\n            //return \"death\";\r\n        }\r\n    });\r\n}\r\n\r\nfunction launch() {\r\n   /*\r\n    var camera2 = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.attachControl(canvas);*/\r\n\r\n    //camera2.cameraRotation = 0;\r\n   \r\n    //createCamPlayer and camera\r\n    /*\r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });*/\r\n    \r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5);\r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5); \r\n   \r\n    scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh;\r\n        camera2.lockedTarget = playerMesh2;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n    \r\n       \r\n \r\n    engine.runRenderLoop(function () {\r\n       //console.log(value)\r\n       scene.render();\r\n       \r\n     \r\n    });\r\n    \r\n   \r\n}\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n  \r\n  \r\n    engine.stopRenderLoop();\r\n}\r\n\r\nfunction reloadlevel(){\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n\r\n \r\n\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel3();\r\n\r\n}\r\n\r\nfunction displayMenu(){\r\n    advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_textControl\");\r\n\r\n\r\n\r\n  \r\n\r\n}\r\n\r\nexport { name, scene, sceneData, launch,killLevel };\r\n","class CharacterController2 {\r\n    constructor(canvas, scene, engine, character1, input1, inputJump,animationGroup) {\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, input1, inputJump,animationGroup);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1, inputJump,animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n\r\n                \r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n                    \r\n                 \r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                    console.log(\"Touche enfoncée, action effectuée jump\");\r\n              \r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n            \r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump ) {\r\n                isKeyPressed2 = false;\r\n                console.log(\"Touche relâchée jump\");\r\n                // Ajoutez ici la logique pour arrêter le saut du personnage si nécessaire\r\n            \r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n                //console.log(\"Touche relâchée\");\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n            \r\n            if (isKeyPressed) {\r\n            \r\n                character.applyForce(new BABYLON.Vector3(0, 0, -50), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n               \r\n                isKeyPressed = false;\r\n                //console.log(  animationGroup)\r\n               //animationGroup[1].play();\r\n            }\r\n            \r\n            if (isKeyPressed2) {\r\n                character.applyForce(new BABYLON.Vector3(0, 100, 0), new BABYLON.Vector3(0, 0, 0));\r\n                character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n                isKeyPressed2 = false;\r\n                //animationGroup[2].play();\r\n            }\r\n\r\n            character.setAngularVelocity(new BABYLON.Vector3(0, 0, 0));\r\n        });\r\n    }\r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController2 from './CharacterController2.js';\r\nvar engine2 = new BABYLON.Engine(canvas, true);\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel2 {\r\n\r\n    constructor(scene,engine,name,forward,jump,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name = name;\r\n        this.boxBody ;\r\n        this.boxMesh;\r\n        this.animationGroups = [];\r\n        this.forward = forward\r\n        this.jump = jump;\r\n        \r\n        this.createPlayer(x,y,z);\r\n        this.enablePlayerControl(forward,jump);\r\n       // this.Character(x,y,z);\r\n     \r\n    }\r\n    \r\n\r\n    async createPlayer(x,y,z){\r\n\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n        var box = BABYLON.MeshBuilder.CreateBox(this.name, {width: boxW, height: boxH, depth: boxD},this.scene);\r\n        this.boxMesh = box;\r\n        //ADD character disable box visibility \r\n        box.visibility = false;\r\n       //this.Character(x, y, z, box); \r\n\r\n\r\n\r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD),this.scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        this.boxBody = boxBody;\r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", this.scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n        this.animationGroups = await this.Character(x, y, z, box);\r\n       //console.log(this.animationGroups);\r\n      \r\n    \r\n     \r\n     \r\n        \r\n    \r\n        //boxBody.applyForce()\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n        //let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n        return box;\r\n    }\r\n    \r\n  \r\n \r\n    enablePlayerControl(forward,jump){\r\n       let control = new CharacterController2(canvas,this.scene,this.engine,this.boxBody,forward,jump,this.animationGroups);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n   \r\n    async Character(x, y, z, parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        const { meshes, animationGroups } = await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"./models/character1_anim/\", \"animCharacter.glb\", this.scene);\r\n    \r\n        mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n        mesh.name = \"RUNNER\";\r\n        mesh.position = new BABYLON.Vector3(x, y - 1.05, z); // Positionne le modèle une fois chargé\r\n    \r\n        if (parent) {\r\n            mesh.setParent(parent); // Attacher le modèle au parent si spécifié\r\n        }\r\n        this.animationGroups.push(animationGroups) ;\r\n        // Vous pouvez ajouter des manipulations supplémentaires sur le mesh ici, comme l'échelle ou la rotation\r\n    \r\n        console.log(\"Chargement réussi Personnage\", mesh);\r\n        //gerer les animations\r\n        //console.log(\"ANIMATION GROUP :\"+animationGroups)\r\n  \r\n        //animationGroups[0].play();\r\n        //animationGroups[1].play();\r\n        //animationGroups[2].play();\r\n        //console.log(animationGroups[1])\r\n        await this.animGestionner(canvas,this.forward,this.jump,animationGroups)\r\n        \r\n    \r\n        return { animationGroups };\r\n    }\r\n\r\n    async animGestionner(canvas, input1, inputJump, animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n\r\n\r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n\r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump) {\r\n                isKeyPressed2 = false;\r\n\r\n\r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n\r\n        engine2.runRenderLoop(() => {\r\n\r\n            if (isKeyPressed) {\r\n                isKeyPressed = false;\r\n                console.log(\"VOILA LE GROUPE :\" + animationGroup)\r\n                animationGroup[2].play();\r\n\r\n            }\r\n\r\n            if (isKeyPressed2) {\r\n\r\n                isKeyPressed2 = false;\r\n                animationGroup[1].play();\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel2;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level3\";\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController2 from './CharacterController2.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport PlayerLevel2 from './PlayerLevel2.js';\r\n\r\nasync function getInitializedHavok() {\r\n    return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n \r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n   \r\n    // Configurez une caméra\r\n   \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    \r\n\r\n\r\n    // Créez un cube avec le matériau\r\n  \r\n    \r\n    let player1 = new PlayerLevel2(scene,engine,\"player1\",'s','f', 10,15,0);\r\n    let player2 = new PlayerLevel2(scene,engine,\"player2\",'k','m',0,15,0);\r\n\r\n\r\n\r\n    //player2.position.x =0;\r\n    //player2.position.y =0;\r\n    //player2.position.z =0;\r\n\r\n    //var devcamera = new DevCamera(canvas, scene);\r\n    // Positionnez le cube où vous le souhaitez\r\n\r\n    triggerEnd();\r\n    eventHandler(hk);\r\n\r\n    // Ajoutez l'événement de clic à la scène\r\n    scene.onPointerDown = function (evt, pickResult) {\r\n        onPointerDown(evt, pickResult);\r\n    };\r\n\r\n    var plane2 = new CustomModels(scene);\r\n    plane2.CreatePlateform(0,0, -472,678);\r\n\r\n   \r\n   //scene.debugLayer.show();\r\n\r\n}\r\n\r\nfunction launch() {\r\n   \r\n\r\n    \r\n   \r\n    //var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 0.5);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(-3, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 0.5); \r\n   \r\n    //scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n    scene.activeCameras.push(camera)\r\n\r\n\r\n\r\n  \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(\"MESH PLAYER2\"+playerMesh2); // Utilisez playerMesh comme nécessaire\r\n\r\n        let playerMesh1 = scene.getMeshByName(\"player1\");\r\n        //console.log(\"MESH PLAYER2\"+playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh2;\r\n        camera2.lockedTarget = playerMesh1;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n// Fonction appelée lorsqu'un clic est détecté\r\nfunction onPointerDown(evt, pickResult) {\r\n    if (pickResult.hit) {\r\n        // Votre code d'interaction ici, par exemple, changez la couleur de l'objet\r\n        if(pickResult.pickedMesh.name ==\"player\"){\r\n\r\n            pickResult.pickedMesh.material.diffuseColor = new BABYLON.Color3(0, 1, 0); // Vert\r\n        }\r\n       \r\n    }\r\n}\r\n\r\n\r\n\r\nfunction catchPlayer(){\r\n    \r\n}\r\n\r\nfunction createPlayer(x,y,z , input1,inputJump){\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n    \r\n    var box = BABYLON.MeshBuilder.CreateBox(\"player\", {width: boxW, height: boxH, depth: boxD},scene);\r\n   \r\n    box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n    //box.position = new BABYLON.Vector3(0,5,0);\r\n    box.position = new BABYLON.Vector3(x,y,z);\r\n    var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n    var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n\r\n    boxBody.shape = boxShape;\r\n    boxBody.setMassProperties({mass : 1})\r\n\r\n\r\n    //add create material add tothe cube\r\n    var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n    blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n    box.material = blueMaterial;\r\n   \r\n    \r\n    boxBody.setCollisionCallbackEnabled(true)\r\n  \r\n   \r\n    \r\n \r\n\r\n \r\n \r\n    \r\n\r\n    //boxBody.applyForce()\r\n    //let control = new CharacterController2(canvas,scene,engine,boxBody,'s',' ');\r\n    let control = new CharacterController2(canvas,scene,engine,boxBody,input1,inputJump);\r\n    return box;\r\n}\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\nfunction triggerEnd(){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(25, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 20;\r\n    var boxH = 20;\r\n    var boxD = 20;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = 5,132;\r\n    box.position.y = 11,546;\r\n    box.position.z = -962,739;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\nfunction eventHandler(hk){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n\r\n        }\r\n      \r\n    });\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n}\r\n\r\n\r\nexport { name, scene, sceneData, launch };\r\n","class CharacterController2 {\r\n    constructor(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch) {\r\n        this.destroyed = false;\r\n        this.action = false;\r\n        this.setupKeyboardInputPlayer(canvas, engine, character1, inputLeft, inputRight,inputJump,inputLaunch);\r\n    }\r\n\r\n    setupKeyboardInputPlayer(canvas, engine, character, input1,input2, inputJump,inputLaunch) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n         \r\n             \r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n       \r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n        engine.runRenderLoop(() => {\r\n          \r\n            if(!this.destroyed){\r\n                if (this.keys[input1] ) {\r\n                    //console.log('Touche gauche enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            \r\n                }\r\n\r\n                if (this.keys[input2] ) {\r\n                    //console.log('Touche Droite enfoncée');\r\n                    character.applyForce(new BABYLON.Vector3(-5*2, 0, 0), new BABYLON.Vector3(0, 0, 0));\r\n                    character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n         \r\n                if (this.keys[inputLaunch] && !this.action) {\r\n                    //console.log('Touche LAUNCH enfoncée');\r\n                    this.action = true;\r\n                    character.applyForce(new BABYLON.Vector3(0, 0, 700*4), new BABYLON.Vector3(0, 0, 0));\r\n                    //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n        \r\n                }\r\n\r\n                //character.setAngularVelocity(BABYLON.Vector3.ZeroReadOnly);\r\n            }\r\n        });\r\n\r\n       \r\n    }\r\n\r\n\r\n    destroy() {\r\n     \r\n        this.destroyed = true;\r\n\r\n        // Libérez les références aux objets\r\n        this.canvas = null;\r\n        this.engine = null;\r\n\r\n        //this.character1.dispose();\r\n        this.character1 = null;\r\n        this.inputLeft = null;\r\n        this.inputRight = null;\r\n        this.inputJump = null;\r\n        this.inputLaunch = null;\r\n\r\n        // Réinitialisez ou supprimez d'autres ressources si nécessaire\r\n    }\r\n    isUpperCase(input,key) {\r\n        return key === input.toUpperCase();\r\n    }\r\n    getLastKeyPressed() {\r\n        return this.lastKeyPressed; // Fonction pour récupérer la dernière touche enfoncée\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default CharacterController2;\r\n","\r\nimport CharacterController3 from './CharacterController3.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel3 {\r\n\r\n    constructor(scene,engine,name,left,right,jump,action,x,y,z) {\r\n        this.control;\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name= name;\r\n        this.boxBody ;\r\n        this.sphereBody;\r\n        this.box;\r\n        this.rayHelper;\r\n        //this.testPlayer(scene,engine,name,x,y,z);\r\n      \r\n        this.shootBall(left,right,jump,action,x,y,z);\r\n    \r\n        this.enablePlayerControl(left,right,jump,action);\r\n\r\n        \r\n        //this.raycast();\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n       \r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        this.box =box;\r\n   \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n      \r\n       \r\n        this.boxBody = boxBody;\r\n        \r\n    \r\n     \r\n     \r\n        \r\n    \r\n\r\n      \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(inputLeft,inputRight,jump,action){\r\n       //let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right);\r\n        let control2 = new CharacterController3(canvas2,this.engine,this.sphereBody, inputRight,inputLeft,jump,action);\r\n        this.control = control2;\r\n     \r\n      \r\n    }\r\n\r\n    raycast() {\r\n        // Get the player mesh by name\r\n        var playerMesh = this.scene.getMeshByName(this.name);\r\n        // Ensure the player mesh exists\r\n        if (!playerMesh) {\r\n            console.error(\"Player mesh not found\");\r\n            return;\r\n        }\r\n        // Get the player's position\r\n        var rayOrigin = playerMesh.position;\r\n        // Set the ray direction along the positive Z-axis\r\n        var rayDirection = new BABYLON.Vector3(0, 0, 1);\r\n        // Set the ray length\r\n        var rayLength = 50;\r\n        // Calculate the destination point of the ray\r\n        var rayDestination = rayOrigin.add(rayDirection.scale(rayLength));\r\n        // Create the ray\r\n        var ray = new BABYLON.Ray(rayOrigin, rayDirection, rayLength);\r\n        // Create a ray helper for visualization (optional)\r\n        var rayHelper = new BABYLON.RayHelper(ray);\r\n        rayHelper.show(this.scene, new BABYLON.Color3(0.9, 0, 0));\r\n        // Perform raycasting or any other actions with the ray\r\n        // Example: Check if the ray intersects with a mesh\r\n        var hit = this.scene.pickWithRay(ray);\r\n        \r\n        this.rayHelper = rayHelper;\r\n        //rayHelper.hide();\r\n\r\n        /*\r\n        if (hit.pickedMesh) {\r\n            console.log(\"Ray hits:\", hit.pickedMesh.name);\r\n            // Do something with the intersected mesh\r\n        }*/\r\n    }\r\n\r\n    shootBall(left,right,jump,action,x,y,z){\r\n        let segments = 16;\r\n        let diameter = 2;\r\n\r\n        const sphere = BABYLON.MeshBuilder.CreateSphere(this.name, { segments, diameter }, this.scene);\r\n        sphere.position = new BABYLON.Vector3(x,y,z);\r\n\r\n       \r\n        var sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0,0,0),diameter-1,this.scene);\r\n        var sphereBody = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        sphereBody.shape = sphereShape;\r\n        sphereBody.setMassProperties({mass : 2});\r\n        //sphereBody.setCollisionCallbackEnabled(true);\r\n       \r\n        \r\n        this.sphereBody = sphereBody;\r\n        //this.sphereBody.dispose();\r\n\r\n    }\r\n    disableThisObject(){\r\n        //delete this.control;\r\n        this.control.destroy();\r\n        this.control = null;\r\n        \r\n        //this.sphereBody.dispose();\r\n       \r\n    }\r\n    instanciate(){\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel3;","\r\n\r\nexport class BowlingPin {\r\n\r\n    constructor(scene,x,y,z) {\r\n       \r\n        this.scene = scene;\r\n       \r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n\r\n        this.mesh;\r\n        this.Aggregate;\r\n        this.meshIdPromise = this.createBowlingPin();\r\n    }\r\n    \r\n    createBowlingPin(){\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Bowling Pin.glb\", this.scene, (meshes) => {\r\n\r\n             \r\n\r\n                const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                    new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                    new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                    new BABYLON.Vector3(0.5, 1.2, 0.5),      // dimensions of the box\r\n                    this.scene                                // scene of the shape\r\n                );\r\n        \r\n\r\n                let boxKid = BABYLON.MeshBuilder.CreateBox(\"Pintrigger\");\r\n                //boxKid.isVisible = false;\r\n\r\n                //console.log(\"Chargement réussi Pin\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                mesh.scaling._z =  mesh.scaling._z *-1;\r\n                mesh.name =\"Pin\"\r\n\r\n  \r\n            \r\n        \r\n                mesh.position = new BABYLON.Vector3(this.x, this.y, this.z); // Positionne l'objet\r\n            \r\n\r\n            \r\n                var Aggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0.2 }, this.scene);\r\n                Aggregate.body.setCollisionCallbackEnabled(true);\r\n                this.Aggregate = Aggregate;\r\n                this.mesh = mesh;\r\n               \r\n                const meshId = mesh.uniqueId;\r\n                resolve(meshId);\r\n\r\n            }, undefined, undefined, \".glb\");\r\n        })\r\n\r\n    }\r\n  \r\n    \r\n    async getMeshId(){\r\n         return await this.meshIdPromise;\r\n    }\r\n \r\n   \r\n    disableThisObject(){\r\n        this.Aggregate.body.setCollisionCallbackEnabled(false);\r\n        this.Aggregate.body.dispose();\r\n        //this.mesh.dispose();\r\n       \r\n    }\r\n    isPinUp() {\r\n        // Récupérer la rotation de la quille\r\n        const rotation = this.mesh.rotationQuaternion.toEulerAngles();\r\n\r\n        // Définir un seuil pour la rotation, en dessous duquel la quille est considérée comme renversée\r\n        const threshold = 0.1; // À ajuster selon vos besoins\r\n\r\n        // Vérifier si la rotation autour de l'axe X (ou un autre axe selon votre modèle) dépasse le seuil\r\n        const isUp = Math.abs(rotation.x) < threshold;\r\n\r\n        return isUp;\r\n    }\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default BowlingPin;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level4\";\r\nlet advancedTexture ;\r\n\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController3 from './CharacterController3.js';\r\nimport PlayerLevel3 from './PlayerLevel3.js';\r\nimport BowlingPin from './BowlingPin.js';\r\n\r\nlet player1;\r\nlet player2;\r\n\r\nlet countPlayer1 =0;\r\nlet countPlayer2 =0;\r\n\r\n\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n\r\n    const havokInstance = await HavokPhysics();\r\n\r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n       \r\n    \r\n    \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   \r\n\r\n    var model = new CustomModels(scene);\r\n    \r\n    var listeQuilles1 = [];\r\n\r\n    \r\n\r\n    let add =13 ;\r\n    var listeQuilles2 = [];\r\n   \r\n    \r\n    \r\n   \r\n   // console.log(countPlayer1);\r\n \r\n\r\n    //model.CreateBowlingBall(0,12,0)\r\n\r\n  //let player2 = new PlayerLevel3(scene,engine,\"player2\",\"ArrowLeft\",\"ArrowRight\",\"ArrowUp\",-5,5,0)\r\n\r\n \r\n   // console.log(countPlayer1);\r\n     player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,0);\r\n     player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',28,8,0);\r\n\r\n     //let pin = new BowlingPin(scene,0,2,19.397);\r\n    \r\n   \r\n    let ball1 = scene.getMeshByName(\"player1\");\r\n    \r\n    \r\n    //CreateBowlingBall(0,6,0);\r\n\r\n    eventHandler(hk,player1,player2);\r\n\r\n    model.CreatePlateform_Scene4();\r\n    listeQuilles1 =  addQuille(listeQuilles1,0,0,-10);\r\n    listeQuilles2 =  addQuille(listeQuilles2,28,0,-10);\r\n\r\n    testSearch(listeQuilles1,countPlayer1,\"player1\");\r\n    testSearch(listeQuilles2,countPlayer2,\"player2\");\r\n\r\n    \r\n        \r\n\r\n    let ball = scene.getMeshByName(\"ball\");\r\n    \r\n    \r\n\r\n  \r\n    /*\r\n    //trigger Player1\r\n    triggerRespawn(0,2,97.43,30, 30, 10);\r\n    triggerRespawn(7.5,2,48,1, 30,90);\r\n    triggerRespawn(-7.5,2,48,1, 30,90);\r\n\r\n    //trigger Player2\r\n    triggerRespawn(30,2,97.43,30, 30, 10);\r\n    triggerRespawn(20,2,48,1, 30,90);\r\n    triggerRespawn(35.5,2,48,1, 30,90);*/\r\n\r\n    respawnPlayerInput(player1,player2);\r\n\r\n    \r\n   \r\n\r\n    //advancedTexture.addControl(button1);    \r\n    scene.debugLayer.show();\r\n\r\n\r\n}\r\n\r\nfunction launch() {\r\n      \r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.inertia = 0;\r\n    camera.angularSensibility = 0;\r\n    camera.detachControl(canvas);\r\n    camera.cameraRotation = 0;\r\n    scene.activeCameras.push(camera);\r\n    \r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1);\r\n    scene.activeCameras.push(camera);\r\n\r\n\r\n    var camera2 = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(27, 5, -10), scene);\r\n    camera2.inertia = 0;\r\n    camera2.angularSensibility = 0;\r\n    camera2.detachControl(canvas);\r\n    camera2.cameraRotation = 0;\r\n    scene.activeCameras.push(camera2);\r\n    camera2.viewport = new BABYLON.Viewport(0.5,0 , 0.5, 1);\r\n    scene.activeCameras.push(camera2);\r\n    \r\n   \r\n\r\n \r\n\r\n    sceneData();\r\n  \r\n\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    //console.log(playerMesh2);\r\n    //console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n    \r\n    camera.lockedTarget = playerMesh;\r\n    //camera2.lockedTarget = playerMesh2;\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nfunction CreateBowlingBall(x, y, z) {\r\n    let tree;\r\n    let boundingBox;\r\n    let tronc;\r\n    var mesh \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi ball\", meshes);\r\n    \r\n        mesh = meshes[0];\r\n      \r\n        mesh.name =\"ball\"\r\n        \r\n    \r\n\r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        //var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n     \r\n    \r\n    }, undefined, undefined, \".glb\");\r\n\r\n\r\n\r\n    return {mesh};\r\n}\r\n\r\n\r\nfunction triggerRespawn(x,y,z,sizeX,sizeY,sizeZ){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(sizeX,sizeY,sizeZ),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    //let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Respawn\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n    \r\n\r\n    \r\n    //Aggregate.dispose();\r\n    \r\n}\r\n\r\nfunction eventHandler(hk,player1,player2){\r\n\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            //killLevel();\r\n            //loadNextLevel();\r\n            player1 = null;\r\n  \r\n\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Respawn\" && ( ev.collider.transformNode.name == \"player1\" || ev.collider.transformNode.name == \"player2\" ) ){\r\n            console.log(\"YOU RESPAWNWNNN\");\r\n\r\n            if(ev.collider.transformNode.name == \"player1\"){\r\n                let ball1 = scene.getMeshByName(\"player1\");\r\n         \r\n                player1.disableThisObject();\r\n                //player1 = null;\r\n                ball1.dispose();\r\n                \r\n                player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',-5,5,0);\r\n            \r\n     \r\n            }else{\r\n                let ball2 = scene.getMeshByName(\"player2\");\r\n                player2.disableThisObject();\r\n                //player2 = null;\r\n                ball2.dispose()\r\n\r\n                player2= new PlayerLevel3(scene,engine,\"player2\",'j','l','i','Enter',28,5,0);\r\n              \r\n            }\r\n          \r\n         \r\n\r\n            \r\n          \r\n        }\r\n     \r\n    });\r\n\r\n   //WinParty\r\n\r\n   \r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n  \r\n  \r\n    engine.stopRenderLoop();\r\n}\r\n\r\n\r\n\r\nfunction pinsCount(hk){\r\n\r\n    hk.onCollisionObservable.add((ev) => {\r\n        //console.log(ev.type);\r\n        //console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       //check if Pin is collided add count to counter of the player\r\n   \r\n       if(ev.collidedAgainst.transformNode.name ==\"Pin\" ){\r\n            //console.log(\"YOU collide a pin\");\r\n            let uniqueId =ev.collidedAgainst.transformNode.uniqueId;\r\n            //console.log(ev.collidedAgainst.transformNode.uniqueId);\r\n            //list.push();\r\n            if(ev.collider.transformNode.name == \"player2\"){\r\n\r\n                //console.log(\"player1 IS ON THE PLACE\")\r\n\r\n                testSearch(uniqueId);\r\n              \r\n                countPlayer1++;\r\n                //console.log(countPlayer1);\r\n                \r\n            }\r\n      \r\n        }\r\n});\r\n\r\n}\r\n\r\nasync function testSearch(listeQuilles1,countPlayer1,playerText){\r\n\r\n \r\n    engine.runRenderLoop(async () => {\r\n\r\n        for(let i=0;i<listeQuilles1.length; i++){\r\n            const meshIdQuille = await listeQuilles1[i].getMeshId();\r\n            const quille =  listeQuilles1[i];\r\n            //console.log(meshIdQuille);\r\n            /*\r\n            if(meshIdQuille == id){\r\n                \r\n                quille.disableThisObject();\r\n            \r\n            }*/\r\n            if(!quille.isPinUp()){\r\n                countPlayer1++;\r\n                \r\n                listeQuilles1.splice(i, 1);\r\n\r\n                // Décrémenter i pour compenser la suppression de l'élément\r\n                i--;\r\n                    \r\n            };\r\n        }\r\n       // console.log(\"compteur \"+playerText+\" \" +countPlayer1);\r\n\r\n\r\n\r\n\r\n    })\r\n   \r\n  \r\n    \r\n \r\n}\r\n\r\n\r\nfunction addQuille( listeQuilles1,x,y,z){\r\n\r\n\r\n    listeQuilles1 = [\r\n        //-3\r\n        new BowlingPin(scene, 0.25+x, 2+y,21+z),\r\n        //-2\r\n             \r\n        //new BowlingPin(scene, 0, 2, 21.5),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y,21.5+z),\r\n        new BowlingPin(scene, 0.50+x, 2+y,21.5+z),\r\n        //new BowlingPin(scene, 0.60, 2,21.5),\r\n      \r\n\r\n\r\n        //-1\r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0.25+x, 2+y, 22+z),\r\n        new BowlingPin(scene, 0.60+x, 2+y,22+z),\r\n        \r\n      \r\n\r\n\r\n        //0\r\n        new BowlingPin(scene, -0.5+x, 2+y, 22.5+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,22.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,22.5+z),\r\n        \r\n        //1\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23+z),\r\n   \r\n        //2\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 23.5+z),\r\n\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,23.5+z),\r\n      \r\n        \r\n        //3\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24+z),\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24+z),\r\n        \r\n        //4\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 24.5+z),\r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 24.5+z),\r\n       \r\n\r\n\r\n        \r\n        //5\r\n\r\n        new BowlingPin(scene, -0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25+z),\r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25+z),\r\n        //new BowlingPin(scene, 4, 2, 25),\r\n        \r\n        \r\n\r\n       //6\r\n       \r\n        new BowlingPin(scene, -0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 25.5+z),\r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 25.5+z),\r\n   \r\n        \r\n\r\n        //7\r\n        new BowlingPin(scene, -0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -4+x, 2+y, 26+z),\r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 26+z),  \r\n        new BowlingPin(scene, 2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4.5+x, 2+y, 26+z),\r\n\r\n        //listeQuilles1.forEach(pin => pin.position.y += 5)\r\n    \r\n     \r\n    ];\r\n    return listeQuilles1;\r\n}\r\n\r\nfunction respawnPlayerInput() {\r\n    // Ajouter un écouteur d'événements pour la touche \"espace\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.key === 'Shift') {\r\n            // Code à exécuter lorsque la touche \"espace\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"espace\" a été enfoncée');\r\n            let ball1 = scene.getMeshByName(\"player1\");\r\n            player1.disableThisObject();\r\n            ball1.dispose();\r\n            player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,0);\r\n        }\r\n    });\r\n\r\n    // Ajouter un écouteur d'événements pour la touche \"entrée\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.code === 'Backspace') {\r\n            // Code à exécuter lorsque la touche \"entrée\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"entrée\" a été enfoncée');\r\n            let ball2 = scene.getMeshByName(\"player2\");\r\n            player2.disableThisObject();\r\n            ball2.dispose();\r\n            player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',28,8,0);\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\nfunction displayInstruction(){\r\n\r\n}\r\n\r\nfunction displayPinNumber(){\r\n    \r\n     advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI\");\r\n\r\n    var button1 = BABYLON.GUI.Button.CreateSimpleButton(\"but1\", \"Click Me\");\r\n    button1.width = \"1000px\"\r\n    button1.height = \"40px\";\r\n    button1.color = \"white\";\r\n    button1.cornerRadius = 20;\r\n    button1.background = \"green\";\r\n    button1.onPointerUpObservable.add(function() {\r\n        alert(\"you did it!\");\r\n    });\r\n    advancedTexture.addControl(button1);   \r\n    \r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport { name, scene, sceneData, launch };\r\n","let advancedTexture ;\r\nlet advancedTexture2 ;\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nimport { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nvar createScene = function () {\r\n \r\n    // GUI\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   // Création d'une caméra\r\n    const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(0, 5, -18.5), scene);\r\n    //camera.attachControl()\r\n  \r\n\r\n\r\n    let menu = new CustomModels(scene);\r\n    menu.CreateMenu3dScene(0,0,0);\r\n\r\n    displayMenu();\r\n\r\n    scene.debugLayer.show();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\n\r\nfunction displayMenu(){\r\n\r\n\r\n       // Création du GUI\r\n    advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_button\");\r\n    advancedTexture2 = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_text\");\r\n    // Création du bouton Play\r\n    const playButton = BABYLON.GUI.Button.CreateSimpleButton(\"playButton\", \"Play\");\r\n    playButton.width = \"150px\";\r\n    playButton.height = \"40px\";\r\n    playButton.color = \"white\";\r\n    playButton.background = \"grey\";\r\n    playButton.onPointerClickObservable.add(function () {\r\n        // Mettre ici la logique pour le bouton Play\r\n        console.log(\"Play button clicked\");\r\n        killLevel();\r\n        loadNextLevel();\r\n    });\r\n    advancedTexture.addControl(playButton);\r\n\r\n    \r\n     // Création du texte en haut de la page\r\n     const headerText = new BABYLON.GUI.TextBlock();\r\n     headerText.text = \"Titre de la Page\";\r\n     headerText.color = \"white\";\r\n     headerText.fontSize = 24;\r\n     headerText.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n     headerText.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP; // Modifier cette ligne\r\n     headerText.paddingTop = \"-400px\"; // Ajout de 20px de padding en haut\r\n     advancedTexture2.addControl(headerText);\r\n\r\n\r\n  \r\n\r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n    advancedTexture2.dispose();\r\n    advancedTexture.dispose();\r\n    engine.stopRenderLoop();\r\n}\r\n\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel2();\r\n\r\n}\r\n\r\nexport {  scene, launch };","// Importez les modules \"scene1.js\" et \"scene2.js\" pour accéder à leurs fonctionnalités\r\nimport * as scene1 from './scene1.js';\r\nimport * as scene2 from './scene2.js'\r\nimport * as scene3 from './scene3.js'\r\nimport * as scene4 from './scene4.js'\r\nimport * as menu from './Menu.js'\r\n\r\n// Fonction principale\r\nfunction Main() {\r\n\r\n    // Appelez la fonction \"launch\" du module \"level2\" pour lancer la scène 2\r\n    \r\n    //launchLevel1();\r\n   \r\n    //launchLevel2();\r\n   //launchLevel3();\r\n   //launchLevel4();\r\n\r\n   launchLevelMenu();\r\n\r\n   \r\n   \r\n}\r\nfunction launchLevelMenu(){\r\n    \r\n    menu.launch();\r\n}\r\nfunction launchLevel1(){\r\n    \r\n    scene1.launch();\r\n}\r\nfunction launchLevel2(){\r\n    scene2.killLevel();\r\n    scene2.launch();\r\n}\r\n\r\n\r\nfunction launchLevel3(){\r\n    \r\n   scene3.launch();\r\n}\r\n\r\nfunction launchLevel4(){\r\n    \r\n    scene4.launch();\r\n}\r\n\r\n\r\n\r\n\r\n \r\n// Exportez toutes les fonctions d'un coup\r\nexport { Main, launchLevel1, launchLevel2, launchLevel3, launchLevel4 };\r\n\r\n\r\n// Exécute la fonction principale\r\nMain();\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","canvas","document","getElementById","engine","BABYLON","Engine","Scene","CustomModels","constructor","scene","this","CreateTree","x","y","z","tree","tronc","SceneLoader","ImportMesh","meshes","console","log","name","position","Vector3","PhysicsAggregate","PhysicsShapeType","BOX","mass","shape","isTrigger","undefined","boundingBox","CreatePineTree","scaling","shapeBox1","PhysicsShapeBox","Quaternion","shapeBox2","CreateSnowManOnSki","parent","mesh","setParent","CreateSceneProd","CreatePlayer","Zone","plane","width","height","ground","MeshBuilder","CreateGround","subdivisions","addInPlace","rotation","groundMaterial","StandardMaterial","diffuseColor","Color3","material","flatplane","createDeadTree","globalMesh","createSnowTree","createLitleSnowTree","createSnowMan","CreateRampe1","bigMesh","elment","MESH","createSnowMount","element","createFinalScene2","getMeshByName","i","length","CreatePlateform","CreatePlateform_Scene4","CreateBowlingBall","SPHERE","CreateColiseum","CreateMenu3dScene","character","forward","backward","left","right","setupKeyboardInput","forwardI","keys","addEventListener","event","runRenderLoop","transformNode","scale","applyForce","setAngularVelocity","ZeroReadOnly","canvas2","PlayerLevel1","boxBody","testPlayer","enablePlayerControl","box","CreateBox","depth","isVisible","rotationQuaternion","Identity","boxShape","PhysicsBody","PhysicsMotionType","DYNAMIC","setMassProperties","blueMaterial","setCollisionCallbackEnabled","destroyPlayer","control","advancedTexture","killLevel","player","forEach","dispose","cameras","lights","light","stopRenderLoop","reloadlevel","character1","input1","inputJump","animationGroup","setupKeyboardInputPlayer","isKeyPressed","isKeyPressed2","engine2","jump","boxMesh","animationGroups","createPlayer","visibility","Character","ImportMeshAsync","push","animGestionner","play","inputLeft","inputRight","inputLaunch","destroyed","action","input2","destroy","isUpperCase","input","toUpperCase","getLastKeyPressed","lastKeyPressed","sphereBody","rayHelper","shootBall","control2","CharacterController3","raycast","playerMesh","rayOrigin","rayDirection","ray","add","Ray","RayHelper","show","pickWithRay","error","sphere","CreateSphere","segments","diameter","sphereShape","PhysicsShapeSphere","disableThisObject","instanciate","Aggregate","meshIdPromise","createBowlingPin","Promise","resolve","_z","body","meshId","uniqueId","getMeshId","isPinUp","toEulerAngles","Math","abs","player1","player2","advancedTexture2","async","testSearch","listeQuilles1","countPlayer1","playerText","splice","addQuille","launchLevel2","camera","FollowCamera","cameraRotation","viewport","Viewport","camera2","activeCameras","HemisphericLight","havokInstance","HavokPhysics","hk","HavokPlugin","enablePhysics","collisionsEnabled","sceneprod","pineTree","snowTrees","snowLitleTrees","snowMan","ascendingRampe","rampe_1","snowMount","triggerDie","triggerRespawn","GUI","AdvancedDynamicTexture","CreateFullscreenUI","onTriggerCollisionObservable","ev","type","collider","collidedAgainst","eventHandler","sceneData","then","playerMesh2","lockedTarget","catch","render","launchLevel3","triggerEnd","onPointerDown","evt","pickResult","hit","pickedMesh","playerMesh1","launchLevel4","FreeCamera","inertia","angularSensibility","detachControl","model","listeQuilles2","ball1","ball2","code","debugLayer","playButton","Button","CreateSimpleButton","color","background","onPointerClickObservable","addControl","headerText","TextBlock","text","fontSize","horizontalAlignment","Control","HORIZONTAL_ALIGNMENT_CENTER","verticalAlignment","VERTICAL_ALIGNMENT_TOP","paddingTop"],"sourceRoot":""}