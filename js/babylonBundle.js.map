{"version":3,"file":"js/babylonBundle.js","mappings":"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","sources":["webpack://gaw/webpack/bootstrap","webpack://gaw/webpack/runtime/define property getters","webpack://gaw/webpack/runtime/hasOwnProperty shorthand","webpack://gaw/./game/SoundManager.js","webpack://gaw/./game/PlayerLevel2.js","webpack://gaw/./game/sceneSwiming.js","webpack://gaw/./game/cinematique.js","webpack://gaw/./game/CustomModels.js","webpack://gaw/./game/End.js","webpack://gaw/./game/PlayerLevel1.js","webpack://gaw/./game/scene2.js","webpack://gaw/./game/scene3.js","webpack://gaw/./game/PlayerLevel3.js","webpack://gaw/./game/scene4.js","webpack://gaw/./game/cinematique_credit.js","webpack://gaw/./game/Menu.js","webpack://gaw/./game/SceneManager.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","class SoundManager {\r\n    constructor(scene, musicName) {\r\n        this.scene = scene;\r\n        this.musicName = musicName;\r\n        this.musicSound = null;\r\n        this.volumeSlider = null; // New property to keep track of the slider element\r\n\r\n         // Initialize the slider when the scene and slider are ready\r\n         document.addEventListener('DOMContentLoaded', () => {\r\n            this.initVolumeSlider(\"volumeSlider\");\r\n        });\r\n    }\r\n\r\n    initMusic() {\r\n        const music = () => {\r\n            this.musicSound = new BABYLON.Sound(\"\", \"./models/Music/\" + this.musicName, this.scene, null, {\r\n                loop: true,\r\n                autoplay: true\r\n            });\r\n            this.updateVolume(); // Ensure volume is set according to the slider at initialization\r\n        };\r\n\r\n        window.addEventListener('mousemove', () => {\r\n            if (BABYLON.Engine.audioEngine.audioContext.state === 'suspended') {\r\n                BABYLON.Engine.audioEngine.audioContext.resume().then(() => {\r\n                    music();\r\n                });\r\n            } else {\r\n                music();\r\n            }\r\n        }, { once: true });\r\n    }\r\n\r\n    initVolumeSlider(sliderId) {\r\n        this.volumeSlider = document.getElementById(sliderId);\r\n        this.volumeSlider.addEventListener('input', () => {\r\n            this.updateVolume();\r\n        });\r\n    }\r\n\r\n    updateVolume() {\r\n        if (this.musicSound && this.volumeSlider) {\r\n            this.musicSound.setVolume(this.volumeSlider.value / 100);\r\n        }\r\n    }\r\n\r\n    stopMusic() {\r\n        if (this.musicSound) {\r\n            this.musicSound.stop();\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.stopMusic();\r\n        window.removeEventListener('mousemove', this.clickHandler);\r\n        if (this.volumeSlider) {\r\n            this.volumeSlider.removeEventListener('input', this.updateVolume);\r\n        }\r\n        this.scene = null;\r\n        this.musicName = null;\r\n        this.musicSound = null;\r\n        this.clickHandler = null;\r\n        this.volumeSlider = null;\r\n    }\r\n}\r\n\r\nexport default SoundManager;\r\n","\r\nimport CharacterController2 from './CharacterController2.js';\r\nvar engine2 = new BABYLON.Engine(canvas, true);\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel2 {\r\n\r\n    constructor(scene,engine,name,forward,jump,x,y,z) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name = name;\r\n        this.boxBody ;\r\n        this.boxMesh;\r\n        this.animationGroups = [];\r\n        this.forward = forward\r\n        this.jump = jump;\r\n        \r\n        this.createPlayer(x,y,z);\r\n        this.enablePlayerControl(forward,jump);\r\n     \r\n     \r\n    }\r\n    \r\n\r\n    async createPlayer(x,y,z){\r\n\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n        var box = BABYLON.MeshBuilder.CreateBox(this.name, {width: boxW, height: boxH, depth: boxD},this.scene);\r\n        this.boxMesh = box;\r\n        //ADD character disable box visibility \r\n        box.visibility = false;\r\n     \r\n\r\n\r\n\r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        //box.position = new BABYLON.Vector3(0,5,0);\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD),this.scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        this.boxBody = boxBody;\r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1.5})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", this.scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n        this.animationGroups = await this.Character(x, y, z, box);\r\n       //console.log(this.animationGroups);\r\n      \r\n    \r\n     \r\n     \r\n \r\n        return box;\r\n    }\r\n    \r\n  \r\n \r\n    enablePlayerControl(forward,jump){\r\n       let control = new CharacterController2(canvas,this.scene,this.engine,this.boxBody,forward,jump,this.animationGroups);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n   \r\n    async Character(x, y, z, parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        const { meshes, animationGroups } = await BABYLON.SceneLoader.ImportMeshAsync(\"\", \"./models/character1_anim/\", \"animCharacter.glb\", this.scene);\r\n    \r\n        mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n        mesh.name = \"RUNNER\";\r\n        mesh.position = new BABYLON.Vector3(x, y - 1.05, z); // Positionne le modèle une fois chargé\r\n    \r\n        if (parent) {\r\n            mesh.setParent(parent); // Attacher le modèle au parent si spécifié\r\n        }\r\n        this.animationGroups.push(animationGroups) ;\r\n        // Vous pouvez ajouter des manipulations supplémentaires sur le mesh ici, comme l'échelle ou la rotation\r\n    \r\n        console.log(\"Chargement réussi Personnage\", mesh);\r\n \r\n        await this.animGestionner(canvas,this.forward,this.jump,animationGroups)\r\n        \r\n    \r\n        return { animationGroups };\r\n    }\r\n\r\n    async animGestionner(canvas, input1, inputJump, animationGroup) {\r\n        this.keys = {};\r\n        let isKeyPressed = false;\r\n        let isKeyPressed2 = false;\r\n        // Écoute l'événement \"keydown\" (touche enfoncée) sur le canvas.\r\n        canvas.addEventListener('keydown', (event) => {\r\n            if (!this.keys[event.key]) {\r\n                this.keys[event.key] = true;\r\n                // Vérifie si la touche est celle que vous souhaitez traiter\r\n                if (event.key === input1 && !isKeyPressed) {\r\n                    isKeyPressed = true;\r\n                    //console.log(\"Touche enfoncée, action effectuée\");\r\n\r\n\r\n                }\r\n                if (event.key === inputJump && !isKeyPressed2) {\r\n                    isKeyPressed2 = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Écoute l'événement \"keyup\" (touche relâchée) sur le canvas.\r\n        canvas.addEventListener('keyup', (event) => {\r\n            this.keys[event.key] = false;\r\n\r\n            // Ensuite, planifiez la mise à false après une seconde\r\n            if (event.key === inputJump) {\r\n                isKeyPressed2 = false;\r\n\r\n\r\n            }\r\n\r\n            // Vérifie si la touche est celle que vous souhaitez traiter\r\n            if (event.key === input1) {\r\n                isKeyPressed = false;\r\n\r\n            }\r\n        });\r\n\r\n        // Démarre la boucle de rendu du moteur Babylon.js.\r\n\r\n        engine2.runRenderLoop(() => {\r\n\r\n            if (isKeyPressed) {\r\n                isKeyPressed = false;\r\n                console.log(\"VOILA LE GROUPE :\" + animationGroup)\r\n                animationGroup[2].play();\r\n\r\n            }\r\n\r\n            if (isKeyPressed2) {\r\n\r\n                isKeyPressed2 = false;\r\n                //animationGroup[1].play();\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel2;","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nlet soundManager = new SoundManager(scene,\"level2.mp3\");\r\nvar name = \"level3\";\r\nimport SoundManager from './SoundManager.js';\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController2 from './CharacterController2.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport PlayerLevel2 from './PlayerLevel2.js';\r\n\r\nasync function getInitializedHavok() {\r\n    return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n    defaultLoadingScreen();\r\n    const havokInstance = await HavokPhysics();\r\n    soundManager.initMusic();\r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n   \r\n\r\n    // Configurez une caméra\r\n   \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    //var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n\r\n\r\n\r\n    //var devcamera = new DevCamera(canvas, scene);\r\n    // Positionnez le cube où vous le souhaitez\r\n\r\n    triggerEnd(5,11,-620,scene);\r\n    eventHandler(hk);\r\n    //createWaterSurface(scene,100,100,0,20,0);\r\n\r\n    // Ajoutez l'événement de clic à la scène\r\n    scene.onPointerDown = function (evt, pickResult) {\r\n        onPointerDown(evt, pickResult);\r\n    };\r\n\r\n        \r\n    var plane2 = new CustomModels(scene);\r\n    //plane2.CreatePlateform(0,0, -472,678);\r\n    plane2.CreatePlateformlevel3(-7,14, -265);\r\n\r\n\r\n    displayControlUI();\r\n\r\n\r\n     \r\n    let player1 = new PlayerLevel2(scene,engine,\"player1\",'s','f', 0,20,0);\r\n    let player2 = new PlayerLevel2(scene,engine,\"player2\",'k','m',-14,60,0);\r\n   //scene.debugLayer.show();\r\n\r\n   createSkyBox();\r\n\r\n}\r\n\r\nfunction launch() {\r\n   \r\n\r\n    \r\n   \r\n    //var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 1);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(-3, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 1); \r\n   \r\n    //scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n    scene.activeCameras.push(camera)\r\n\r\n\r\n\r\n  \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(\"MESH PLAYER2\"+playerMesh2); // Utilisez playerMesh comme nécessaire\r\n\r\n        let playerMesh1 = scene.getMeshByName(\"player1\");\r\n        //console.log(\"MESH PLAYER2\"+playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh2;\r\n        camera2.lockedTarget = playerMesh1;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n// Fonction appelée lorsqu'un clic est détecté\r\nfunction onPointerDown(evt, pickResult) {\r\n    if (pickResult.hit) {\r\n        // Votre code d'interaction ici, par exemple, changez la couleur de l'objet\r\n        if(pickResult.pickedMesh.name ==\"player\"){\r\n\r\n            pickResult.pickedMesh.material.diffuseColor = new BABYLON.Color3(0, 1, 0); // Vert\r\n        }\r\n       \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction triggerEnd(x,y,z){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(60, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 40;\r\n    var boxH = 40;\r\n    var boxD = 40;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\nfunction eventHandler(hk){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n\r\n        if(ev.collider.transformNode.name ==\"player1\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 111111 PASSSSSS\")\r\n            sceneManager.setcountPlayer1()\r\n            console.log(\"COUNT_WIN PLAYER1:\"+sceneManager.winCountPlayer1)\r\n        }\r\n        if(ev.collider.transformNode.name ==\"player2\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 2 PASSSSSS\")\r\n            sceneManager.setcountPlayer2()\r\n            console.log(\"COUNT_WIN PLAYER2\"+sceneManager.winCountPlayer2)\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n   \r\n   \r\n\r\n            //console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n\r\n        }\r\n      \r\n    });\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n    soundManager.stopMusic();\r\n    soundManager.destroy();\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\n function hideControlUI(){\r\n        // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n \r\n }\r\n\r\n function createSkyBox(){\r\n\r\n    const skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 1000.0 }, scene);\r\n    const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n    skyboxMaterial.backFaceCulling = false;\r\n    skyboxMaterial.disableLighting = true;\r\n    skybox.material = skyboxMaterial;\r\n\r\n    skybox.infiniteDistance = true;\r\n    skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"./models/skybox/skybox3/skybox\", scene);\r\n    skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n   \r\n}\r\n\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n        }, 5000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\n\r\n\r\nfunction createWaterSurface(scene, width, height, posX, posY, posZ) {\r\n    var waterMesh = BABYLON.MeshBuilder.CreateGround(\"waterMesh\", { width: width, height: height }, scene);\r\n    var water = new BABYLON.Material(\"water\", scene, new BABYLON.Vector2(512, 512));\r\n    water.backFaceCulling = true;\r\n    water.bumpTexture = new BABYLON.Texture(\"./models/img/water.jpg\", scene);\r\n    water.windForce = -10;\r\n    water.waveHeight = 0.5;\r\n    water.bumpHeight = 0.1;\r\n    water.waveLength = 0.1;\r\n    water.colorBlendFactor = 0;\r\n    waterMesh.material = water;\r\n    waterMesh.position = new BABYLON.Vector3(posX, posY, posZ); // Ajouter cette ligne pour définir la position\r\n\r\n    // Ajouter des objets à la liste de rendu de l'eau pour réflexions/réfractions\r\n    // Assurez-vous que ces objets existent dans votre scène\r\n    //water.addToRenderList(skybox);\r\n    //water.addToRenderList(ground);\r\n\r\n    return waterMesh;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport { name, scene, sceneData, launch };\r\n","import { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nimport SoundManager from './SoundManager.js';\r\n\r\n\r\nlet advancedTexture ;\r\nlet advancedTexture2 ;\r\n\r\n//const BABYLON = require('babylonjs');\r\n\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nlet soundManager = new SoundManager(scene,\"Menu.mp3\");\r\n//let soundManager = new SoundManager(scene,\"Menu.mp3\");\r\n\r\n\r\nvar createScene = function () {\r\n    defaultLoadingScreen();\r\n    soundManager.initMusic();\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  \r\n    // Création d'une caméra\r\n        const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(0, 8, -50), scene);\r\n        //camera.attachControl()\r\n    screen();\r\n     // Attendre quelques secondes avant de charger le niveau suivant\r\n    setTimeout(function () {\r\n        soundManager.destroy();\r\n        loadNextLevel();\r\n    }, 21000); \r\n    //loadNextLevel();\r\n   \r\n}\r\nasync function screen(){\r\n    var planeOpts = {\r\n        height: 80,\r\n        width: 100,\r\n        sideOrientation: BABYLON.Mesh.DOUBLESIDE\r\n    };\r\n\r\n    // Création de l'avion\r\n    var videoPlane = BABYLON.MeshBuilder.CreatePlane(\"plane\", planeOpts, scene);\r\n    videoPlane.position = new BABYLON.Vector3(0, 0, 0);\r\n\r\n    // Options pour la texture vidéo, y compris la lecture audio\r\n    var videoTextureOptions = {\r\n        loop: false, // Désactivé la boucle\r\n        autoPlay: false, // Désactiver la lecture automatique pour éviter les erreurs\r\n        autoUpdateTexture: true,\r\n        poster: null,\r\n        muted: true // Initialement en mode muet\r\n    };\r\n\r\n    // Création du matériau vidéo\r\n    var videoMaterial = new BABYLON.StandardMaterial(\"m\", scene);\r\n    var videoTexture = new BABYLON.VideoTexture(\"vidtex\", \"./models/video/scrawl text.mp4\", scene, true, false, videoTextureOptions);\r\n    videoMaterial.diffuseTexture = videoTexture;\r\n    videoMaterial.roughness = 1;\r\n    videoMaterial.emissiveColor = new BABYLON.Color3.White();\r\n    videoPlane.material = videoMaterial;\r\n\r\n    // Démarre la vidéo en mode muet pour éviter les restrictions du navigateur\r\n    videoTexture.video.play();\r\n\r\n    // Gestionnaire d'événement pour activer le son après un clic sur le canvas\r\n    var canvas = document.getElementById('renderCanvas');\r\n    canvas.addEventListener('click', function() {\r\n        // Désactiver le mode muet et redémarrer la vidéo\r\n        videoTexture.video.muted = true;\r\n        videoTexture.video.play();\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\nfunction loadNextLevel(){\r\n    \r\n    killLevel();\r\n    sceneManager.launchLevel2();\r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n    soundManager.stopMusic();\r\n    soundManager.destroy();\r\n    engine.stopRenderLoop();\r\n \r\n}\r\n\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n            //displayControlUI();\r\n        }, 3000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\nexport {  scene, launch };","\r\n\r\n\r\nexport class CustomModels {\r\n\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    \r\n    \r\n    /** ######################################################################## LEVEL2 3D MODEL #########################################################################**/\r\n\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    async CreateTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n         \r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n            \r\n        \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    async CreatePineTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        return   BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            meshes[0].scaling.x = 3\r\n            meshes[0].scaling.y = 2\r\n            meshes[0].scaling.z = 4\r\n            tree = meshes[0];\r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n            \r\n           \r\n            tree.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(3, 3, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n            //troncAggregate.shape.\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, shapeBox2, { mass: 0 }, this.scene);\r\n           \r\n            \r\n        \r\n           //return boundingBox;\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n       \r\n    }\r\n\r\n\r\n\r\n    CreateSnowManOnSki(x, y, z,parent) {\r\n        let mesh; // Déclaration de mesh à un niveau supérieur pour qu'il soit accessible en dehors de la fonction de rappel\r\n    \r\n        // Charger le modèle 3D\r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"snowman_on_skis.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi SnowMan\", meshes);\r\n            mesh = meshes[0]; // Assignation de meshes[0] à mesh\r\n            mesh.name = \"SnowMan\";\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne le modèle une fois chargé\r\n            mesh.setParent(parent);\r\n \r\n            //mesh.rotationQuaternion._y = 85;\r\n\r\n          \r\n        }, undefined, undefined, \".glb\");\r\n    \r\n        return { mesh }; // Retourne mesh\r\n    }\r\n    \r\n    \r\n  \r\n    \r\n   \r\n    async CreateSceneProd(x, y, z) {\r\n       \r\n    }\r\n    async CreatePlayer(x, y, z) {\r\n        \r\n    }\r\n      \r\n    async Zone(x, y, z) {\r\n      \r\n     \r\n    }\r\n\r\n    async plane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(-0.1, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n\r\n    async flatplane(x, y, z,width,height,scene) {\r\n      \r\n        let subdivisions = 1\r\n        \r\n        var ground = BABYLON.MeshBuilder.CreateGround(\"ground\", { width, height, subdivisions },scene);\r\n        ground.position.addInPlace(new BABYLON.Vector3(x, y, z)); \r\n        // Créez un quaternion pour représenter la rotation souhaitée\r\n       \r\n       \r\n        ground.rotation = new BABYLON.Vector3(0, 0, 0);\r\n\r\n        \r\n        //create physic impostor\r\n        var groundAggregate =new BABYLON.PhysicsAggregate(ground, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, scene);\r\n        \r\n            // Appliquez la rotation au sol\r\n      \r\n        // create Materials\r\n        var groundMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        groundMaterial.diffuseColor = new BABYLON.Color3(0.92, 0.29, 0.28); // Rouge doux\r\n         // Set position of the ground\r\n        //ground.position = new BABYLON.Vector3(x, y, z);\r\n        \r\n        //add material to the object\r\n        ground.material = groundMaterial;\r\n        //console.log(ground);\r\n        return ground;\r\n     \r\n    }\r\n    async createDeadTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Dead Trees With Snow.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 30\r\n            meshes[0].scaling.y = 20\r\n            meshes[0].scaling.z = 20\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 1, 3),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(30, 30, 30),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n\r\n  \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Snow Tree.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createLitleSnowTree(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Pine Tree with Snow two.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 10\r\n            meshes[0].scaling.y = 10\r\n            meshes[0].scaling.z = 10\r\n\r\n            let globalMesh = meshes[0];\r\n            tronc = meshes[1];\r\n\r\n            tronc.name =\"tronc\"\r\n            console.log(tronc.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n    async createSnowMan(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"SnowManRotated.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi arbre\", meshes);\r\n            \r\n            meshes[0].scaling.x = 1\r\n            meshes[0].scaling.y = 1\r\n            meshes[0].scaling.z = 1\r\n      \r\n            let globalMesh = meshes[0];\r\n            \r\n            tronc = meshes[1];\r\n            tronc.name =\"tronc\"\r\n            console.log(\"SNOWMAN \"+globalMesh.name);\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n            const shapeBox2 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, -1),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(5, 10, 5),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n           \r\n            \r\n           \r\n            globalMesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(tronc, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc,shapeBox2, { mass: 0 }, this.scene);\r\n      \r\n        \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n     \r\n    \r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateRampe1(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"rampe_2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n \r\n            meshes[0].scaling.x = 5\r\n            meshes[0].scaling.y = 5\r\n            meshes[0].scaling.z = 5\r\n   \r\n           \r\n            let mesh = meshes[0];\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            mesh.name =\"Rampe\"\r\n            let elment =meshes[1] ;\r\n           \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n\r\n            var troncAggregate =new BABYLON.PhysicsAggregate(elment, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n           \r\n\r\n            \r\n           // var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n    createSnowMount(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Rock Forms 3 (White).glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            meshes[0].scaling.x = 150\r\n            meshes[0].scaling.y = 150\r\n            meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 4, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[1].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            let element =meshes[1] ;\r\n            element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n        \r\n             \r\n          \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, shapeBox1, { mass: 0 }, this.scene);\r\n            troncAggregate.shape.isTrigger =  true;\r\n\r\n            \r\n            var troncAggregate2 =new BABYLON.PhysicsAggregate(element, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n\r\n\r\n    createFinalScene2(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n       \r\n        \r\n        let bigMesh = BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"finalscene2.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi\", meshes);\r\n           \r\n            //meshes[0].scaling.x = 150\r\n            //meshes[0].scaling.y = 150\r\n            //meshes[0].scaling.z = 150\r\n\r\n\r\n            const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n                new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n                new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n                new BABYLON.Vector3(10, 10, 20),      // dimensions of the box\r\n                this.scene                                // scene of the shape\r\n            );\r\n            \r\n       \r\n           \r\n            let mesh = meshes[0];\r\n            mesh.name =\"tronc\"\r\n            console.log(meshes[2].name);\r\n            //tronc = meshes[1];\r\n            //mesh.name =\"tronc\"\r\n            //let element =meshes[1] ;\r\n            let element = this.scene.getMeshByName(\"Cube (sol)\");\r\n            //let element2 = this.scene.getMeshByName(\"Cube (sol)\") ;\r\n            //let element3 = this.scene.getMeshByUniqueId(769) ;\r\n\r\n            //element.name =\"tronc\"\r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n\r\n            //console.log();\r\n        \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                i++\r\n            }\r\n            \r\n          \r\n          \r\n          \r\n        }, undefined, undefined, \".glb\");\r\n\r\n        bigMesh.position= new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n    \r\n        return {  bigMesh};\r\n    }\r\n    \r\n    \r\n    \r\n    /** ######################################################################## Scene3 3D MODEL #########################################################################**/\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreatePlateform(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"plateforme_scene3.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n        CreatePlateformlevel2(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene3.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform level2\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n\r\n        \r\n\r\n            return { boundingBox };\r\n        }\r\n\r\n\r\n\r\n /** ######################################################################## Scene4 3D MODEL #########################################################################**/\r\n    // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n    CreatePlateform_Scene4(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene4_gameplay_ELEMENT.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingPlatform(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"scene_de_bowling.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi plateform\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n            //tronc = meshes[1];\r\n            mesh.name =\"colision\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            \r\n            let i =1;\r\n            while( i <  meshes.length){\r\n                \r\n                var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                i++\r\n            }\r\n        \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n    CreateBowlingBall(x, y, z) {\r\n        let tree;\r\n        let boundingBox;\r\n        let tronc;\r\n    \r\n        BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Spiky Ball.glb\", this.scene, (meshes) => {\r\n            console.log(\"Chargement réussi ball\", meshes);\r\n        \r\n            let mesh = meshes[0];\r\n          \r\n            mesh.name =\"ball\"\r\n            \r\n        \r\n            mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(mesh, BABYLON.PhysicsShapeType.SPHERE, { mass: 0 }, this.scene);\r\n         \r\n        \r\n        }, undefined, undefined, \".glb\");\r\n\r\n    \r\n\r\n        return { boundingBox };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /** ######################################################################## MENU 3D MODEL #########################################################################**/\r\n\r\n\r\n\r\n        // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n               // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateColiseum(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"coliseum.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi coliseum\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"coliseum\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n    \r\n                //var troncAggregate =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n               // troncAggregate.shape.isTrigger =  true;\r\n    \r\n                \r\n                //var troncAggregate2 =new BABYLON.PhysicsAggregate(tronc, BABYLON.PhysicsShapeType.BOX, { mass: 0 }, this.scene);\r\n\r\n                 \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n          // Crée un modèle d'arbre 3D et le positionne aux coordonnées spécifiées (x, y, z)\r\n        CreateMenu3dScene(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n           \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"fmenu.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi du menu\", meshes);\r\n             \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"fondMenu\"\r\n                \r\n               \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n            \r\n              \r\n              \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n         \r\n        \r\n            return { boundingBox };\r\n        }\r\n\r\n        async Createlevel1(x, y, z) {\r\n            let tree;\r\n            let boundingBox;\r\n            let tronc;\r\n        \r\n            BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"level2Map.glb\", this.scene, (meshes) => {\r\n                console.log(\"Chargement réussi plateform\", meshes);\r\n            \r\n                let mesh = meshes[0];\r\n                //tronc = meshes[1];\r\n                mesh.name =\"colision\"\r\n                \r\n            \r\n                mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n                \r\n                \r\n                let i =1;\r\n                while( i <  meshes.length){\r\n                    \r\n                    var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.scene);\r\n                    //troncAggregate.body.setCollisionCallbackEnabled(true);\r\n                    i++\r\n                }\r\n            \r\n            \r\n            }, undefined, undefined, \".glb\");\r\n    \r\n        \r\n    \r\n            return { boundingBox };\r\n        }\r\n\r\n        \r\nCreatePlateformlevel3(x, y, z,scene) {\r\n    let tree;\r\n    let boundingBox;\r\n    let tronc;\r\n\r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"swimingPool.glb\",this.scene, (meshes) => {\r\n        console.log(\"Chargement réussi plateform level2\", meshes);\r\n    \r\n        let mesh = meshes[0];\r\n        //tronc = meshes[1];\r\n        mesh.name =\"colision\"\r\n        \r\n    \r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        \r\n        let i =1;\r\n        while( i <  meshes.length){\r\n            \r\n            var troncAggregate =new BABYLON.PhysicsAggregate(meshes[i], BABYLON.PhysicsShapeType.MESH, { mass: 0 }, this.cene);\r\n            i++\r\n        }\r\n    \r\n    \r\n    }, undefined, undefined, \".glb\");\r\n\r\n\r\n\r\n    return { boundingBox };\r\n}\r\n\r\n\r\n        \r\n\r\n\r\n\r\n\r\n    \r\n   \r\n}\r\n","import { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport SoundManager from './SoundManager.js';\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nlet soundManager = new SoundManager(scene,\"End.mp3\");\r\n\r\nvar createScene = function () {\r\n    defaultLoadingScreen();\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 4, -12.5), scene);\r\n    camera.attachControl();\r\n    \r\n    let menu = new CustomModels(scene);\r\n    menu.CreateMenu3dScene(-44.927,-1.197,61.948);\r\n\r\n    //camera.attachControl();\r\n    if(sceneManager.winCountPlayer1 > sceneManager.winCountPlayer2){\r\n        playerWin(-4,0,-1);\r\n        playerLoose(2,0,0);\r\n        trophy(-3.5,0,-1.5);\r\n\r\n    }else{\r\n        playerWin(2,0,-1);\r\n        playerLoose(-4,0,0);\r\n        trophy(2.5,0,-1.5);\r\n    }\r\n\r\n    //scene.debugLayer.show();\r\n    //displayControlUI();\r\n    loadEndScene();\r\n    soundManager.initMusic();\r\n    createSkyBox();   \r\n    //hideControlUI();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"End\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\nfunction hideControlUI(){\r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"End\");\r\n\r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n\r\n}\r\nfunction playerLoose(x,y,z){\r\n    \r\n    \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Loose.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi coliseum\", meshes);\r\n     \r\n        let mesh = meshes[0];\r\n       \r\n        mesh.name =\"playerLoose\"\r\n        \r\n       \r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        \r\n    \r\n      \r\n      \r\n    }, undefined, undefined, \".glb\");\r\n\r\n\r\n\r\n}\r\nfunction playerWin(x,y,z){\r\n  \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"victory.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi coliseum\", meshes);\r\n     \r\n        let mesh = meshes[0];\r\n       \r\n        mesh.name =\"playerWin\"\r\n        \r\n       \r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        \r\n    \r\n      \r\n      \r\n    }, undefined, undefined, \".glb\");\r\n}\r\n\r\nfunction loadEndScene(x,y,z){\r\n    \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"recommencer.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi end scene\", meshes);\r\n     \r\n        let mesh = meshes[0];\r\n       \r\n        mesh.name =\"EndScene\"\r\n        \r\n       \r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        \r\n    \r\n      \r\n      \r\n    }, undefined, undefined, \".glb\");\r\n\r\n}\r\nfunction trophy(x,y,z){\r\n    \r\n    BABYLON.SceneLoader.ImportMesh(\"\", \"./models/\", \"Trophy.glb\", scene, (meshes) => {\r\n        console.log(\"Chargement réussi coliseum\", meshes);\r\n     \r\n        let mesh = meshes[0];\r\n       \r\n        mesh.name =\"playerWin\"\r\n        \r\n       \r\n        mesh.position = new BABYLON.Vector3(x, y, z); // Positionne l'arbre aux \r\n        \r\n        \r\n    \r\n      \r\n      \r\n    }, undefined, undefined, \".glb\");\r\n\r\n}\r\n\r\nfunction createSkyBox(){\r\n\r\n    const skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 1000.0 }, scene);\r\n    const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n    skyboxMaterial.backFaceCulling = false;\r\n    skyboxMaterial.disableLighting = true;\r\n    skybox.material = skyboxMaterial;\r\n\r\n    skybox.infiniteDistance = true;\r\n    skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"./models/skybox/skybox1/skybox\", scene);\r\n    skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n   \r\n}\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n            //displayControlUI();\r\n        }, 5000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\n\r\nexport {  scene, launch };\r\n\r\n","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n\r\n\r\n\r\n\r\nexport class PlayerLevel1 {\r\n\r\n    constructor(scene,engine,name,forward,backward,left,right,x,y,z,forward2,backward2,left2,right2) {\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.boxBody ;\r\n\r\n        this.testPlayer(scene,engine,name,x,y,z);\r\n        this.enablePlayerControl(forward,backward,left,right,forward2,backward2,left2,right2);\r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n\r\n        \r\n\r\n\r\n       \r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n\r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        box.isVisible = false;\r\n\r\n        let snowMan = new CustomModels(scene).CreateSnowManOnSki(x,y-0.5,z,box);\r\n      \r\n\r\n        \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        \r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n\r\n        //rotate character\r\n      \r\n      \r\n        this.boxBody = boxBody;\r\n        \r\n     \r\n        \r\n      \r\n     \r\n        \r\n    \r\n       \r\n \r\n        return box;\r\n    \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(forward,backward,left,right,forward2,backward2,left2,right2){\r\n       let control = new CharacterController(canvas2,this.engine,this.boxBody,forward,backward,left,right,forward2,backward2,left2,right2);\r\n    }\r\n    \r\n\r\n    destroyPlayer(){\r\n        \r\n        control = null;\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel1;","\r\nimport CharacterController from './CharacterController.js';\r\nimport { CustomModels } from './CustomModels.js';\r\n\r\nimport {PlayerLevel1} from \"./PlayerLevel1.js\";\r\nimport * as sceneManager from './SceneManager.js';\r\nimport SoundManager from './SoundManager.js';\r\nlet soundManager = new SoundManager(scene,\"level1.mp3\");\r\nlet advancedTexture ;\r\nBABYLON.SceneLoader.ShowLoadingScreen = true; \r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nvar name = \"level2\";\r\nvar value = \"start\";     \r\n//var player = new PlayerLevel1(scene);\r\n\r\nasync function getInitializedHavok() {\r\n  return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n   \r\n    // Ajoutez une lumière hémisphériques\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    \r\n    const havokInstance = await HavokPhysics();\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n    defaultLoadingScreen();\r\n    \r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0),  hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n\r\n    var sceneprod = new CustomModels(scene);\r\n\r\n   soundManager.initMusic();\r\n\r\n    let x = -10;\r\n\r\n\r\n//********************************************************** PART 5 LEVEL ******************************************************************************/////////////////\r\n    //rajoute d'un plane\r\n    \r\n\r\n\r\n    //trigger to die and pass\r\n    triggerDie(-1.79, -1.02, -832.37);\r\n    \r\n\r\n    \r\n\r\n    displayControlUI();\r\n\r\n   //testPlayer();\r\n\r\n\r\n    \r\n   //montrer le layer\r\n   //scene.debugLayer.show();\r\n   \r\n   \r\n\r\n    var place = new CustomModels(scene);\r\n    //place.createFinalScene2(4,-24,-970);\r\n   \r\n    await place.Createlevel1(0,0,-800)\r\n    \r\n\r\n    \r\n   let player = new PlayerLevel1(scene,engine,'player1','z','s','q','d',5,170,0,'w','s','a','d');\r\n\r\n   let player2 = new PlayerLevel1(scene,engine,'player2','ArrowUp','ArrowDown','ArrowLeft','ArrowRight',0,170,0);\r\n \r\n\r\n    \r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n\r\n    \r\n    eventHandler(hk,player);\r\n    createSkyBox();\r\n   return playerMesh;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction getScene() {\r\n    return scene;\r\n}\r\n\r\n\r\n\r\nfunction triggerDie(x,y,z){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(40, 40, 40),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nfunction eventHandler(hk,player){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n        if(ev.collider.transformNode.name ==\"player1\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 111111 PASSSSSS\")\r\n            sceneManager.setcountPlayer1()\r\n            console.log(\"COUNT_WIN PLAYER1:\"+sceneManager.winCountPlayer1)\r\n        }\r\n        if(ev.collider.transformNode.name ==\"player2\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 2 PASSSSSS\")\r\n            sceneManager.setcountPlayer2()\r\n            console.log(\"COUNT_WIN PLAYER2\"+sceneManager.winCountPlayer2)\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"tronc\"){\r\n                console.log(\"End OF the Game\")\r\n                reloadlevel();\r\n               \r\n                player = null;\r\n}      \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n\r\n            console.log(\"COUNT_WIN PLAYER1:\"+sceneManager.winCountPlayer1+\"  COUNT_WIN PLAYER2\"+sceneManager.winCountPlayer2)\r\n           //console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n            player = null;\r\n  \r\n\r\n        }\r\n        if(ev.collidedAgainst.transformNode.name ==\"Die\"){\r\n            console.log(\"YOU DIEEEEEEEEEE\");\r\n            value = \"death\";\r\n            reloadlevel();\r\n            player = null;\r\n           \r\n            //return \"death\";\r\n        }\r\n    });\r\n}\r\n\r\nasync function launch() {\r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1); \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 1); \r\n\r\n    scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh;\r\n        camera2.lockedTarget = playerMesh2;\r\n\r\n        // Lancer le rendu une fois que la scène est prête\r\n        scene.executeWhenReady(() => {\r\n            engine.runRenderLoop(function () {\r\n                scene.render();\r\n            });\r\n        });\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n    // Afficher l'écran de chargement de Babylon.js\r\n    scene.executeWhenReady(() => {\r\n        BABYLON.SceneLoader.ShowLoadingScreen = true;\r\n    });\r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n  \r\n  \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n    soundManager.stopMusic();\r\n\r\n}\r\n\r\nfunction reloadlevel(){\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n\r\n \r\n\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    soundManager.destroy();\r\n    sceneManager.launchLevel3();\r\n\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n   // Récupération de l'élément par son ID\r\n   var level1 = document.getElementById(\"level1\");\r\n\r\n   // Afficher l'élément\r\n   level1.style.display = \"block\";\r\n\r\n}\r\nfunction hideControlUI(){\r\n       // Récupération de l'élément par son ID\r\n   var level1 = document.getElementById(\"level1\");\r\n\r\n   // Afficher l'élément\r\n   level1.style.display = \"none\";\r\n\r\n}\r\n\r\nfunction createSkyBox(){\r\n\r\n    const skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 1000.0 }, scene);\r\n    const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n    skyboxMaterial.backFaceCulling = false;\r\n    skyboxMaterial.disableLighting = true;\r\n    skybox.material = skyboxMaterial;\r\n\r\n    skybox.infiniteDistance = true;\r\n    skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"./models/skybox/skybox1/skybox\", scene);\r\n    skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n   \r\n}\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n        }, 5000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\nexport { name, scene, sceneData, launch,killLevel };\r\n","var canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nlet soundManager = new SoundManager(scene,\"level2.mp3\");\r\nvar name = \"level3\";\r\nimport SoundManager from './SoundManager.js';\r\nimport { CustomModels } from './CustomModels.js';\r\nimport CharacterController2 from './CharacterController2.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport PlayerLevel2 from './PlayerLevel2.js';\r\n\r\nasync function getInitializedHavok() {\r\n    return await HavokPhysics();\r\n}\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n    defaultLoadingScreen();\r\n    const havokInstance = await HavokPhysics();\r\n    soundManager.initMusic();\r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n    \r\n   \r\n\r\n    // Configurez une caméra\r\n   \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n    //var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n\r\n\r\n\r\n    //var devcamera = new DevCamera(canvas, scene);\r\n    // Positionnez le cube où vous le souhaitez\r\n\r\n    triggerEnd(5,11,-620);\r\n    eventHandler(hk);\r\n\r\n    // Ajoutez l'événement de clic à la scène\r\n    scene.onPointerDown = function (evt, pickResult) {\r\n        onPointerDown(evt, pickResult);\r\n    };\r\n\r\n    var plane2 = new CustomModels(scene);\r\n    //plane2.CreatePlateform(0,0, -472,678);\r\n    plane2.CreatePlateformlevel2(-7,14, -265);\r\n    displayControlUI();\r\n\r\n\r\n     \r\n    let player1 = new PlayerLevel2(scene,engine,\"player1\",'s','f', 0,20,0);\r\n    let player2 = new PlayerLevel2(scene,engine,\"player2\",'k','m',-14,20,0);\r\n   //scene.debugLayer.show();\r\n\r\n   createSkyBox();\r\n\r\n}\r\n\r\nfunction launch() {\r\n   \r\n\r\n    \r\n   \r\n    //var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    var camera = new BABYLON.FollowCamera(\"camera\", new BABYLON.Vector3(0, 5, -10), scene);\r\n    camera.cameraRotation = 0;\r\n    camera.viewport = new BABYLON.Viewport(0.5, 0, 0.5, 1);\r\n    \r\n    \r\n    var camera2 = new BABYLON.FollowCamera(\"camera2\", new BABYLON.Vector3(-3, 5, -10), scene);\r\n    camera2.cameraRotation = 0;\r\n    camera2.viewport = new BABYLON.Viewport(0, 0, 0.5, 1); \r\n   \r\n    //scene.activeCameras.push(camera);\r\n    scene.activeCameras.push(camera2);\r\n    scene.activeCameras.push(camera)\r\n\r\n\r\n\r\n  \r\n\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n\r\n    //cam1\r\n    sceneData().then(playerMesh => {\r\n        let playerMesh2 = scene.getMeshByName(\"player2\");\r\n        console.log(\"MESH PLAYER2\"+playerMesh2); // Utilisez playerMesh comme nécessaire\r\n\r\n        let playerMesh1 = scene.getMeshByName(\"player1\");\r\n        //console.log(\"MESH PLAYER2\"+playerMesh); // Utilisez playerMesh comme nécessaire\r\n        \r\n        camera.lockedTarget = playerMesh2;\r\n        camera2.lockedTarget = playerMesh1;\r\n        \r\n    }).catch(error => {\r\n        console.error(error);\r\n    });\r\n\r\n\r\n    engine.runRenderLoop(function () {\r\n        scene.render();\r\n    });\r\n}\r\n\r\n// Fonction appelée lorsqu'un clic est détecté\r\nfunction onPointerDown(evt, pickResult) {\r\n    if (pickResult.hit) {\r\n        // Votre code d'interaction ici, par exemple, changez la couleur de l'objet\r\n        if(pickResult.pickedMesh.name ==\"player\"){\r\n\r\n            pickResult.pickedMesh.material.diffuseColor = new BABYLON.Color3(0, 1, 0); // Vert\r\n        }\r\n       \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction triggerEnd(x,y,z){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(60, 2, 2000),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n\r\n    var boxW = 40;\r\n    var boxH = 40;\r\n    var boxD = 40;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Ending\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n        \r\n        \r\n  \r\n    var Aggregate2 =new BABYLON.PhysicsAggregate(box, BABYLON.PhysicsShapeType.MESH, { mass: 0 }, scene);\r\n    Aggregate2.shape.isTrigger =  true;\r\n\r\n    \r\n}\r\n\r\n\r\nfunction eventHandler(hk){\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n\r\n        if(ev.collider.transformNode.name ==\"player1\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 111111 PASSSSSS\")\r\n            sceneManager.setcountPlayer1()\r\n            console.log(\"COUNT_WIN PLAYER1:\"+sceneManager.winCountPlayer1)\r\n        }\r\n        if(ev.collider.transformNode.name ==\"player2\" && ev.collidedAgainst.transformNode.name == \"Ending\"){\r\n            console.log(\"PLAYER 2 PASSSSSS\")\r\n            sceneManager.setcountPlayer2()\r\n            console.log(\"COUNT_WIN PLAYER2\"+sceneManager.winCountPlayer2)\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n   \r\n   \r\n\r\n            //console.log(\"YOU WINNNNNNN\")\r\n            killLevel();\r\n            loadNextLevel();\r\n\r\n        }\r\n      \r\n    });\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchLevel4();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n    soundManager.stopMusic();\r\n    soundManager.destroy();\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\n function hideControlUI(){\r\n        // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level2\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n \r\n }\r\n\r\n function createSkyBox(){\r\n\r\n    const skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 1000.0 }, scene);\r\n    const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n    skyboxMaterial.backFaceCulling = false;\r\n    skyboxMaterial.disableLighting = true;\r\n    skybox.material = skyboxMaterial;\r\n\r\n    skybox.infiniteDistance = true;\r\n    skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"./models/skybox/skybox3/skybox\", scene);\r\n    skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n   \r\n}\r\n\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n        }, 5000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\n\r\nexport { name, scene, sceneData, launch };\r\n","\r\nimport CharacterController3 from './CharacterController3.js';\r\n\r\nvar canvas2 = document.getElementById(\"renderCanvas\");\r\n//var engine2 = new BABYLON.Engine(canvas2, true);\r\n\r\n//variables\r\n\r\n\r\n\r\nexport class PlayerLevel3 {\r\n\r\n    constructor(scene,engine,name,left,right,jump,action,x,y,z,inputLeft2, inputRight2) {\r\n        this.control;\r\n        this.scene = scene;\r\n        this.engine = engine;\r\n        this.name= name;\r\n        this.boxBody ;\r\n        this.sphereBody;\r\n        this.box;\r\n        this.rayHelper;\r\n        //this.testPlayer(scene,engine,name,x,y,z);\r\n      \r\n        this.shootBall(left,right,jump,action,x,y,z);\r\n    \r\n        this.enablePlayerControl(left,right,jump,action,inputLeft2, inputRight2);\r\n\r\n        \r\n     \r\n     \r\n    }\r\n    \r\n\r\n    testPlayer(scene,engine,name,x,y,z){\r\n        var boxW = 2;\r\n        var boxH = 2;\r\n        var boxD = 2;\r\n        \r\n       \r\n        var box = BABYLON.MeshBuilder.CreateBox(name, {width: boxW, height: boxH, depth: boxD},scene);\r\n        this.box =box;\r\n   \r\n        box.rotationQuaternion = BABYLON.Quaternion.Identity();\r\n\r\n        box.position = new BABYLON.Vector3(x,y,z);\r\n        var boxShape = new BABYLON.PhysicsShapeBox(new BABYLON.Vector3(0,0,0), BABYLON.Quaternion.Identity(), new BABYLON.Vector3(boxW, boxH, boxD), scene);\r\n        var boxBody = new BABYLON.PhysicsBody(box, BABYLON.PhysicsMotionType.DYNAMIC, false, scene);\r\n    \r\n        boxBody.shape = boxShape;\r\n        boxBody.setMassProperties({mass : 1})\r\n    \r\n    \r\n        //add create material add tothe cube\r\n        var blueMaterial = new BABYLON.StandardMaterial(\"groundMaterial\", scene);\r\n        blueMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1); // Rouge doux\r\n        box.material = blueMaterial;\r\n       \r\n        \r\n        boxBody.setCollisionCallbackEnabled(true)\r\n      \r\n       \r\n        this.boxBody = boxBody;\r\n        \r\n    \r\n     \r\n     \r\n        \r\n    \r\n\r\n      \r\n        \r\n    }\r\n  \r\n \r\n    enablePlayerControl(inputLeft,inputRight,jump,action,inputLeft2, inputRight2){\r\n\r\n        let control2 = new CharacterController3(canvas2,this.engine,this.sphereBody, inputRight,inputLeft,jump,action,inputLeft2, inputRight2);\r\n        this.control = control2;\r\n     \r\n      \r\n    }\r\n\r\n   \r\n    shootBall(left,right,jump,action,x,y,z){\r\n        let segments = 16;\r\n        let diameter = 2;\r\n\r\n        const sphere = BABYLON.MeshBuilder.CreateSphere(this.name, { segments, diameter }, this.scene);\r\n        sphere.position = new BABYLON.Vector3(x,y,z);\r\n\r\n       \r\n        var sphereShape = new BABYLON.PhysicsShapeSphere(new BABYLON.Vector3(0,0,0),diameter-1,this.scene);\r\n        var sphereBody = new BABYLON.PhysicsBody(sphere, BABYLON.PhysicsMotionType.DYNAMIC, false, this.scene);\r\n        sphereBody.shape = sphereShape;\r\n        sphereBody.setMassProperties({mass : 2});\r\n\r\n       \r\n        \r\n        this.sphereBody = sphereBody;\r\n       \r\n    }\r\n    disableThisObject(){\r\n\r\n        this.control.destroy();\r\n        this.control = null;\r\n        \r\n  \r\n       \r\n    }\r\n  \r\n    \r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default PlayerLevel3;","import { CustomModels } from './CustomModels.js';\r\nimport CharacterController3 from './CharacterController3.js';\r\nimport PlayerLevel3 from './PlayerLevel3.js';\r\nimport BowlingPin from './BowlingPin.js';\r\nimport * as sceneManager from './SceneManager.js';\r\nimport SoundManager from './SoundManager.js';\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nlet soundManager = new SoundManager(scene,\"level3.mp3\");\r\nvar name = \"level4\";\r\nlet advancedTexture ;\r\n\r\n\r\n\r\n\r\nlet player1;\r\nlet player2;\r\n\r\nlet countPlayer1 =0;\r\nlet countPlayer2 =0;\r\n\r\n\r\n\r\nasync function sceneData() {\r\n    //activer la physique sur la scene \r\n    defaultLoadingScreen();\r\n    const havokInstance = await HavokPhysics();\r\n    soundManager.initMusic();\r\n\r\n    // pass the engine to the plugin\r\n    const hk = new BABYLON.HavokPlugin(true, havokInstance);\r\n\r\n\r\n    scene.enablePhysics(new BABYLON.Vector3(0, -9.81, 0), hk);\r\n    scene.collisionsEnabled = true;\r\n       \r\n    \r\n    \r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   \r\n\r\n    var model = new CustomModels(scene);\r\n    \r\n    var listeQuilles1 = [];\r\n\r\n    \r\n\r\n    let add =13 ;\r\n    var listeQuilles2 = [];\r\n   \r\n    \r\n    \r\n\r\n\r\n \r\n   // console.log(countPlayer1);\r\n     player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,-8,'d','a');\r\n     player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',25,8,-8);\r\n\r\n     //let pin = new BowlingPin(scene,0,2,19.397);\r\n    \r\n   \r\n    let ball1 = scene.getMeshByName(\"player1\");\r\n    \r\n    displayControlUI();\r\n    //CreateBowlingBall(0,6,0);\r\n\r\n    eventHandler(hk,player1,player2);\r\n\r\n   // model.CreatePlateform_Scene4();\r\n    model.CreateBowlingPlatform();\r\n    listeQuilles1 =  addQuille(listeQuilles1,0,0,-8);\r\n    listeQuilles2 =  addQuille(listeQuilles2,25,0,-8);\r\n\r\n    testSearch(listeQuilles1,countPlayer1,\"player1\");\r\n    testSearch2(listeQuilles2,countPlayer2,\"player2\");\r\n\r\n    \r\n        \r\n\r\n    let ball = scene.getMeshByName(\"ball\");\r\n    \r\n    \r\n\r\n  \r\n    /*\r\n    //trigger Player1\r\n    triggerRespawn(0,2,97.43,30, 30, 10);\r\n    triggerRespawn(7.5,2,48,1, 30,90);\r\n    triggerRespawn(-7.5,2,48,1, 30,90);\r\n\r\n    //trigger Player2\r\n    triggerRespawn(30,2,97.43,30, 30, 10);\r\n    triggerRespawn(20,2,48,1, 30,90);\r\n    triggerRespawn(35.5,2,48,1, 30,90);*/\r\n\r\n    respawnPlayerInput(player1,player2);\r\n\r\n    \r\n    createSkyBox();\r\n\r\n\r\n}\r\n\r\nfunction launch() {\r\n      \r\n    var camera = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(0, 5, -22), scene);\r\n    camera.inertia = 0;\r\n    camera.angularSensibility = 0;\r\n    camera.detachControl(canvas);\r\n    camera.cameraRotation = 0;\r\n    scene.activeCameras.push(camera);\r\n    \r\n    camera.viewport = new BABYLON.Viewport(0, 0, 0.5, 1);\r\n    scene.activeCameras.push(camera);\r\n\r\n\r\n    var camera2 = new BABYLON.FreeCamera(\"camera\", new BABYLON.Vector3(25, 4, -23), scene);\r\n    camera2.inertia = 0;\r\n    camera2.angularSensibility = 0;\r\n    camera2.detachControl(canvas);\r\n    camera2.cameraRotation = 0;\r\n    scene.activeCameras.push(camera2);\r\n    camera2.viewport = new BABYLON.Viewport(0.5,0 , 0.5, 1);\r\n    scene.activeCameras.push(camera2);\r\n    \r\n   \r\n\r\n \r\n\r\n    sceneData();\r\n  \r\n\r\n    let playerMesh = scene.getMeshByName(\"player1\");\r\n    let playerMesh2 = scene.getMeshByName(\"player2\");\r\n    //console.log(playerMesh2);\r\n    //console.log(playerMesh); // Utilisez playerMesh comme nécessaire\r\n    \r\n    camera.lockedTarget = playerMesh;\r\n    //camera2.lockedTarget = playerMesh2;\r\n\r\n    engine.runRenderLoop(function () {\r\n\r\n        scene.render();\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction triggerRespawn(x,y,z,sizeX,sizeY,sizeZ){\r\n\r\n    const shapeBox1 = new BABYLON.PhysicsShapeBox(\r\n        new BABYLON.Vector3(0, 0, 0),        // center of the box\r\n        new BABYLON.Quaternion(0, 0, 0, 1),  // rotation of the box\r\n        new BABYLON.Vector3(sizeX,sizeY,sizeZ),      // dimensions of the box\r\n        scene                                // scene of the shape\r\n    );\r\n    \r\n\r\n    //let RainBowMesh = scene.getMeshByName(\"RainBow\");\r\n\r\n    var boxW = 2;\r\n    var boxH = 2;\r\n    var boxD = 2;\r\n\r\n    var box = BABYLON.MeshBuilder.CreateBox(\"Respawn\", {width: boxW, height: boxH, depth: boxD},scene);\r\n    box.isVisible = false;\r\n\r\n    box.position.x = x;\r\n    box.position.y = y;\r\n    box.position.z = z;\r\n    //box.position = BABYLON.Vector3(4,-24,-850);    \r\n        \r\n    var Aggregate =new BABYLON.PhysicsAggregate(box, shapeBox1, { mass: 0 },scene);\r\n    Aggregate.shape.isTrigger =  true;\r\n    \r\n\r\n    \r\n    //Aggregate.dispose();\r\n    \r\n}\r\n\r\nfunction eventHandler(hk,player1,player2){\r\n\r\n    \r\n    hk.onTriggerCollisionObservable.add((ev) => {\r\n        // console.log(ev);\r\n        console.log(ev.type, ':', ev.collider.transformNode.name, '-', ev.collidedAgainst.transformNode.name);\r\n       \r\n        if(ev.collidedAgainst.transformNode.name ==\"Ending\"){\r\n            console.log(\"YOU WINNNNNNN\")\r\n            //killLevel();\r\n            //loadNextLevel();\r\n            player1 = null;\r\n  \r\n\r\n        }\r\n\r\n        if(ev.collidedAgainst.transformNode.name ==\"Respawn\" && ( ev.collider.transformNode.name == \"player1\" || ev.collider.transformNode.name == \"player2\" ) ){\r\n            console.log(\"YOU RESPAWNWNNN\");\r\n\r\n            if(ev.collider.transformNode.name == \"player1\"){\r\n                let ball1 = scene.getMeshByName(\"player1\");\r\n         \r\n                player1.disableThisObject();\r\n                //player1 = null;\r\n                ball1.dispose();\r\n                \r\n                player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',-5,5,0);\r\n            \r\n     \r\n            }else{\r\n                let ball2 = scene.getMeshByName(\"player2\");\r\n                player2.disableThisObject();\r\n                //player2 = null;\r\n                ball2.dispose()\r\n\r\n                player2= new PlayerLevel3(scene,engine,\"player2\",'j','l','i','Enter',28,5,0);\r\n              \r\n            }\r\n          \r\n         \r\n\r\n            \r\n          \r\n        }\r\n     \r\n    });\r\n\r\n   //WinParty\r\n\r\n   \r\n}\r\n\r\n\r\n\r\n\r\nasync function testSearch(listeQuilles1,countPlayer,playerText){\r\n\r\n \r\n    engine.runRenderLoop(async () => {\r\n\r\n        for(let i=0;i<listeQuilles1.length; i++){\r\n            const meshIdQuille = await listeQuilles1[i].getMeshId();\r\n            const quille =  listeQuilles1[i];\r\n            //console.log(meshIdQuille);\r\n            /*\r\n            if(meshIdQuille == id){\r\n                \r\n                quille.disableThisObject();\r\n            \r\n            }*/\r\n            if(!quille.isPinUp()){\r\n                countPlayer1++;\r\n                \r\n                listeQuilles1.splice(i, 1);\r\n\r\n                // Décrémenter i pour compenser la suppression de l'élément\r\n                i--;\r\n                    \r\n            };\r\n        }\r\n        //console.log(\"compteur \"+playerText+\" \" +countPlayer1);\r\n        document.getElementById(\"pin1\").innerHTML = countPlayer1 + \"/93 PINS\";\r\n\r\n  \r\n        if(countPlayer1 >=93){\r\n            sceneManager.setcountPlayer1()\r\n            //console.log(\"PLAYER1:\"+sceneManager.winCountPlayer1)\r\n            //console.log(\"PLAYER2:\"+sceneManager.winCountPlayer2)\r\n        }\r\n        \r\n      \r\n   \r\n        if(countPlayer1 >= 93 ){\r\n            killLevel();\r\n            loadNextLevel();\r\n        }\r\n       \r\n\r\n        // Utiliser setInterval pour appeler la fonction de mise à jour à intervalles réguliers (par exemple, toutes les 1000 millisecondes)\r\n        //setInterval(updateCountPins, 1000); //\r\n        \r\n\r\n\r\n    })\r\n   \r\n  \r\n    \r\n \r\n}\r\nasync function testSearch2(listeQuilles1,countPlayer,playerText){\r\n\r\n \r\n    engine.runRenderLoop(async () => {\r\n\r\n        for(let i=0;i<listeQuilles1.length; i++){\r\n            const meshIdQuille = await listeQuilles1[i].getMeshId();\r\n            const quille =  listeQuilles1[i];\r\n            //console.log(meshIdQuille);\r\n            /*\r\n            if(meshIdQuille == id){\r\n                \r\n                quille.disableThisObject();\r\n            \r\n            }*/\r\n            if(!quille.isPinUp()){\r\n                countPlayer2++;\r\n                \r\n                listeQuilles1.splice(i, 1);\r\n\r\n                // Décrémenter i pour compenser la suppression de l'élément\r\n                i--;\r\n                    \r\n            };\r\n        }\r\n        //console.log(\"compteur \"+playerText+\" \" +countPlayer2);\r\n\r\n\r\n        document.getElementById(\"pin2\").innerHTML = countPlayer2 + \"/93 PINS\";\r\n  \r\n     \r\n        if(countPlayer2 >92){\r\n            sceneManager.setcountPlayer2()\r\n            //console.log(\"PLAYER1:\"+sceneManager.winCountPlayer1)\r\n            //console.log(\"PLAYER2\"+sceneManager.winCountPlayer2)\r\n\r\n        }\r\n   \r\n        if(countPlayer2 >= 93){\r\n            killLevel();\r\n            loadNextLevel();\r\n        }\r\n\r\n        // Utiliser setInterval pour appeler la fonction de mise à jour à intervalles réguliers (par exemple, toutes les 1000 millisecondes)\r\n        //setInterval(updateCountPins, 1000); //\r\n        \r\n\r\n\r\n    })\r\n   \r\n  \r\n    \r\n \r\n}\r\n\r\n\r\n\r\nfunction addQuille( listeQuilles1,x,y,z){\r\n\r\n\r\n    listeQuilles1 = [\r\n        //-3\r\n        new BowlingPin(scene, 0.25+x, 2+y,21+z),\r\n        //-2\r\n             \r\n        //new BowlingPin(scene, 0, 2, 21.5),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y,21.5+z),\r\n        new BowlingPin(scene, 0.50+x, 2+y,21.5+z),\r\n        //new BowlingPin(scene, 0.60, 2,21.5),\r\n      \r\n\r\n\r\n        //-1\r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0.25+x, 2+y, 22+z),\r\n        new BowlingPin(scene, 0.60+x, 2+y,22+z),\r\n        \r\n      \r\n\r\n\r\n        //0\r\n        new BowlingPin(scene, -0.5+x, 2+y, 22.5+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 22.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,22.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,22.5+z),\r\n        \r\n        //1\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23+z),\r\n       \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23+z),\r\n   \r\n        //2\r\n        new BowlingPin(scene, -0.5+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 23.5+z),\r\n\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 23.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y,23.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,23.5+z),\r\n      \r\n        \r\n        //3\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24+z),\r\n   \r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24+z),\r\n        \r\n        //4\r\n        new BowlingPin(scene, -0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 24.5+z),\r\n      \r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y,24.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 24.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 24.5+z),\r\n       \r\n\r\n\r\n        \r\n        //5\r\n\r\n        new BowlingPin(scene, -0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25+z),\r\n      \r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25+z),\r\n        //new BowlingPin(scene, 4, 2, 25),\r\n        \r\n        \r\n\r\n       //6\r\n       \r\n        new BowlingPin(scene, -0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 25.5+z),\r\n        \r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 25.5+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 25.5+z),\r\n   \r\n        \r\n\r\n        //7\r\n        new BowlingPin(scene, -0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -1.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, -4+x, 2+y, 26+z),\r\n \r\n                \r\n        \r\n        new BowlingPin(scene, 0+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 0.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 1.5+x, 2+y, 26+z),  \r\n        new BowlingPin(scene, 2+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 2.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 3.5+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4+x, 2+y, 26+z),\r\n        new BowlingPin(scene, 4.5+x, 2+y, 26+z),\r\n\r\n        //listeQuilles1.forEach(pin => pin.position.y += 5)\r\n    \r\n     \r\n    ];\r\n    return listeQuilles1;\r\n}\r\n\r\nfunction respawnPlayerInput() {\r\n    // Ajouter un écouteur d'événements pour la touche \"espace\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.key === 'Shift') {\r\n            // Code à exécuter lorsque la touche \"espace\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"espace\" a été enfoncée');\r\n            let ball1 = scene.getMeshByName(\"player1\");\r\n            player1.disableThisObject();\r\n            ball1.dispose();\r\n            player1 = new PlayerLevel3(scene,engine,\"player1\",'q','d','s',' ',0,8,-8,'d','a');\r\n            \r\n        //document.getElementById(\"pin1\").innerText = countPlayer1+\"/93 PINS\";\r\n        \r\n        // Modifier le texte de l'élément avec l'identifiant \"pin2\"\r\n  \r\n        }\r\n    });\r\n\r\n    // Ajouter un écouteur d'événements pour la touche \"entrée\"\r\n    document.addEventListener('keydown', function(event) {\r\n        if (event.code === 'Backspace') {\r\n            // Code à exécuter lorsque la touche \"entrée\" est enfoncée\r\n            // Par exemple :\r\n            console.log('La touche \"entrée\" a été enfoncée');\r\n            let ball2 = scene.getMeshByName(\"player2\");\r\n            player2.disableThisObject();\r\n            ball2.dispose();\r\n            player2 = new PlayerLevel3(scene,engine,\"player2\",'ArrowLeft','ArrowRight','i','Enter',25,8,-8);\r\n            //document.getElementById(\"pin2\").innerText = countPlayer2+\"/93 PINS\";\r\n       \r\n        }\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\nfunction loadNextLevel(){\r\n    \r\n    sceneManager.launchEnd();\r\n\r\n}\r\nfunction killLevel(){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n\r\n    \r\n    engine.stopRenderLoop();\r\n    hideControlUI();\r\n    soundManager.stopMusic();\r\n    soundManager.destroy();\r\n}\r\n\r\nfunction displayControlUI(){\r\n  \r\n    // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level3\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"block\";\r\n \r\n }\r\n function hideControlUI(){\r\n        // Récupération de l'élément par son ID\r\n    var level1 = document.getElementById(\"level3\");\r\n \r\n    // Afficher l'élément\r\n    level1.style.display = \"none\";\r\n \r\n }\r\n\r\n function createSkyBox(){\r\n\r\n    const skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 1000.0 }, scene);\r\n    const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n    skyboxMaterial.backFaceCulling = false;\r\n    skyboxMaterial.disableLighting = true;\r\n    skybox.material = skyboxMaterial;\r\n\r\n    skybox.infiniteDistance = true;\r\n    skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"./models/skybox/skybox2/skybox\", scene);\r\n    skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n   \r\n}\r\n\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n        }, 5000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\n\r\n\r\nexport { name, scene, sceneData, launch };\r\n","import { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nimport SoundManager from './SoundManager.js';\r\n\r\n\r\nlet advancedTexture ;\r\nlet advancedTexture2 ;\r\n\r\n//const BABYLON = require('babylonjs');\r\n\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nlet soundManager = new SoundManager(scene,\"Portal_2_End_Credits.mp3\");\r\n//let soundManager = new SoundManager(scene,\"Menu.mp3\");\r\n\r\n\r\nvar createScene = function () {\r\n    defaultLoadingScreen();\r\n    soundManager.initMusic();\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n  \r\n    // Création d'une caméra\r\n        const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(0, 8, -50), scene);\r\n        //camera.attachControl()\r\n    screen();\r\n     // Attendre quelques secondes avant de charger le niveau suivant\r\n    setTimeout(function () {\r\n        soundManager.destroy();\r\n        loadNextLevel();\r\n    }, 60000); \r\n    //loadNextLevel();\r\n   \r\n}\r\nasync function screen(){\r\n    var planeOpts = {\r\n        height: 80,\r\n        width: 100,\r\n        sideOrientation: BABYLON.Mesh.DOUBLESIDE\r\n    };\r\n\r\n    // Création de l'avion\r\n    var videoPlane = BABYLON.MeshBuilder.CreatePlane(\"plane\", planeOpts, scene);\r\n    videoPlane.position = new BABYLON.Vector3(0, 0, 0);\r\n\r\n    // Options pour la texture vidéo, y compris la lecture audio\r\n    var videoTextureOptions = {\r\n        loop: false, // Désactivé la boucle\r\n        autoPlay: false, // Désactiver la lecture automatique pour éviter les erreurs\r\n        autoUpdateTexture: true,\r\n        poster: null,\r\n        muted: true // Initialement en mode muet\r\n    };\r\n\r\n    // Création du matériau vidéo\r\n    var videoMaterial = new BABYLON.StandardMaterial(\"m\", scene);\r\n    var videoTexture = new BABYLON.VideoTexture(\"vidtex\", \"./models/video/Ending crédits.mp4\", scene, true, false, videoTextureOptions);\r\n    videoMaterial.diffuseTexture = videoTexture;\r\n    videoMaterial.roughness = 1;\r\n    videoMaterial.emissiveColor = new BABYLON.Color3.White();\r\n    videoPlane.material = videoMaterial;\r\n\r\n    // Démarre la vidéo en mode muet pour éviter les restrictions du navigateur\r\n    videoTexture.video.play();\r\n\r\n    // Gestionnaire d'événement pour activer le son après un clic sur le canvas\r\n    var canvas = document.getElementById('renderCanvas');\r\n    canvas.addEventListener('click', function() {\r\n        // Désactiver le mode muet et redémarrer la vidéo\r\n        videoTexture.video.muted = true;\r\n        videoTexture.video.play();\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\nfunction launch(){\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\nfunction loadNextLevel(){\r\n    \r\n    killLevel();\r\n    location.reload();\r\n    //sceneManager.launchLevelMenu();\r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n    soundManager.stopMusic();\r\n    soundManager.destroy();\r\n    engine.stopRenderLoop();\r\n \r\n}\r\n\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n            //displayControlUI();\r\n        }, 3000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\nexport {  scene, launch };","import { CustomModels } from './CustomModels.js';\r\nimport * as sceneManager from './SceneManager.js'\r\nimport SoundManager from './SoundManager.js';\r\n\r\nlet advancedTexture ;\r\nlet advancedTexture2 ;\r\n\r\n//const BABYLON = require('babylonjs');\r\n\r\n\r\n\r\nvar canvas = document.getElementById(\"renderCanvas\");\r\nvar engine = new BABYLON.Engine(canvas, true);\r\nvar scene = new BABYLON.Scene(engine);\r\nlet soundManager = new SoundManager(scene,\"Menu.mp3\");\r\n\r\n//\r\nvar createScene = function () {\r\n\r\n  \r\n    defaultLoadingScreen();\r\n\r\n\r\n   \r\n    // GUI\r\n    // Ajoutez une lumière\r\n    var light = new BABYLON.HemisphericLight(\"light\", new BABYLON.Vector3(0, 1, 0), scene);\r\n\r\n   // Création d'une caméra\r\n    const camera = new BABYLON.FreeCamera('camera', new BABYLON.Vector3(46, 4, -76), scene);\r\n    camera.setTarget(new BABYLON.Vector3(46, 4.2, -75));\r\n    //camera.attachControl()\r\n  \r\n   //screen();\r\n\r\n    let menu = new CustomModels(scene);\r\n    menu.CreateMenu3dScene(0,0,0);\r\n\r\n    displayMenu();\r\n   \r\n    createSkyBox();\r\n \r\n\r\n    //createMusicButton();\r\n    //scene.debugLayer.show();\r\n    return scene;\r\n};\r\nfunction launch(){\r\n\r\n    createScene();\r\n\r\n    engine.runRenderLoop(function () {\r\n        \r\n        scene.render();\r\n    });\r\n    \r\n\r\n}\r\n\r\nfunction displayMenu(){\r\n\r\n\r\n  \r\n    advancedTexture2 = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_text\");\r\n\r\n    button();\r\n    buttonCredit();\r\n    \r\n    // Création du texte en haut de la page\r\n    const headerText = new BABYLON.GUI.TextBlock();\r\n    headerText.text = \"The Cursed Olympic Games\";\r\n    headerText.color = \"black\";\r\n    headerText.fontSize = 100;\r\n    headerText.fontFamily = \"UnifrakturCook\";\r\n   \r\n   // headerText.fontFamily = \"Pirata One\"; // Utiliser la police Pirata One ici\r\n    headerText.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    headerText.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_TOP; // Modifier cette ligne\r\n    headerText.paddingTop = \"-500px\"; // Ajout de 20px de padding en haut\r\n    advancedTexture2.addControl(headerText);\r\n\r\n\r\n\r\n\r\n  \r\n\r\n}\r\n\r\nfunction killLevel(player){\r\n    //scene.dispose();\r\n     \r\n    scene.meshes.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n   \r\n    scene.cameras.forEach(function(mesh) {\r\n        mesh.dispose();\r\n    });\r\n    // Supprimer toutes les lumières de la scène\r\n    scene.lights.forEach(function(light) {\r\n        light.dispose();\r\n    });\r\n    advancedTexture2.dispose();\r\n    advancedTexture.dispose();\r\n    engine.stopRenderLoop();\r\n    soundManager.stopMusic();\r\n    soundManager.destroy();\r\n}\r\n\r\nfunction loadNextLevel(){\r\n    //sceneManager.launchLevel2();\r\n    soundManager.stopMusic();\r\n    sceneManager.launchStart();\r\n}\r\n\r\nfunction loadCredits(){\r\n    //sceneManager.launchLevel2();\r\n    soundManager.stopMusic();\r\n    sceneManager.launchCredit();\r\n}\r\n\r\nfunction button(){\r\n    // Création du GUI\r\nadvancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_button\");\r\n\r\n\r\n// Création du bouton Play\r\nconst playButton = BABYLON.GUI.Button.CreateSimpleButton(\"playButton\", \"Play\");\r\nplayButton.width = \"150px\";\r\nplayButton.height = \"80px\";\r\nplayButton.color = \"white\";\r\nplayButton.cornerRadius = 20; // Coins arrondis\r\nplayButton.background = \"grey\";\r\n\r\n// Style supplémentaire\r\nplayButton.thickness = 2; // Épaisseur du contour\r\nplayButton.shadowOffsetX = 4; // Décalage de l'ombre en X\r\nplayButton.shadowOffsetY = 4; // Décalage de l'ombre en Y\r\nplayButton.shadowColor = \"#000000\"; // Couleur de l'ombre\r\nplayButton.shadowBlur = 8; // Flou de l'ombre\r\n\r\n// Ajouter une animation au survol\r\nplayButton.pointerEnterAnimation = function () {\r\n    playButton.background = \"white\";\r\n    playButton.color = \"grey\";\r\n   \r\n};\r\nplayButton.pointerOutAnimation = function () {\r\n    playButton.background = \"grey\";\r\n    playButton.color = \"white\";\r\n};\r\n\r\nplayButton.children[0].fontFamily = \"UnifrakturCook\";\r\n\r\n// Logique du bouton Play\r\nplayButton.onPointerClickObservable.add(function () {\r\n    console.log(\"Play button clicked\");\r\n    killLevel();\r\n    soundManager.stopMusic();\r\n    loadNextLevel();\r\n});\r\n\r\nadvancedTexture.addControl(playButton);\r\n\r\n}\r\n\r\nfunction buttonCredit(){\r\n    // Création du GUI\r\n//advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"UI_button\");\r\n\r\n\r\n// Création du bouton Play\r\nconst playButton = BABYLON.GUI.Button.CreateSimpleButton(\"playButton\", \"C r e d i t s\");\r\nplayButton.width = \"150px\";\r\nplayButton.height = \"80px\";\r\nplayButton.color = \"white\";\r\nplayButton.cornerRadius = 20; // Coins arrondis\r\nplayButton.background = \"grey\";\r\nplayButton.top = \"100px\";\r\n\r\n// Style supplémentaire\r\nplayButton.thickness = 2; // Épaisseur du contour\r\nplayButton.shadowOffsetX = 4; // Décalage de l'ombre en X\r\nplayButton.shadowOffsetY = 4; // Décalage de l'ombre en Y\r\nplayButton.shadowColor = \"#000000\"; // Couleur de l'ombre\r\nplayButton.shadowBlur = 8; // Flou de l'ombre\r\n\r\n// Ajouter une animation au survol\r\nplayButton.pointerEnterAnimation = function () {\r\n    playButton.background = \"white\";\r\n    playButton.color = \"grey\";\r\n   \r\n};\r\nplayButton.pointerOutAnimation = function () {\r\n    playButton.background = \"grey\";\r\n    playButton.color = \"white\";\r\n};\r\n\r\nplayButton.children[0].fontFamily = \"UnifrakturCook\";\r\n\r\n// Logique du bouton Play\r\nplayButton.onPointerClickObservable.add(function () {\r\n    console.log(\"Play button clicked\");\r\n    killLevel();\r\n    soundManager.stopMusic();\r\n    loadCredits();\r\n});\r\n\r\nadvancedTexture.addControl(playButton);\r\n\r\n}\r\n\r\n\r\n\r\nfunction createSkyBox(){\r\n\r\n    const skybox = BABYLON.MeshBuilder.CreateBox(\"skyBox\", { size: 1000.0 }, scene);\r\n    const skyboxMaterial = new BABYLON.StandardMaterial(\"skyBox\", scene);\r\n    skyboxMaterial.backFaceCulling = false;\r\n    skyboxMaterial.disableLighting = true;\r\n    skybox.material = skyboxMaterial;\r\n\r\n    //skybox.infiniteDistance = true;\r\n    skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(\"./models/skybox/skybox1/skybox\", scene);\r\n    skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;\r\n   \r\n}\r\n\r\n\r\nfunction screen(){\r\n    var planeOpts = {\r\n        height: 80,\r\n        width: 80,\r\n        sideOrientation: BABYLON.Mesh.DOUBLESIDE\r\n    };\r\n\r\n    // Création de l'avion\r\n    var videoPlane = BABYLON.MeshBuilder.CreatePlane(\"plane\", planeOpts, scene);\r\n    videoPlane.position = new BABYLON.Vector3(0, 0, 0);\r\n\r\n    \r\n    // Création du matériau vidéo\r\n    var videoMaterial = new BABYLON.StandardMaterial(\"m\", scene);\r\n    var videoTexture = new BABYLON.VideoTexture(\"vidtex\", \"video/Loading.mp4\", scene);\r\n    videoMaterial.diffuseTexture = videoTexture;\r\n    videoMaterial.roughness = 1;\r\n    videoMaterial.emissiveColor = new BABYLON.Color3.White();\r\n    videoPlane.material = videoMaterial;\r\n    \r\n}\r\n\r\n\r\nfunction defaultLoadingScreen(){\r\n    engine.displayLoadingUI();\r\n\r\n    scene.executeWhenReady(function () {\r\n        setTimeout(function () {\r\n            engine.hideLoadingUI();\r\n            soundManager.initMusic();\r\n        }, 5000); // 5000 millisecondes = 5 secondes\r\n    });\r\n\r\n}\r\n\r\n\r\nexport {  scene, launch };","// Importez les modules \"scene1.js\" et \"scene2.js\" pour accéder à leurs fonctionnalités\r\nimport * as levelSwimming from './sceneSwiming.js';\r\nimport * as start from './cinematique.js';\r\nimport * as end from './End.js';\r\nimport * as scene2 from './scene2.js'\r\nimport * as scene3 from './scene3.js'\r\nimport * as scene4 from './scene4.js'\r\nimport * as credit from './cinematique_credit.js'\r\nimport * as menu from './Menu.js'\r\n\r\nlet winCountPlayer1 =0;\r\nlet winCountPlayer2 =0;\r\n// Fonctions principales\r\nfunction Main() {\r\n    \r\n    // Appelez la fonction \"launch\" du module \"level2\" pour lancer la scène 2\r\n    \r\n    launchEnd();\r\n   \r\n    //launchLevel2();\r\n   //launchLevel3();\r\n    //launchLevel4();\r\n    //launchCredit();\r\n    //launchSwimingLevel();\r\n    //launchLevelMenu();\r\n   //launchStart();\r\n    \r\n\r\n   \r\n}\r\nfunction launchLevelMenu(){\r\n    \r\n    menu.launch();\r\n}\r\nfunction launchEnd(){\r\n    \r\n    end.launch();\r\n}\r\nfunction launchLevel2(){\r\n    scene2.killLevel();\r\n    scene2.launch();\r\n}\r\n\r\n\r\nfunction launchLevel3(){\r\n    \r\n   scene3.launch();\r\n}\r\n\r\nfunction launchLevel4(){\r\n    \r\n    scene4.launch();\r\n}\r\nfunction launchStart(){\r\n    \r\n    start.launch();\r\n}\r\n\r\nfunction launchCredit(){\r\n    \r\n    credit.launch();\r\n}\r\nfunction launchSwimingLevel(){\r\n    levelSwimming.launch();\r\n    \r\n  \r\n}\r\n\r\nfunction setcountPlayer1(){\r\n    winCountPlayer1++;\r\n}\r\nfunction setcountPlayer2(){\r\n    winCountPlayer2++;\r\n}\r\n\r\n \r\n// Exportez toutes les fonctions d'un coup\r\nexport { Main, launchEnd, launchLevel2, launchLevel3, launchLevel4,setcountPlayer1,setcountPlayer2,launchLevelMenu,launchStart,launchCredit,winCountPlayer1,winCountPlayer2 };\r\n\r\n\r\n// Exécute la fonction principale\r\nMain();\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","constructor","scene","musicName","this","musicSound","volumeSlider","document","addEventListener","initVolumeSlider","initMusic","music","BABYLON","Sound","loop","autoplay","updateVolume","window","Engine","audioEngine","audioContext","state","resume","then","once","sliderId","getElementById","setVolume","value","stopMusic","stop","destroy","removeEventListener","clickHandler","canvas","engine","Scene","CreateTree","x","y","z","tree","tronc","SceneLoader","ImportMesh","meshes","console","log","name","position","Vector3","PhysicsAggregate","PhysicsShapeType","BOX","mass","shape","isTrigger","undefined","boundingBox","CreatePineTree","scaling","shapeBox1","PhysicsShapeBox","Quaternion","shapeBox2","CreateSnowManOnSki","parent","mesh","setParent","CreateSceneProd","CreatePlayer","Zone","plane","width","height","ground","MeshBuilder","CreateGround","subdivisions","addInPlace","rotation","groundMaterial","StandardMaterial","diffuseColor","Color3","material","flatplane","createDeadTree","globalMesh","createSnowTree","createLitleSnowTree","createSnowMan","CreateRampe1","bigMesh","elment","MESH","createSnowMount","element","createFinalScene2","getMeshByName","i","length","CreatePlateform","CreatePlateformlevel2","CreatePlateform_Scene4","CreateBowlingPlatform","CreateBowlingBall","SPHERE","CreateColiseum","CreateMenu3dScene","Createlevel1","CreatePlateformlevel3","cene","playerLoose","playerWin","trophy","ShowLoadingScreen","winCountPlayer1","winCountPlayer2","displayLoadingUI","executeWhenReady","setTimeout","hideLoadingUI","HemisphericLight","FreeCamera","attachControl","skybox","CreateBox","size","skyboxMaterial","backFaceCulling","disableLighting","infiniteDistance","reflectionTexture","CubeTexture","coordinatesMode","Texture","SKYBOX_MODE","runRenderLoop","render"],"sourceRoot":""}